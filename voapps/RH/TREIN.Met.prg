PARTIAL CLASS JTRE
METHOD ANTERIOR 
SELF:oSFJTRI:Browser:SuspendUpdate()
IF ! SELF:oSFJTRI:Server:bof
   SELF:oSFJTRI:SkipPrevious()
ENDIF
SELF:oSFJTRI:Browser:RestoreUpdate()

METHOD APPEND() 
LOCAL nTRE AS DWORD
LOCAL aRESP AS ARRAY
SELF:server:setorder(1)
SELF:server:gobottom()
nTRE:=SELF:Server:TREIN
nTRE++
SELF:SERVER:SUSPENDNOTIFICATION()
SUPER:append()
SELF:SERVER:FIELDPUT("TREIN",nTRE)
SELF:SERVER:FIELDPUT("AREA","RH")
aRESP:=PEGMP05("RH",ZCURINI,ZCURDIR)
IF aRESP[1]=.T.
    SELF:SERVER:FIELDPUT("RESPO",aRESP[2])
ENDIF
SELF:SERVER:FIELDPUT("DATACUR",Today())
SELF:SERVER:FIELDPUT("DATAFIM",Today())
SELF:SERVER:commit()
SELF:SERVER:resetnotification()
SELF:SERVER:notify(notifyappend)
RETURN  .t.

METHOD AVALIACAO 
IF SELF:oSFJTRI:server:AVALIA="S"
   SELF:oSFJTRI:server:AVALIA:="I"
ELSE
   SELF:oSFJTRI:server:AVALIA:="S"
ENDIF


METHOD buscacurso( ) 
LOCAL oBUSCA AS xBUSCA
oBUSCA:=xBUSCA{SELF,"Localizar","Digite o Curso"}
oBUSCA:lMES:=.T.
oBUSCA:SHOW()
IF oBUSCA:lOK
   SELF:SERVER:SETORDER(2)
   SELF:SERVER:GOTOP()
   SELF:SERVER:SEEK(oBUSCA:cBUSCA)
ENDIF	


METHOD buscadata( ) 
LOCAL oBUSCA AS xBUSCA
oBUSCA:=xBUSCA{SELF,"Localizar","Digite o Data"}
oBUSCA:lMES:=.T.
oBUSCA:SHOW()
IF oBUSCA:lOK
   SELF:SERVER:SETORDER(4)
   SELF:SERVER:GOTOP()
   SELF:SERVER:SEEK(CToD(oBUSCA:cBUSCA))
ENDIF	

METHOD BuscaFUN( ) 
SELF:oSFJTREINF:SERVER:GOTOP()
SELF:oSFJTREINF:SERVER:SEEK(AllTrim(SELF:CNOME))
IF SELF:oSFJTREINF:SERVER:EOF
   SELF:oSFJTREINF:GOTOP()
ENDIF	
	

METHOD buscanumero( ) 
LOCAL oBUSCA AS xBUSCA
oBUSCA:=xBUSCA{SELF,"Localizar","Digite o Numero"}
oBUSCA:lMES:=.T.
oBUSCA:SHOW()
IF oBUSCA:lOK
   SELF:SERVER:SETORDER(1)
   SELF:SERVER:GOTOP()
   SELF:SERVER:SEEK(Val(oBUSCA:cBUSCA))
ENDIF	

METHOD buscarefer( ) 
LOCAL oBUSCA AS xBUSCA
oBUSCA:=xBUSCA{SELF,"Localizar","Digite a Referencia"}
oBUSCA:lMES:=.T.
oBUSCA:SHOW()
IF oBUSCA:lOK
   SELF:SERVER:SETORDER(3)
   SELF:SERVER:GOTOP()
   SELF:SERVER:SEEK(oBUSCA:cBUSCA)
ENDIF	

METHOD CERTIFICADO 
IF SELF:oSFJTRI:server:TRXCER="S"
   SELF:oSFJTRI:server:TRXCER:="N"
ELSE
   SELF:oSFJTRI:server:TRXCER:="S"
ENDIF

METHOD cmdAnalise( ) 
IF Empty(SELF:SERVER:FIELDGET("TIPOANA"))
   IF Empty(SELF:SERVER:FIELDGET("TIPCUR"))
   	  alert("Tipo de Curso Nao Preenchido")
   ENDIF	
   SELF:SERVER:FIELDPUT("TIPOANA",SELF:SERVER:FIELDGET("TIPCUR"))
ELSE
	DO CASE
   	   CASE SELF:SERVER:TIPOANA="I"
   	   		SELF:SERVER:TIPOANA:="E"
       CASE SELF:SERVER:TIPOANA="E"
            SELF:SERVER:TIPOANA:="N"
       CASE	SELF:SERVER:TIPOANA="N"
            SELF:SERVER:TIPOANA:="I"
    ENDCASE	
ENDIF		

METHOD cmdAnual( ) 
	SELF:SERVER:FIELDPUT("TIPDIS","A")

METHOD cmdavalia( ) 
IF SELF:server:AVAGER="S"
   SELF:server:AVAGER:="I"
ELSE
   SELF:server:AVAGER:="S"
ENDIF

METHOD cmddelfiltro() 
   SELF:xcmddelfiltro()	
  SELF:Browser:REFRESH()

METHOD CMDFILTRAR() 
	SELF:xCMDFILTRAR()
	SELF:Browser:REFRESH()

METHOD CMDimprimir( ) 
SELF:XWRPTGRP("RH","TRE")	


METHOD cmdinco( ) 
		SELF:SERVER:FIELDPUT("TIPDIS","I")
IF MDG("Gerar Programa de Treinamento")
   SELF:EXPORTAR()	
ENDIF		

METHOD cmdtIPO( ) 
IF Empty(SELF:SERVER:FIELDGET("TIPCUR")) .OR. SELF:SERVER:FIELDGET("TIPCUR")="E"
   SELF:SERVER:FIELDPUT("TIPCUR","I")
ELSE
   SELF:SERVER:FIELDPUT("TIPCUR","E")	
ENDIF		

METHOD COMPARECEU 
IF SELF:oSFJTRI:server:COMPAR="S"
   SELF:oSFJTRI:server:COMPAR:="N"
ELSE
   SELF:oSFJTRI:server:COMPAR:="S"
ENDIF


METHOD copiar( ) 
	SELF:server:FIELDPUT("PRO",SELF:SERVER:FIELDGET("CURSO"))
	SELF:server:FIELDPUT("DESPRO",SELF:SERVER:FIELDGET("DESCUR"))	

METHOD DELETE() 
IF  MDG("Apagar Registro") .AND. SELF:SERVER:LOCKcurrentrecord()
   SELF:SERVER:SUSPENDNOTIFICATION()
   SELF:oSFJTRI:SERVER:SUSPENDNOTIFICATION()
   SELF:oSFJTRI:SERVER:gotop()
   WHILE ! SELF:oSFJTRI:SERVER:eof
	 	SELF:oSFJTRI:SERVER:delete()
	 	SELF:oSFJTRI:SERVER:skip()	
      ENDDO
	SELF:oSFJTRI:SERVER:resetnotification()
	SELF:oSFJTRI:SERVER:notify(notifyfilechange)
	SELF:server:delete()
	SELF:server:unlock()
	SELF:SERVER:RESETNOTIFICATION()
	SELF:SERVER:Notify(notifyfilechange)
	IF ! SELF:SERVER:BOF
	   SELF:SERVER:Skip(-1)
	ENDIF	
ENDIF	

METHOD ESCCUR 
LOCAL oJAN AS XESCCUR
oJAN:=XESCCUR{SELF,ZCURINI,ZCURDIR,"CURSO.DBF"}
oJAN:SHOW()
IF oJAN:lOK
   SELF:SERVER:FIELDPUT("CURSO",AllTrim(oJAN:CODIGO))
   SELF:PEGCURDES()
ENDIF	


METHOD esccur1( ) 
LOCAL oJAN AS XESCCUR
oJAN:=XESCCUR{SELF,ZCURINI,ZCURDIR,"PROCEDIM.DBF"}
oJAN:SHOW()
IF oJAN:lOK
   SELF:SERVER:FIELDPUT("PRO",oJAN:CODIGO)
   SELF:SERVER:FIELDPUT("DESPRO",oJAN:NOME)
ENDIF	

METHOD escESC( ) 
LOCAL oESC AS XESCNUM	
oESC:=XESCNUM{SELF,"CUREMP.DBF"}
oESC:SHOW()	
IF Oesc:lok
    SELF:SERVER:FIELDPUT("NESCOLA",oESC:NUMERO)
    SELF:SERVER:FIELDPUT("INSTRU",oESC:NOME)
ENDIF		


METHOD ESCINS 
SELF:SERVER:FIELDPUT("NINSTU",SELF:oSFJTREINF:SERVER:FIELDGET("TECNICO"))
SELF:SERVER:FIELDPUT("INSTRU",SELF:oSFJTREINF:SERVER:FIELDGET("NOMTEC"))

METHOD Escins1( ) 
SELF:SERVER:FIELDPUT("NUMSOL",SELF:oSFJTREINF:SERVER:FIELDGET("TECNICO"))
SELF:SERVER:FIELDPUT("NOMSOL",SELF:oSFJTREINF:SERVER:FIELDGET("NOMTEC"))	

METHOD Esco( ) 
LOCAL oERRO AS ERRORBOX
LOCAL dDATA,dDEM AS DATE
IF ! MDG("Escolher Todos os Ativos","Confirme Procedimento")
   RETURN .f.
ENDIF	
dDATA:=SELF:SERVER:FIELDGET("DATACUR")
IF Empty(dDATA)
   oERRO:=ERRORBOX{SELF,"Falta Data Inicial do Curso"}
   oERRO:SHOW()		
   RETURN .f.
ENDIF	
SELF:oSFJTREINF:SERVER:gotop()
WHILE ! SELF:oSFJTREINF:SERVER:EOF
   IF dDATA>=SELF:oSFJTREINF:SERVER:FIELDGET("ADMITIDO")
   	  dDEM:=SELF:oSFJTREINF:SERVER:FIELDGET("DEMITIDO")
   	  IF Empty(dDEM) .or. dDATA<=dDEM
         SELF:NFUNC:=SELF:oSFJTREINF:SERVER:FIELDGET("TECNICO")
         SELF:NOVO()	
      ENDIF
   ENDIF
   SELF:oSFJTREINF:SERVER:SKIP()	
ENDDO	
	

METHOD ESCOLHER 
SELF:NFUNC:=SELF:oSFJTREINF:SERVER:FIELDGET("TECNICO")
SELF:NOVO()

METHOD escres( ) 
LOCAL oESCMP04 AS XESCMP04
oESCMP04:=XESCMP04{SELF}
IF oESCMP04:LOK
   SELF:SERVER:FIELDPUT("NINSTU",oESCMP04:NUMERO)
   SELF:SERVER:FIELDPUT("INSTRU",oESCMP04:NOME)
ENDIF

METHOD ESCSOL( ) 
	LOCAL oESCMP04 AS XESCMP04
oESCMP04:=XESCMP04{SELF}
IF oESCMP04:LOK
   SELF:SERVER:FIELDPUT("NUMSOL",oESCMP04:NUMERO)
   SELF:SERVER:FIELDPUT("NOMSOL",oESCMP04:NOME)
ENDIF

METHOD EXCLUIR 
IF  MDG("Apagar Registro") .AND. SELF:oSFJTRI:server:LockCurrentRecord()
    SELF:oSFJTRI:SERVER:SUSPENDNOTIFICATION()	
    SELF:oSFJTRI:server:delete()
    SELF:oSFJTRI:server:unlock()
    SELF:oSFJTRI:SERVER:resetnotification()
	SELF:oSFJTRI:SERVER:notify(notifyfilechange)
	IF SELF:SERVER:PARTi>0
       SELF:SERVER:PARTI:=(SELF:SERVER:PARTI)-1
    ENDIF
    SELF:oSFJTRI:server:GOTOP()		
	WHILE ! SELF:oSFJTRI:serveR:EOf
		SELF:oSFJTRI:server:Skip()
    ENDDO		
    SELF:oSFJTRI:server:GOTOP()	
    SELF:oSFJTRI:Browser:REFRESH()
ENDIF	


METHOD EXPORTAR(oOWNER) 
LOCAL aDAD,aCOM AS ARRAY
LOCAL oPT,oPTI AS USEREDE
LOCAL aCAMPO AS ARRAY
LOCAL X AS BYTE
LOCAL nNUMERO AS DWORD
aDAD:={zCURINI,"PT.DBF",zCURDIR}
aCOM:={zMES,zANO,ZEMPRESA}
//Init(aDAD, lShareMode, lReadOnlyMode, cDriver, aCOM)
oPT:=USEREDE{aDAD,,,,aCOM}
IF oPT:nERRO#0
   RETU SELF
ENDIF
aDAD:={zCURINI,"PTI.DBF",zCURDIR}
aCOM:={zMES,zANO,ZEMPRESA}
//Init(aDAD, lShareMode, lReadOnlyMode, cDriver, aCOM)
oPTI:=USEREDE{aDAD,,,,aCOM}
IF oPTI:nERRO#0
   oPT:CLOSE()	
   RETU SELF
ENDIF
AltD()
OPT:Gobottom()
nNUMERO:=oPT:FIELDGET("TREIN")
nNUMERO++
oPT:Append()
oPT:FIELDPUT("TREIN",nNUMERO)
aCAMPO:={"TIPCUR","TIPDIS","CARGA","PARTI","CERT","CURSO","DESCUR","DATACUR",;
         "DATAFIM","AREA","RESPO","INSTRU","NINSTU","NESCOLA","REFER"}
FOR X:=1 TO Len(aCAMPO)
	oPT:FIELDPUT(aCAMPO[X],SELF:SERVER:FIELDGET(aCAMPO[X]))
NEXT X	
SELF:oSFJTRI:GOTOP()
WHILE ! SELF:oSFJTRI:SERVER:eof
   oPTI:Append()	
   oPTI:FIELDPUT("TREIN",nNUMERO)
   oPTI:FIELDPUT("NUMFUN",SELF:oSFJTRI:SERVER:FIELDGET("NUMFUN"))
   oPTI:FIELDPUT("NOMFUN",SELF:oSFJTRI:SERVER:FIELDGET("NOMFUN"))
   SELF:oSFJTRI:SERVER:skip()	
ENDDO
OPT:CLOSE()
OPTI:Close()

METHOD IMPORTAR(oOWNER) 
LOCAL aDAD,aCOM AS ARRAY
LOCAL oPT,oPTI AS USEREDE
LOCAL aCAMPO AS ARRAY
LOCAL X AS BYTE
aDAD:={zCURINI,"PT.DBF",zCURDIR}
aCOM:={zMES,zANO,ZEMPRESA}
//Init(aDAD, lShareMode, lReadOnlyMode, cDriver, aCOM)
oPT:=USEREDE{aDAD,,,,aCOM}
IF oPT:nERRO#0
   RETURN .f.
ENDIF
aDAD:={zCURINI,"PTI.DBF",zCURDIR}
aCOM:={zMES,zANO,ZEMPRESA}
//Init(aDAD, lShareMode, lReadOnlyMode, cDriver, aCOM)
oPTI:=USEREDE{aDAD,,,,aCOM}
IF oPTI:nERRO#0
   oPT:CLOSE()	
   RETURN .f.
ENDIF
OPT:GoTop()
IF ! OPT:SEEK(SELF:PT)
   OPT:CLOSE()
   OPTI:Close()
   alert("Programa näo Localizado")
   RETURN .f.
ENDIF	
aCAMPO:={"TIPCUR","TIPDIS","CARGA","PARTI","CERT","CURSO","DESCUR","DATACUR",;
         "DATAFIM","AREA","RESPO","INSTRU","NINSTU","NESCOLA","REFER"}
FOR X:=1 TO Len(aCAMPO)
	SELF:SERVER:FIELDPUT(aCAMPO[X],OPT:FIELDGET(aCAMPO[X]))
NEXT X	
SELF:oSFJTRI:SERVER:SUSPENDNOTIFICATION()
OPTI:GoToP()
IF OPTI:SEEK(SELF:PT)
   WHILE oPTI:FIELDGET("TREIN")=SELF:PT .AND. !oPTI:EoF
		SELF:oSFJTRI:SERVER:APPEND()
		SELF:oSFJTRI:SERVER:FIELDPUT("TREIN",SELF:SERVER:TREIN)
		SELF:oSFJTRI:SERVER:FIELDPUT("NUMFUN",opti:FIELDGET("NUMFUN"))
		SELF:oSFJTRI:SERVER:FIELDPUT("NOMFUN",opti:FIELDGET("NOMFUN"))
		SELF:oSFJTRI:SERVER:commit()
        oPTI:SKiP()
   ENDDO
ENDIF	
SELF:oSFJTRI:SERVER:resetnotification()
SELF:oSFJTRI:SERVER:notify(notifyFILECHANGE)
OPT:CLOSE()
OPTI:Close()

METHOD ListBoxSelect( oControlEvent ) 
	LOCAL oControl AS Control
	LOCAL aRESP AS ARRAY
	oControl := IIf( oControlEvent == NULL_OBJECT, NULL_OBJECT, oControlEvent:Control )
	SUPER:ListBoxSelect( oControlEvent )
	//Put your changes here
    DO CASE
       CASE oCONTROL:NAMESYM==#AREA
            aRESP:=PEGMP05(SELF:SERVER:AREA,ZCURINI,ZCURDIR)
            IF aRESP[1]=.T.
               SELF:SERVER:RESPO:=aRESP[2]
            ENDIF
	ENDCASE
RETURN NIL

METHOD NOVO(oOWNER) 
LOCAL nTREIN AS DWORD
LOCAL aTEC AS ARRAY
LOCAL Oerro AS errorbox
nTREIN:=SELF:SERVER:TREIN
IF SELF:NFUNC=0
     Oerro:=ERRORBOX{oOWNER,"Codigo Funcionarios em Branco"}
     Oerro:show()
     RETU NIL
ENDIF
aTEC:=PEGMP04(SELF:NFUNC,ZCURINI,ZCURDIR,{zMES,zANO,ZEMPRESA})
IF aTEC[1]=.F.
   Oerro:=ERRORBOX{oOWNER,"Funcionarios nao cadastrado"}
   Oerro:show()
   RETU NIL
ENDIF
SELF:oSFJTRI:SERVER:SUSPENDNOTIFICATION()
SELF:oSFJTRI:SERVER:APPEND()
SELF:oSFJTRI:SERVER:TREIN:=nTREIN
SELF:oSFJTRI:SERVER:NUMFUN:=SELF:NFUNC
SELF:oSFJTRI:SERVER:NOMFUN:=aTEC[2]
SELF:oSFJTRI:SERVER:commit()
SELF:oSFJTRI:SERVER:resetnotification()
SELF:oSFJTRI:SERVER:notify(notifyappend) //Contas do Livro
SELF:SERVER:PARTI:=(SELF:SERVER:PARTI)+1
SELF:oDCNFUNC:SetFocus()
SELF:oSFJTRI:Browser:REFRESH()

METHOD pegcurdes( ) 
LOCAL Adad AS ARRAY	
   aDAD:=PEGCUR(SELF:SERVER:CURSO)
   IF aDAD[1]=.T.
      SELF:SERVER:DESCUR:=aDAD[2]
      SELF:SERVER:CERT:=aDAD[3]
      IF Empty(SELF:SERVER:TIPCUR)
         SELF:SERVER:TIPCUR:=aDAD[5]
         SELF:SERVER:TIPOANA:=aDAD[5]
      ENDIF
   ENDIF	


METHOD pegcurdes1( ) 
LOCAL Adad AS ARRAY	
   aDAD:=PEGPRO(SELF:SERVER:PRO)
   IF aDAD[1]=.T.
      SELF:SERVER:FIELDPUT("DESPRO",aDAD[2])
   ENDIF	

METHOD btnPEGESC( ) 
LOCAL aTEC AS ARRAY	
aTEC:=PEGESC(SELF:SERVER:FIELDGET("NESCOLA"),ZCURINI,ZCURDIR)
IF aTEC[1]=.T.
   SELF:SERVER:FIELDPUT("INSTRU",aTEC[2])	
ENDIF			

METHOD PEGINS( ) 
LOCAL aTEC AS ARRAY	
aTEC:=PEGMP04(SELF:SERVER:FIELDGET("NINSTU"),ZCURINI,ZCURDIR,{zMES,zANO,ZEMPRESA})
IF aTEC[1]=.T.
   SELF:SERVER:FIELDPUT("INSTRU",aTEC[2])	
ENDIF		

METHOD comboPEGMP05() 
RETU PEGCOMBO("MP05.DBF","DESCRI","CODIGO")

METHOD PEGSOL( ) 
	LOCAL aTEC AS ARRAY	
aTEC:=PEGMP04(SELF:SERVER:FIELDGET("NUMSOL"),ZCURINI,ZCURDIR,{zMES,zANO,ZEMPRESA})
IF aTEC[1]=.T.
   SELF:SERVER:FIELDPUT("NOMSOL",aTEC[2])	
ENDIF		

METHOD porcurso 
	SELF:server:setorder(2)	

METHOD pordata 
	SELF:server:setorder(4)	

METHOD pornumero 
	SELF:server:setorder(1)
	

METHOD porrefer 
	SELF:server:setorder(3)	

METHOD PostInit() 
   SELF:RegisterTimer(300,FALSE)
   FabCenterWindow( SELF )
 RETURN SELF

METHOD PROXIMO 
SELF:oSFJTRI:Browser:SuspendUpdate()
IF ! SELF:oSFJTRI:Server:Eof
   SELF:oSFJTRI:SkipNext()
ENDIF
SELF:oSFJTRI:Browser:RestoreUpdate()



METHOD Timer() 
   SELF:SERVER:COMMIT()
   SELF:oSFJTRI:SERVER:COMMIT()



END CLASS
