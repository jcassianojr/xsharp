<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>VOGUIClasses</name>
  </assembly>
  <members>
    <member name="T:VO.Accelerator">
      <summary>
            Create an accelerator table.
        </summary>
    </member>
    <member name="M:VO.Accelerator.#ctor(XSharp.__Usual)">
      <summary>
            Load an accelerator table from a resource entity.
        </summary>
      <param name="xResourceID">The resource ID of the accelerator table, or another accelerator object, whose accelerators are copied.</param>
    </member>
    <member name="M:VO.Accelerator.AddAccelerator(XSharp.__Usual)">
      <summary>
            Adds all accelerator keys of one accelerator object to another
        </summary>
      <param name="oAccelerator">Existing Accelerator objects, whose accelerator keys are copied. </param>
      <returns>
            TRUE when successful, FALSE when not, for example because the object not dynamic anymore
        </returns>
    </member>
    <member name="M:VO.Accelerator.AddKey(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Adds a new accelerator key to the accelerator table
        </summary>
      <param name="nMenuItemId">the accelerator ID which is sent with a MenuComandEvent{} when the accelerator key is pressed.</param>
      <param name="xKeyId">can be a numeric VO key-code, which is identical to the windows virtual-key code, or a string with one character which specifies the character-code.</param>
      <param name="lCtrl">When TRUE, the CTRL key must be held down when the accelerator key is pressed.</param>
      <param name="lAlt">When TRUE, the ALT key must be held down when the accelerator key is pressed.</param>
      <param name="lShift">When TRUE, the SHIFT key must be held down when the accelerator key is pressed.</param>
      <returns>
            TRUE when successful, FALSE when not, for example because the object not dynamic anymore
        </returns>
    </member>
    <member name="M:VO.Accelerator.Create">
      <summary>
        <para>Creates the underlying windows accelerator.</para>
      </summary>
      <returns>
        <para>The handle of the accelerator, if successful. A null handle (NULL_PTR) is returned if the control creation failed.</para>
      </returns>
    </member>
    <member name="M:VO.Accelerator.Destroy">
      <summary>
            Provide a method to de-instantiate an Accelerator object.
        </summary>
      <returns>
            NIL
        </returns>
    </member>
    <member name="P:VO.Accelerator.Empty">
      <summary>
            Returns TRUE when the accelerator table contains no keys.
        </summary>
      <value>TRUE when the accelerator table contains no keys.</value>
    </member>
    <member name="M:VO.Accelerator.Handle">
      <summary>
            Return the handle for an accelerator.
        </summary>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="T:VO.AnimationControl">
      <summary>
            Create an animation control.
        </summary>
    </member>
    <member name="M:VO.AnimationControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an animation control.
        </summary>
      <param name="oOwner">The window that owns the animation control.</param>
      <param name="xID">The unique ID of the animation control (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of the animation control.</param>
      <param name="oPoint">The origin of the animation control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the animation control in canvas coordinates.</param>
      <param name="oFileSpec">The FileSpec object that describes the associated AVI file.</param>
      <param name="cFileName">The file name that describes the associated AVI file.</param>
      <param name="kStyle">The style of the animation control.</param>
      <param name="hInst">The instance handle to be passed to the window when creating the control.</param>
    </member>
    <member name="M:VO.AnimationControl.Create">
      <summary>
            Creates the underlying window control for a X# animation control object.
        </summary>
      <returns>
            The window handle of the control, if successful. A null handle (NULL_PTR) is returned if the control creation failed.
        </returns>
    </member>
    <member name="P:VO.AnimationControl.FileSpec">
      <summary>
            The FileSpec object that describes the associated AVI file.
        </summary>
      <value>The FileSpec object that describes the associated AVI file.</value>
    </member>
    <member name="M:VO.AnimationControl.Open">
      <summary>
            Open the AVI file and display its first frame in the animation control.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.AnimationControl.OpenResource(XSharp.__Usual)">
      <summary>
            Open the AVI resource and display its first frame in the animation control.
        </summary>
      <param name="xID">The unique ID for the animation resource (between 1 and 8000), or a ResourceID object identifying the AVI resource.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.AnimationControl.Play(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Play the AVI file in the animation control.
        </summary>
      <param name="nFrom">The initial frame number. If omitted, playback begins from the first frame.</param>
      <param name="nTo">The final frame number. If omitted, playback continues to the last frame.</param>
      <param name="nRepeatCount">The number of times to play the AVI file. If omitted, playback is repeated indefinitely.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.AnimationControl.Seek(XSharp.__Usual)">
      <summary>
            Direct the animation control to display a particular frame in the AVI file.
        </summary>
      <param name="nFrame">The frame number to display.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.AnimationControl.Stop">
      <summary>
            Direct the animation control to stop the display of the AVI file.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.App">
      <summary>
            Create an entity that represents the overall application. Please note that you have to create a subclass of App in your code and add a Start() method to this class. You can't add a Start() method to the App() class inside GUI Classes like you can in VO.
        </summary>
    </member>
    <member name="M:VO.App.#ctor(XSharp.__Usual)">
      <summary>
            Construct an application.
        </summary>
      <param name="oOwner">The window that owns the application.</param>
    </member>
    <member name="M:VO.App.Exec(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Start the event handling loop for the application.
        </summary>
      <param name="kExecType">
            The type of event handling loop to start, specified as one of the following constants
            <list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>EXECNORMAL</term><description>
                        Tells the system to continue to execute the application until either the user closes it
                        (by selecting the Close menu command or using the standard Windows accelerator Alt+F4)
                        or the application decides to close by deliberately invoking the App:Quit() method.
                        When the application terminates, the thread of control exits from App:Exec() to the
                        next statement in your code. This is the default.
                    </description></item><item><term>EXECWHILEEVENT</term><description>
                        Tells the system to continue to execute the application only while there are still events queued.
                        Once the system has dispatched the last event in the queue, the thread of control exits from App:Exec().
                        This gives you the opportunity to do some processing and then start another event loop by invoking
                        App:Exec() again. You should use this mechanism when you want to do some background processing
                        while the application is idle.
                    </description></item></list></param>
      <param name="oObject">** missing parameter documentation **</param>
      <returns>
            A value of 0 indicates normal termination (no errors). A non-zero value indicates abnormal termination.
        </returns>
    </member>
    <member name="M:VO.App.GetAccel">
      <summary>This method returns the handle for the current active Accelerator Table.</summary>
      <returns>The handle for the current active Accelerator Table.</returns>
    </member>
    <member name="M:VO.App.GetAccelWindow">
      <summary>This method gets the handle to the window for which accelerators must be translated.</summary>
      <returns>The window for which accelerators must be translated.</returns>
    </member>
    <member name="M:VO.App.GetDialogWindow">
      <summary>This method gets the handle active Dialog window for which Dialog keys must be handled</summary>
      <returns>The handle to the active Dialog window.Please note that the surface of a DataWindow is also a DialogWindow.</returns>
    </member>
    <member name="M:VO.App.GetMdiClientWindow">
      <summary>This method gets the handle to the MDI Clientwindow on the active ShellWindow.</summary>
      <returns>The handle to the MDI Client window.</returns>
    </member>
    <member name="M:VO.App.Handle">
      <summary>
            Return the handle for an application.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option, and it is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.App.Quit">
      <summary>
            Terminate the application by instructing the application to close itself.
        </summary>
    </member>
    <member name="M:VO.App.Run(XSharp.__Usual)">
      <summary>
            Invoke and execute a specified command.
        </summary>
      <param name="sCommand">The command to be executed (including any required arguments).</param>
      <returns>
            A long integer value indicating successful completion or an error. The numbers 0-32 correspond to a specific error type in Windows (e.g., 0 means "out of memory," 2 means "file not found," etc.); any other number indicates successful completion.
        </returns>
    </member>
    <member name="M:VO.App.SetAccel(XSharp.__Usual)">
      <summary>This method sets the handle for the current active Accelerator Table (belonging to the active menu).</summary>
      <param name="hNewAccel">The handle to the Accelerator table that has to become active</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.App.SetAccelWindow(XSharp.__Usual)">
      <summary>This method sets the window for which accelerators must be translated.</summary>
      <param name="hNewAccelWnd">The handle for the window for which accelerators (labels that start with an ampersand) must be translated.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.App.SetDialogWindow(XSharp.__Usual)">
      <summary>This method sets the handle active Dialog window for which Dialog keys must be handled</summary>
      <param name="hNewDialogWnd">The handle for active Dialog window. Please note that the surface of a DataWindow is also a DialogWindow.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.App.SetMdiClientWindow(XSharp.__Usual)">
      <summary>This method sets the handle to the MDI Clientwindow on the active ShellWindow.</summary>
      <param name="hNewMdiClientWnd">The handle for the MDI Clientwindow.</param>
      <returns>NIL</returns>
    </member>
    <member name="T:VO.AppCommandEvent">
      <summary>
            Provide information about an AppCommand event, which is launched by the extra keys on an extended keyboard or mouse.
        </summary>
    </member>
    <member name="M:VO.AppCommandEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.AppCommandEvent.Command">
      <summary>
            The command associated with this event.
        </summary>
      <value>The command associated with this event.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsControl">
      <summary>
            Returns TRUE if the Control Key is down; otherwise, FALSE.
        </summary>
      <value>TRUE if the Control Key is down; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsDeviceKey">
      <summary>
            Returns TRUE if the device that issued the command was a keyboard; otherwise, FALSE.
        </summary>
      <value>TRUE if the device that issued the command was a keyboard; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsDeviceMouse">
      <summary>
            Returns TRUE if the device that issued the command was a mouse; otherwise, FALSE.
        </summary>
      <value>TRUE if the device that issued the command was a mouse; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsDeviceOEM">
      <summary>
            Returns TRUE if the device that issued the command was an OEM device; otherwise, FALSE.
        </summary>
      <value>TRUE if the device that issued the command was an OEM device; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsLeftButton">
      <summary>
            Returns TRUE if the Left mouse button is down; otherwise, FALSE.
        </summary>
      <value>TRUE if the Left mouse button is down; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsMiddleButton">
      <summary>
            Returns TRUE if the Middle mouse button is down; otherwise, FALSE.
        </summary>
      <value>TRUE if the Middle mouse button is down; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsRightButton">
      <summary>
            Returns TRUE if the Right mouse button is down; otherwise, FALSE.
        </summary>
      <value>TRUE if the Right mouse button is down; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsShift">
      <summary>
            Returns TRUE if the Shift Key is down; otherwise, FALSE.
        </summary>
      <value>TRUE if the Shift Key is down; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsXButton1">
      <summary>
            Returns TRUE if the first X mouse button is down; otherwise, FALSE.
        </summary>
      <value>TRUE if the first X mouse button is down; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.IsXButton2">
      <summary>
            Returns TRUE if the second X mouse button is down; otherwise, FALSE.
        </summary>
      <value>TRUE if the second X mouse button is down; otherwise, FALSE.</value>
    </member>
    <member name="P:VO.AppCommandEvent.oTarget">
      <summary>
            Returns the target of the command.
            If it is a Key event the target is focused control or window. If it is a Mouse event the target is the control or window that is under the mouse pointer.
        </summary>
      <value>
            the target of the command.
            If it is a Key event the target is focused control or window. If it is a Mouse event the target is the control or window that is under the mouse pointer.
        </value>
    </member>
    <member name="T:VO.AppWindow">
      <summary>
            Provide the base class from which all X# application windows are subclassed.
        </summary>
    </member>
    <member name="M:VO.AppWindow.#ctor(XSharp.__Usual)">
      <summary>
            Construct an application window.
        </summary>
      <param name="oOwner">The window that owns the application window.</param>
    </member>
    <member name="M:VO.AppWindow.Default(XSharp.__Usual)">
      <summary>Call the default windows procedure for a window and set the EventReturnValue for the object.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.AppWindow.Destroy">
      <summary>
            Provide a method to free memory resources allocated for an AppWindow object and its derived objects.
        </summary>
    </member>
    <member name="M:VO.AppWindow.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the dispatcher for events within the system when the window has focus;
            routing various events to their appropriate event handlers.
        </summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event. This is usually the value of the EventReturnValue field.
        </returns>
    </member>
    <member name="M:VO.AppWindow.EnableBorder(XSharp.__Usual)">
      <summary>
            Set the border style for an application window.
        </summary>
      <param name="kBorderStyle">The display style of the application window's border, specified as one of the following constantsn</param>
    </member>
    <member name="M:VO.AppWindow.EnableHorizontalScroll(XSharp.__Usual)">
      <summary>
            Enable/disable a window horizontal scroll bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the horizontal scroll bar; FALSE disables it. The default is TRUE.</param>
      <returns>
            If the scroll bar is enabled, a WindowHorizontalScrollBar object is returned; if disabled, NULL_OBJECT is returned.
        </returns>
    </member>
    <member name="M:VO.AppWindow.EnableMaxBox(XSharp.__Usual)">
      <summary>
            Enable/disable a maximize box in an application window.
        </summary>
      <param name="lEnable">TRUE enables the maximize box; FALSE disables it. The default is TRUE.</param>
    </member>
    <member name="M:VO.AppWindow.EnableMinBox(XSharp.__Usual)">
      <summary>
            Enable/disable a minimize box in an application window.
        </summary>
      <param name="lEnable">TRUE enables the minimize box; FALSE disables it. The default is TRUE.</param>
    </member>
    <member name="M:VO.AppWindow.EnableOleDropTarget(XSharp.__Usual)">
      <summary>
            Register the window as an OLE drop target.
        </summary>
      <param name="lEnable">A logical value specifying whether to enable (TRUE) or disable (FALSE) the window as a drop target.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.AppWindow.EnableStatusBar(XSharp.__Usual)">
      <summary>
            Enable/disable a status bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the status bar; FALSE disables it. The default is TRUE.</param>
      <returns>
            The status bar object.
        </returns>
    </member>
    <member name="M:VO.AppWindow.EnableSystemMenu(XSharp.__Usual)">
      <summary>
            Enable/disable a system menu in an application window.
        </summary>
      <param name="lEnable">TRUE enables the system menu; FALSE disables it. The default is TRUE.</param>
      <returns>
            If the system menu is enabled, a system menu is returned; if disabled, NIL is returned.
        </returns>
    </member>
    <member name="M:VO.AppWindow.EnableToolBar(XSharp.__Usual)">
      <summary>
            Enable/disable a toolbar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the toolbar; FALSE disables it. The default is TRUE.</param>
      <returns>
            The toolbar object.
        </returns>
    </member>
    <member name="M:VO.AppWindow.EnableVerticalScroll(XSharp.__Usual)">
      <summary>
            Enable/disable a window vertical scroll bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the WindowVerticalScrollBar object; FALSE disables it. The default is TRUE.</param>
      <returns>
            If the scroll bar is enabled, a WindowVerticalScrollBar object is returned; if disabled, NULL_OBJECT is returned.
        </returns>
    </member>
    <member name="M:VO.AppWindow.EndWindow(XSharp.__Usual)">
      <summary>
            Remove this application window from view (passing control back to the routine which created the application window).
        </summary>
      <param name="lSendMsg">
            A logical value that indicates if the class should use the SendMessage() function to close the window
            (which works immediately) or the PostMessage() function (which adds the message at the message event queue)
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.AppWindow.ErrorMessage(XSharp.__Usual)">
      <summary>
            Display a message in an error box.
        </summary>
      <param name="oHyperLabel">The hyperlabel object containing the description (HyperLabel:Description) to be displayed in the error box.</param>
      <param name="uText">The description to be displayed in the error box.</param>
    </member>
    <member name="M:VO.AppWindow.OLEDragEnter(XSharp.__Usual)">
      <summary>
            Called whenever the mouse enters the window's client area during a drag and drop operation.
        </summary>
      <param name="oOleDragEvent">The specified OLEDragEvent object.</param>
    </member>
    <member name="M:VO.AppWindow.OLEDragLeave(XSharp.__Usual)">
      <summary>
            Called whenever the mouse leaves the window's client area during a drag and drop operation.
        </summary>
      <param name="oOleDragEvent">The specified OLEDragEvent object.</param>
    </member>
    <member name="M:VO.AppWindow.OLEDragOver(XSharp.__Usual)">
      <summary>
            Called whenever the mouse moves within the window's client area during a drag and drop operation.
        </summary>
      <param name="oOleDragEvent">The specified OLEDragEvent object.</param>
    </member>
    <member name="M:VO.AppWindow.OLEDrop(XSharp.__Usual)">
      <summary>
            Called whenever the mouse is released within the window's client area during a drag and drop operation.
        </summary>
      <param name="oOleDragEvent">The specified OLEDragEvent object.</param>
    </member>
    <member name="M:VO.AppWindow.OLEInPlaceActivate">
      <summary>
            Called whenever a child OLE object is about to be "inplace" activated.
        </summary>
    </member>
    <member name="M:VO.AppWindow.OLEInPlaceDeactivate">
      <summary>
            Called whenever a child OLE object is about to be "inplace" deactivated.
        </summary>
    </member>
    <member name="P:VO.AppWindow.QuitOnClose">
      <summary>
            A logical value. If set to TRUE, quits the application when this (main) window is closed. The default value is FALSE.
        </summary>
      <value>A logical value. If set to TRUE, quits the application when this (main) window is closed. The default value is FALSE.</value>
    </member>
    <member name="M:VO.AppWindow.ReportException(XSharp.__Usual)">
      <summary>This is a compatibility method that is no longer used or needed.</summary>
      <param name="oRQ">The ReportQueue object that reports an exception.</param>
    </member>
    <member name="M:VO.AppWindow.ReportNotification(XSharp.__Usual)">
      <summary>
            Called by ReportQueue when it has a message for the owner window.
        </summary>
      <param name="oRQ">The ReportQueue object to be checked for pending commands.</param>
      <returns>
            TRUE if there are any pending reporting commands waiting to be executed; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.AppWindow.Show(XSharp.__Usual)">
      <summary>
            Display a window.
        </summary>
      <param name="nShowState">The state in which the window area should be displayed.</param>
      <returns>NIL</returns>
    </member>
    <member name="P:VO.AppWindow.StatusBar">
      <summary>
            The status bar currently associated with an application window.
            If none is associated, the status bar of the owner window is returned. If there is no status bar in the ownership hierarchy, NIL is returned.
        </summary>
      <value>
            The status bar currently associated with an application window.
            If none is associated, the status bar of the owner window is returned. If there is no status bar in the ownership hierarchy, NIL is returned.
        </value>
    </member>
    <member name="M:VO.AppWindow.StatusMessage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display a message in an application window's status bar.
        </summary>
      <param name="oHL">The hyperlabel containing a description (HyperLabel:Description) for the status message or the status message as a string.</param>
      <param name="nType">
            The constant value indicating the type and priority of the message to be displayed on the status bar.
            The highest priority message (MESSAGEMENU) always takes precedence over and replaces lower priority messages. See table in the remarks section for more info.
        </param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.AppWindow.WarningMessage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display a message in an warning box.
        </summary>
      <param name="aPlace1">The hyperlabel containing the caption and description (HyperLabel:Caption and HyperLabel:Description) for the warning box, or the caption to be displayed in the warning box.</param>
      <param name="aPlace2">The description to be displayed in the warning box.</param>
      <returns>The return value of the WarningBox:Show() call</returns>
    </member>
    <member name="T:VO.BaseListBox">
      <summary>
            Provide the base class from which all X# list boxes are subclassed.
        </summary>
    </member>
    <member name="M:VO.BaseListBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a list box.
        </summary>
      <param name="oOwner">The window that owns the list box.</param>
      <param name="xID">The unique ID of the list box (between 1 and 8000).</param>
      <param name="oPoint">The origin of the list box in canvas coordinates.</param>
      <param name="oDimension">The dimension of the list box in canvas coordinates.</param>
      <param name="kStyle">The style of the list box, specified as one of the following constants:</param>
      <param name="lDataAware">A logical value specifying whether the list box is data aware.</param>
      <param name="nResourceID">The resource ID of the list box.</param>
    </member>
    <member name="M:VO.BaseListBox.AddItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a new item to a list box at a specified position.
        </summary>
      <param name="cItem">The item to be inserted.</param>
      <param name="nItemNumber">The position in the list box at which to insert the new item. Specify one of the following values:</param>
      <param name="Value">Position</param>
      <param name="0">In an unsorted list box, adds the new item at the end of the list; if sorted, inserts the new item at a position determined by the list box. This is the default.</param>
      <param name="1">The first position in the list box.</param>
      <param name="n">The nth position in the list box.</param>
      <returns>
            If the item was added, its position in the list box is returned (a value of 1 refers to the first position in the list box). If the item could not be added, 0 is returned.
        </returns>
    </member>
    <member name="M:VO.BaseListBox.Clear">
      <summary>
            Clear a list box of all items.
        </summary>
    </member>
    <member name="P:VO.BaseListBox.CurrentItem"></member>
    <member name="P:VO.BaseListBox.CurrentItemNo"></member>
    <member name="P:VO.BaseListBox.CurrentText">
      <summary>
            A string representing the text currently displayed in a text control.  For edit controls, including the edit box associated with simple and drop-down combo boxes, it contains the text currently appearing in the edit box. For fixed icon and group box controls, TextControl:CurrentText contains NULL_STRING.
        </summary>
      <value>A string representing the text currently displayed in a text control.  For edit controls, including the edit box associated with simple and drop-down combo boxes, it contains the text currently appearing in the edit box. For fixed icon and group box controls, TextControl:CurrentText contains NULL_STRING.</value>
    </member>
    <member name="M:VO.BaseListBox.DeleteItem(XSharp.__Usual)">
      <summary>
            Remove an item from a list box.
        </summary>
      <param name="nItemNumber">The number of the item to be deleted. Specify one of the following values:</param>
      <param name="Value">Position</param>
      <param name="0">The currently selected item. This is the default.</param>
      <param name="1">The first item.</param>
      <param name="n">The nth item.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.BaseListBox.Destroy">
      <summary>
            Provide a method to de-instantiate a BaseListBox object.
        </summary>
      <returns>
            NIL
        </returns>
    </member>
    <member name="M:VO.BaseListBox.FindItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Search a list box for a specified string, and return the location of the first item in the list box that matches it.
        </summary>
      <param name="cItem">The text to search for.</param>
      <param name="lWholeItem">
            Indicates how the search is to be performed. TRUE matches an exact <paramref name="cItem" /> string to a 'whole' list box item (for example, a 'can' string does not match 'scan'). FALSE finds a match for any list box prefixed by <paramref name="cItem" /> (for example, the string 'cat' would match 'catalog' in the list box). The default is TRUE.
        </param>
      <param name="nStart">Specifies the one-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues searching from the top of the list box back to the item specified by the nStart parameter. If nStart is 0, the entire list box is searched from the beginning. </param>
      <returns>
            The position of the first item that contains the matching text, if a match is found (a value of 1 refers to the first position in the list box); if no match is found, 0 is returned.
            For example, if <paramref name="cItem" /> matched the fifth string in the list box, the return value would be 5. This means that no earlier string in the list box matched it.
        </returns>
    </member>
    <member name="M:VO.BaseListBox.GetItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve the text of a specified list box item.
        </summary>
      <param name="nItemNumber">
            The number of the desired item. Specify one of the following values:
            <list type="table"><listheader><term>Value</term><description>Position</description></listheader><item><term>0</term><description>The currently selected item.</description></item><item><term>1</term><description>The first item.</description></item><item><term>n</term><description> The nth item.</description></item></list></param>
      <param name="nLength">Optional numeric value that indicates how long the returned string should be.</param>
      <returns>
            The text of the specified item.
        </returns>
    </member>
    <member name="P:VO.BaseListBox.ItemCount">
      <summary>
            A numeric value representing the number of items in the list box.
        </summary>
      <value>A numeric value representing the number of items in the list box.</value>
    </member>
    <member name="M:VO.BaseListBox.SetTop(XSharp.__Usual)">
      <summary>
            Move a specified item to the top of the list box.
        </summary>
      <param name="nItemNumber">The number of the item to be moved. Specify one of the following values:</param>
      <param name="Value">Position</param>
      <param name="0">The currently selected item.</param>
      <param name="1">The first item.</param>
      <param name="n">The nth item.</param>
    </member>
    <member name="T:VO.Bitmap">
      <summary>
            Create a bitmap, which is a bit pattern entity—that is, a two-dimensional array of pixels, each pixel having color attributes (monochrome or color).
        </summary>
    </member>
    <member name="M:VO.Bitmap.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Load a bitmap from the resource entity.
        </summary>
      <param name="xResourceID">The ResourceID object of the bitmap or the numeric resource ID of the bitmap.</param>
      <param name="kLoadOption">The optional constant representing the load option. The default is LR_DEFAULTCOLOR.</param>
      <param name="iWidth">The optional width of the bitmap. The default is the width of the bitmap.</param>
      <param name="iHeight">The optional height of the bitmap. The default is the height of the bitmap.</param>
    </member>
    <member name="M:VO.Bitmap.Destroy">
      <summary>
            Provide a method to de-instantiate a Bitmap object.
        </summary>
      <returns>
            NIL
        </returns>
    </member>
    <member name="M:VO.Bitmap.Handle">
      <summary>
            Return the handle for a bitmap.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="P:VO.Bitmap.Size">
      <summary>
            A Dimension object representing the size of the bitmap.
        </summary>
      <value>A Dimension object representing the size of the bitmap.</value>
    </member>
    <member name="T:VO.BitmapObject">
      <summary>
            Create a Bitmap object; this type of entity is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various objects.
        </summary>
    </member>
    <member name="M:VO.BitmapObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a BitmapObject object.
        </summary>
      <param name="oPoint">The origin of the BitmapObject object, in canvas coordinates.</param>
      <param name="oDimension">The dimension of the BitmapObject object, in canvas coordinates.</param>
      <param name="oBitmap">The bitmap to be used.</param>
    </member>
    <member name="M:VO.BitmapObject.Draw">
      <summary>
            Draw the BitmapObject object on the window.
        </summary>
    </member>
    <member name="T:VO.BoundingBox">
      <summary>
            Create a bounding box, which is a set of four numbers that represent the bottom-left and top-right corners of a rectangle.
        </summary>
    </member>
    <member name="M:VO.BoundingBox.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a bounding box.
        </summary>
      <param name="oPoint">The origin of the bounding box, in canvas coordinates.</param>
      <param name="xPoint">
            The dimension of the bounding box. This may be a <see cref="T:VO.Dimension">Dimension object</see>or a <see cref="T:VO.Dimension">Point object</see>.
        </param>
    </member>
    <member name="P:VO.BoundingBox.Bottom">
      <summary>
            A numeric value representing the Y coordinate of the bottom side of a bounding box, in canvas coordinates.
        </summary>
      <value>A numeric value representing the Y coordinate of the bottom side of a bounding box, in canvas coordinates.</value>
    </member>
    <member name="M:VO.BoundingBox.ConvertToScreen(XSharp.__Usual)">
      <summary>
            Convert a bounding box to screen coordinates for a given window.
        </summary>
      <param name="oWindow">
            The <see cref="T:VO.Window">window object</see>to use for the conversion.
        </param>
      <returns>
            TRUE.
        </returns>
    </member>
    <member name="P:VO.BoundingBox.Height">
      <summary>
            A numeric value representing the height of the bounding box, measured in canvas coordinates.
        </summary>
      <value>A numeric value representing the height of the bounding box, measured in canvas coordinates.</value>
    </member>
    <member name="P:VO.BoundingBox.Left">
      <summary>
            A numeric value representing the X coordinate of the left side of a bounding box, in canvas coordinates.
        </summary>
      <value>A numeric value representing the X coordinate of the left side of a bounding box, in canvas coordinates.</value>
    </member>
    <member name="P:VO.BoundingBox.Origin">
      <summary>
            A point representing the location of a bounding box, in canvas coordinates.
        </summary>
      <value>A point representing the location of a bounding box, in canvas coordinates.</value>
    </member>
    <member name="M:VO.BoundingBox.PointInside(XSharp.__Usual)">
      <summary>
            Test whether a given point is within the bounds of a bounding box.
        </summary>
      <param name="oPoint">The point to be tested.</param>
      <returns>
            TRUE if the point is in the bounding box; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.BoundingBox.Right">
      <summary>
            A numeric value representing the X coordinate of the right side of a bounding box, in canvas coordinates.
        </summary>
      <value>A numeric value representing the X coordinate of the right side of a bounding box, in canvas coordinates.</value>
    </member>
    <member name="P:VO.BoundingBox.Top">
      <summary>
            A numeric value representing the Y coordinate of the top side of a bounding box, in canvas coordinates.
        </summary>
      <value>A numeric value representing the Y coordinate of the top side of a bounding box, in canvas coordinates.</value>
    </member>
    <member name="M:VO.BoundingBox.Union_(XSharp.__Usual)">
      <summary>
            Return a new bounding box that represents the minimum area required to contain both this bounding box and the bounding box specified by <paramref name="oBoundingBox" />.
        </summary>
      <param name="oBB">The bounding box to be joined with this bounding box.</param>
    </member>
    <member name="P:VO.BoundingBox.Width">
      <summary>
            A numeric value representing the width of the bounding box, in canvas coordinates.
        </summary>
      <value>A numeric value representing the width of the bounding box, in canvas coordinates.</value>
    </member>
    <member name="T:VO.Brush">
      <summary>
            Create a brush, which can be used by the Window:PaintBoundingBox() method and the DrawObject hierarchy.
        </summary>
    </member>
    <member name="M:VO.Brush.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a brush.
        </summary>
      <param name="oParent">** missing parameter documentation **</param>
      <param name="xColor">
            The new brush's color object. (Refer to the Color:Init() method for details on specifying a color object.) or
            the standard brush to create, specified as one of constants below.
        </param>
      <param name="kHatchStyle">The new brush's pattern (also called a hatching style or meshed line pattern). Specify one of the constants below.</param>
    </member>
    <member name="M:VO.Brush.Destroy">
      <summary>
            Provide a method to de-instantiate a Brush object.
        </summary>
    </member>
    <member name="M:VO.Brush.Handle">
      <summary>
            Return the handle for a brush.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="P:VO.Brush.Parent"></member>
    <member name="T:VO.Button">
      <summary>
            Provide the base class from which all X# buttons are subclassed.
        </summary>
    </member>
    <member name="M:VO.Button.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a button.
        </summary>
      <param name="oOwner">The window that owns the button.</param>
      <param name="xID">The unique ID of the button (between 1 and 8000).</param>
      <param name="oPoint">The origin of the button in canvas coordinates.</param>
      <param name="oDimension">The dimension of the button in canvas coordinates.</param>
      <param name="cText">The informational text to be printed in the button. By default, it is a NULL_STRING.</param>
      <param name="kStyle">
            The style of the button, specified by a Windows API style constant.
            <note type="tip">Consult your Microsoft Win32 Software Development Kit documentation for detailed information about a particular Windows API style constant.</note></param>
      <param name="lDataAware">A logical value specifying whether the button is data aware. If omitted, defaults to FALSE.</param>
      <param name="nResourceID">The resource ID of the button.</param>
    </member>
    <member name="M:VO.Button.AsString">
      <summary>
            Return an identifying label for the button.
        </summary>
    </member>
    <member name="P:VO.Button.CurrentText">
      <summary>
            For check boxes, push buttons, and radio buttons, Button:CurrentText contains NULL_STRING.
        </summary>
      <value>For check boxes, push buttons, and radio buttons, Button:CurrentText contains NULL_STRING.</value>
    </member>
    <member name="P:VO.Button.Image">
      <summary>
            An image object representing the icon or bitmap image that is displayed on a button.
        </summary>
      <value>An image object representing the icon or bitmap image that is displayed on a button.</value>
    </member>
    <member name="M:VO.Button.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the style for the control.
        </summary>
      <param name="kStyle">The style of the control, specified by a either a X# style constant or a Windows API style constant.</param>
      <param name="lEnable">TRUE enables the specified style; FALSE disables it. If omitted, the default is TRUE.</param>
      <returns>NIL</returns>
    </member>
    <member name="T:VO.ButtonImageList">
      <summary>
            Create an image list for use with buttons.
        </summary>
    </member>
    <member name="M:VO.ButtonImageList.#ctor(XSharp.__Usual)">
      <summary>
            Constructs an image list object that is used by the button class for WinXP support.
        </summary>
      <param name="oImage">The image object to be put into the image list.</param>
    </member>
    <member name="P:VO.ButtonImageList.Image">
      <summary>
            The current image object in the ButtonImageList.
        </summary>
      <value>The current image object in the ButtonImageList.</value>
    </member>
    <member name="T:VO.CheckBox">
      <summary>
            Create check boxes, which are controls that can be toggled on or off by a user (or for 3-state check boxes, to a third state).
        </summary>
    </member>
    <member name="M:VO.CheckBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a check box.
        </summary>
      <param name="oOwner">The window that owns the check box.</param>
      <param name="xID">The unique ID of the check box (between 1 and 8000).</param>
      <param name="oPoint">The origin of the check box in canvas coordinates.</param>
      <param name="oDimension">The dimension of the check box in canvas coordinates.</param>
      <param name="cText">The text to be associated with the check box. If no text is specified, it is inherited from TextControl:TextValue.</param>
      <param name="kStyle">
            Constant representing the style of the check box, specified by a Windows API style constant. The default is BS_AUTOCHECKBOX.
            Consult your Microsoft Win32 Software Development Kit documentation for detailed information about a particular Windows API style constant.
        </param>
      <param name="nResourceID">The resource ID of the check box.</param>
    </member>
    <member name="P:VO.CheckBox.Checked">
      <summary>
            A logical value representing the current state of a check box. It is TRUE if the box is checked (or for 3-state check boxes, if it is in the third UNDETERMINED state), otherwise it is FALSE.  The CheckBox:Checked assign also changes CheckBox:Value and CheckBox:TextValue. Also, if the CheckBox:Value is changed, CheckBox:ValueChanged is set to TRUE.
        </summary>
      <value>A logical value representing the current state of a check box. It is TRUE if the box is checked (or for 3-state check boxes, if it is in the third UNDETERMINED state), otherwise it is FALSE.  The CheckBox:Checked assign also changes CheckBox:Value and CheckBox:TextValue. Also, if the CheckBox:Value is changed, CheckBox:ValueChanged is set to TRUE.</value>
    </member>
    <member name="M:VO.CheckBox.Destroy">
      <summary>
            Provide a method to de-instantiate a CheckBox object.
        </summary>
    </member>
    <member name="P:VO.CheckBox.TextValue">
      <summary>
            CheckBox:TextValue is initialized to FALSE on data windows, since the control contains no text.
        </summary>
      <value>CheckBox:TextValue is initialized to FALSE on data windows, since the control contains no text.</value>
    </member>
    <member name="P:VO.CheckBox.Value">
      <summary>
            CheckBox:Value contains TRUE if the check box is in the checked (ON) state or for 3-state check boxes, in the third UNDETERMINED state. It contains FALSE if it is in the unchecked state (OFF).
        </summary>
      <value>CheckBox:Value contains TRUE if the check box is in the checked (ON) state or for 3-state check boxes, in the third UNDETERMINED state. It contains FALSE if it is in the unchecked state (OFF).</value>
    </member>
    <member name="T:VO.ChildAppWindow">
      <summary>
            Create child application windows.
        </summary>
    </member>
    <member name="M:VO.ChildAppWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a child application window.
        </summary>
      <param name="oOwner">The window that owns the child application window.</param>
      <param name="lManaged">
            Indicates how to manage the child application window. If TRUE, the child window is managed by its owner as an MDI client.
            If FALSE (the default), the child window does not take its default style and menu from the MDI shell. In this case, you must explicitly provide code to control its behavior.
        </param>
      <param name="lImpl">** missing parameter documentation **</param>
    </member>
    <member name="P:VO.ChildAppWindow.ContextMenu">
      <summary>
            A menu object representing the local pop-up menu for a window or window control.
        </summary>
      <value>A menu object representing the local pop-up menu for a window or window control.</value>
    </member>
    <member name="M:VO.ChildAppWindow.Default(XSharp.__Usual)">
      <summary>Call the default windows procedure for a window and set the EventReturnValue for the object.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.ChildAppWindow.Destroy">
      <summary>
            Provide a method to free memory resources allocated for a ChildAppWindow object and its derived objects.
        </summary>
      <returns>
            NIL
        </returns>
    </member>
    <member name="M:VO.ChildAppWindow.EnableBorder(XSharp.__Usual)">
      <summary>
            Set the border style for an application window.
        </summary>
      <param name="kBorderStyle">The display style of the application window's border, specified as one of the following constantsn</param>
    </member>
    <member name="M:VO.ChildAppWindow.EnableHorizontalScroll(XSharp.__Usual)">
      <summary>
            Enable/disable a window horizontal scroll bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the horizontal scroll bar; FALSE disables it. The default is TRUE.</param>
      <returns>
            If the scroll bar is enabled, a WindowHorizontalScrollBar object is returned; if disabled, NULL_OBJECT is returned.
        </returns>
    </member>
    <member name="M:VO.ChildAppWindow.EnableStatusBar(XSharp.__Usual)">
      <summary>
            Enable/disable a status bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the status bar; FALSE disables it. The default is TRUE.</param>
      <returns>
            The status bar object.
        </returns>
    </member>
    <member name="M:VO.ChildAppWindow.EnableVerticalScroll(XSharp.__Usual)">
      <summary>
            Enable/disable a window vertical scroll bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the WindowVerticalScrollBar object; FALSE disables it. The default is TRUE.</param>
      <returns>
            If the scroll bar is enabled, a WindowVerticalScrollBar object is returned; if disabled, NULL_OBJECT is returned.
        </returns>
    </member>
    <member name="P:VO.ChildAppWindow.Menu"></member>
    <member name="M:VO.ChildAppWindow.Show(XSharp.__Usual)">
      <summary>
            Display a window.
        </summary>
      <param name="nShowState">The state in which the window area should be displayed.</param>
      <returns>NIL</returns>
    </member>
    <member name="P:VO.ChildAppWindow.StatusBar">
      <summary>
            The status bar currently associated with an application window.
            If none is associated, the status bar of the owner window is returned. If there is no status bar in the ownership hierarchy, NIL is returned.
        </summary>
      <value>
            The status bar currently associated with an application window.
            If none is associated, the status bar of the owner window is returned. If there is no status bar in the ownership hierarchy, NIL is returned.
        </value>
    </member>
    <member name="P:VO.ChildAppWindow.ToolBar">
      <summary>
            The toolbar in use by the window.
        </summary>
      <value>The toolbar in use by the window.</value>
    </member>
    <member name="T:VO.Clipboard"></member>
    <member name="M:VO.Clipboard.#ctor">
      <summary>
            Construct a clipboard.
        </summary>
    </member>
    <member name="M:VO.Clipboard.Clear">
      <summary>
            Clear the contents of the clipboard.
        </summary>
      <returns>SELF</returns>
    </member>
    <member name="P:VO.Clipboard.FileCount">
      <summary>
            Used to determine how many files were dropped.
        </summary>
      <value>Used to determine how many files were dropped.</value>
    </member>
    <member name="M:VO.Clipboard.GetItemSize(XSharp.__Usual)">
      <summary>
            Retrieve the size of the item in the clipboard, specifying either a string or a bitmap object.
        </summary>
      <param name="kFormat">
            The type of item to retrieve, specified as one of the following constants:
            <list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>BITMAPFORMAT</term><description>The item is a bitmap object.</description></item><item><term>STRINGFORMAT</term><description>The item is a string.</description></item></list></param>
    </member>
    <member name="M:VO.Clipboard.Insert(XSharp.__Usual)">
      <summary>
            Insert text or a bitmap into the clipboard.
        </summary>
      <param name="xType">The text or bitmap to insert in the clipboard.</param>
      <returns>SELF</returns>
    </member>
    <member name="M:VO.Clipboard.InsertRTF(XSharp.__Usual)">
      <summary>
            Insert an RTF string into the clipboard.
        </summary>
      <param name="cText">The RTF text to insert in the clipboard.</param>
      <returns>SELF</returns>
    </member>
    <member name="M:VO.Clipboard.RetrieveBitmap(XSharp.__Usual)">
      <summary>
            Retrieves a Bitmap object from the clipboard.
        </summary>
      <param name="oBitmap">An empty Bitmap object in which the retrieved bitmap is stored.</param>
      <returns>
            TRUE if a Bitmap object is retrieved; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Clipboard.RetrieveFiles(XSharp.__Usual)">
      <summary>
            Retrieves an array of file names.
        </summary>
      <param name="lMustExist">If this is set to TRUE, the file must actually exist to appear in the array.</param>
      <returns>
            An array of file names.
        </returns>
    </member>
    <member name="M:VO.Clipboard.RetrieveRTF(XSharp.__Usual)">
      <summary>
            Retrieve an RTF string from the clipboard.
        </summary>
      <param name="nStringLength">The length of the RTF text to retrieve from the clipboard. If it is left empty or set to 0, the full text is retrieved.</param>
      <returns>
            The RTF string from the clipboard or NULL_STRING, if there is no string in the clipboard.
        </returns>
    </member>
    <member name="M:VO.Clipboard.RetrieveString(XSharp.__Usual)">
      <summary>
            Retrieves a string from the clipboard.
        </summary>
      <param name="nStringLength">
            The length of the string to be retrieved. If <paramref name="nStringLength" /> is zero or not specified, the complete clipboard contents is assumed.
        </param>
      <returns>
            The string from the clipboard or NULL_STRING, if there is no string in the clipboard.
        </returns>
    </member>
    <member name="T:VO.Color">
      <summary>
            Select or create a color, which can be used by a Brush, Pen, or DrawObject object.
        </summary>
    </member>
    <member name="M:VO.Color.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a color using an RGB triplet.
        </summary>
      <param name="nRed">
            The amount of red to be used to create the color. This can be a value between 0 (lowest intensity) and 255 (highest intensity). The default value is 0.
        </param>
      <param name="nGreen">
            The amount of green to be used to create the color. This can be a value between 0 (lowest intensity) and 255 (highest intensity). The default value is 0.
        </param>
      <param name="nBlue">
            The amount of blue to be used to create the color. This can be a value between 0 (lowest intensity) and 255 (highest intensity). The default value is 0.
        </param>
    </member>
    <member name="P:VO.Color.Blue">
      <summary>
            A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of blue in a color.
        </summary>
      <value>A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of blue in a color.</value>
    </member>
    <member name="P:VO.Color.ColorRef">
      <summary>
            A numeric value between 0 and 0xFFFFFF with the combined colors in RGB format.
        </summary>
      <value>A numeric value between 0 and 0xFFFFFF with the combined colors in RGB format.</value>
    </member>
    <member name="P:VO.Color.Green">
      <summary>
            A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of green in a color.
        </summary>
      <value>A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of green in a color.</value>
    </member>
    <member name="P:VO.Color.Red">
      <summary>
            A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of red in a color.
        </summary>
      <value>A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of red in a color.</value>
    </member>
    <member name="T:VO.ComboBox">
      <summary>
            Create a combo box, which is used when you need to provide the user with both a list of choices and an edit control (to optionally allow them to type in their own choice).
        </summary>
    </member>
    <member name="M:VO.ComboBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a combo box.
        </summary>
      <param name="oOwner">The window that owns the combo box.</param>
      <param name="xID">The unique ID of the combo box (between 1 and 8000).</param>
      <param name="oPoint">The origin of the combo box in canvas coordinates.</param>
      <param name="oDimension">The dimension of the combo box in canvas coordinates.</param>
      <param name="kComboType">
            The type of combo box to create, specified as one of the constants that are listed in the remarks section

        </param>
      <param name="kStyle">The style of the combo box, specified as one of the Windows API constants listed below:</param>
      <param name="nResourceID">The resource ID of the combo box.</param>
    </member>
    <member name="P:VO.ComboBox.CurrentText">
      <summary>
            ComboBox:CurrentText contains the text currently appearing in the edit box area of the combo box. The CurrentText assign also changes TextValue and Value. If the assigned CurrentText does not match one of the displayed items, then CurrentItemNo is set to 0. If the assigned value represents a change, then ValueChanged will be set to TRUE.
        </summary>
      <value>ComboBox:CurrentText contains the text currently appearing in the edit box area of the combo box. The CurrentText assign also changes TextValue and Value. If the assigned CurrentText does not match one of the displayed items, then CurrentItemNo is set to 0. If the assigned value represents a change, then ValueChanged will be set to TRUE.</value>
    </member>
    <member name="P:VO.ComboBox.EditHandle">
      <summary>
            The handle to the edit portion of a ComboBox control.
        </summary>
      <value>The handle to the edit portion of a ComboBox control.</value>
    </member>
    <member name="P:VO.ComboBox.EditHeight">
      <summary>
            Integer value specifying the height of the embedded edit control.
        </summary>
      <value>Integer value specifying the height of the embedded edit control.</value>
    </member>
    <member name="M:VO.ComboBox.SetCueBanner(XSharp.__Usual)">
      <summary>
            Add a cue banner to the Edit portion of the ComboBox control.
        </summary>
      <param name="cTitle">The text displayed as the cue.</param>
    </member>
    <member name="T:VO.ComboBoxEx">
      <summary>
            Encapsulate a ComboBoxEx control.
        </summary>
    </member>
    <member name="M:VO.ComboBoxEx.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Instantiate a new ComboBoxEx object.
        </summary>
      <param name="oOwner">The window that owns the extended combo box.</param>
      <param name="xID">The unique ID of the extended combo box (between 1 and 8000).</param>
      <param name="oPoint">The origin of the extended combo box in canvas coordinates.</param>
      <param name="oDimension">The dimension of the extended combo box in canvas coordinates.</param>
      <param name="kComboType">
            The type of extended combo box to create, specified as one of the constants in the table in the remarks section.
        </param>
      <param name="kStyle">The style of the extended combo box, specified as one of the API constants in the remarks section</param>
      <param name="nResourceID">The resource ID of the extended combo box.</param>
    </member>
    <member name="M:VO.ComboBoxEx.AddItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a new item to the ComboBoxEx object.
        </summary>
      <param name="cItem">The item text as string.</param>
      <param name="nItemNumber">The position where to insert the new item. The default placement is at the end of the list (-1). Note that the index into the combo box is zero-based.</param>
      <param name="uRetValue">
            The value associated with the specified item. The default is <paramref name="cItem" />.
        </param>
      <param name="iImageIdx">The index of the image associated with this item.</param>
      <param name="iSelectedIdx">The image index to display when the item is selected.</param>
      <param name="iOverlayIdx">The image index of on overlay image in the image list.</param>
      <param name="iIndent">The indentation level of the item.</param>
      <returns>
            The position of the newly inserted item.
        </returns>
    </member>
    <member name="M:VO.ComboBoxEx.DeleteItem(XSharp.__Usual)">
      <summary>
            Remove an item from the ComboBox object.
        </summary>
      <param name="nItemNumber">The number of the item to be deleted. If omitted, defaults to the current item.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ComboBoxEx.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="P:VO.ComboBoxEx.ImageList">
      <summary>
            The ImageList object containing the images for the items in the ComboBoxEx object.
        </summary>
      <value>The ImageList object containing the images for the items in the ComboBoxEx object.</value>
    </member>
    <member name="P:VO.ComboBoxEx.Length">
      <summary>
            The length of the current text. Overrides the Length property of its parent class to provide the same functionality in this specialized class.
        </summary>
      <value>The length of the current text. Overrides the Length property of its parent class to provide the same functionality in this specialized class.</value>
    </member>
    <member name="T:VO.ComboBoxExEndEditEvent">
      <summary>
            Provide information about a ComboBoxEx EndEdit event
        </summary>
    </member>
    <member name="M:VO.ComboBoxExEndEditEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="T:VO.ComboBoxExItem">
      <summary>
            This class contains all properties of a ComboBoxEx item.
            It is used with the ComboBoxEx methods
            ComboBoxEx:SetItemAttributes()
            ComboBoxEx:GetItemAttributes()
            ComboBoxEx:InsertItem()
        </summary>
    </member>
    <member name="M:VO.ComboBoxExItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Instantiate a new ComboBoxExItem object.
        </summary>
      <param name="cItem">The item text as string.</param>
      <param name="nItemNumber">The position where to insert the new item. The default placement is at the end of the list (-1). Note that the index into the combo box is zero-based.</param>
      <param name="uRetValue">
            The value associated with the specified item. The default is <paramref name="cItem" />.
        </param>
      <param name="iImageIdx">The index of the image associated with this item.</param>
      <param name="iSelectedIdx">The image index to display when the item is selected.</param>
      <param name="iOverlayIdx">The image index of on overlay image in the image list.</param>
      <param name="iIndent">The indentation level of the item.</param>
    </member>
    <member name="F:VO.ComboBoxExItem.ImageIndex"></member>
    <member name="F:VO.ComboBoxExItem.Indent"></member>
    <member name="F:VO.ComboBoxExItem.ItemIndex"></member>
    <member name="F:VO.ComboBoxExItem.OverlayImageIndex"></member>
    <member name="F:VO.ComboBoxExItem.SelectedImageIndex"></member>
    <member name="F:VO.ComboBoxExItem.TextValue"></member>
    <member name="F:VO.ComboBoxExItem.Value"></member>
    <member name="T:VO.Control">
      <summary>
            Provide the base class from which all X# controls are subclassed.
        </summary>
    </member>
    <member name="M:VO.Control.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a control.
        </summary>
      <param name="oOwner">The window that owns the control.</param>
      <param name="xID">The unique ID of the control (between 1 and 8000).</param>
      <param name="oPoint">The origin of the control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the control in canvas coordinates.</param>
      <param name="cRegClass">String representing the control class (for example, 'Edit', 'ListBox', etc.)</param>
      <param name="kStyle">
            Constant representing the style of the control, specified either by a X# style constant or a Windows API style constant.
            Styles can be combined using the _Or() operator.
        </param>
      <param name="lDataAware">Logical value indicating whether the control is data-aware (TRUE) or not (FALSE). The default is FALSE.</param>
      <param name="nResourceID">The resource ID of the control.</param>
    </member>
    <member name="M:VO.Control.Activate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and a window is activated.<br /><br /></summary>
      <param name="oEvent">The event that describes which window was activated.</param>
    </member>
    <member name="M:VO.Control.AsString">
      <summary>
            Return the contents of the control (or its identifying label).
        </summary>
    </member>
    <member name="P:VO.Control.Background">
      <summary>
            The brush used for painting the background of the control. For example, in a single line edit control, the background is the color behind the text in the edit control.
        </summary>
      <value>The brush used for painting the background of the control. For example, in a single line edit control, the background is the color behind the text in the edit control.</value>
    </member>
    <member name="P:VO.Control.Caption">
      <summary>
            A string representing the caption of the control (i.e., the static text identifying the control)
        </summary>
      <value>A string representing the caption of the control (i.e., the static text identifying the control)</value>
    </member>
    <member name="P:VO.Control.ContextMenu">
      <summary>
            A menu object representing the local pop-up menu for a control.
        </summary>
      <value>A menu object representing the local pop-up menu for a control.</value>
    </member>
    <member name="P:VO.Control.ControlID">
      <summary>
            A number between 1 and 8000 representing the unique ID of a control
        </summary>
      <value>A number between 1 and 8000 representing the unique ID of a control</value>
    </member>
    <member name="M:VO.Control.Create">
      <summary>
            Creates the underlying Win32 control
        </summary>
    </member>
    <member name="M:VO.Control.Deactivate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and a window is deactivated.<br /><br /></summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
    </member>
    <member name="M:VO.Control.DEFAULT(XSharp.__Usual)">
      <summary>Call the default windows procedure for a control and set the EventReturnValue.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>Nothing</returns>
    </member>
    <member name="M:VO.Control.Destroy">
      <summary>
            Provide a method to de-instantiate any Control object.
        </summary>
    </member>
    <member name="M:VO.Control.Disable">
      <summary>
            Disable a control (until a subsequent call to Control:Enable()).
        </summary>
    </member>
    <member name="M:VO.Control.DisableTheme">
      <summary>
            Disable the WinXP theme for a control.
        </summary>
    </member>
    <member name="M:VO.Control.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="M:VO.Control.Enable">
      <summary>
            Enable a control that was previously disabled.
        </summary>
    </member>
    <member name="F:VO.Control.EventReturnValue"></member>
    <member name="M:VO.Control.Expose(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and whenever part of the window needs repainting.<br /><br /></summary>
      <param name="oExposeEvent">The ExposeEvent object that describes which control of the window needs repainting.</param>
    </member>
    <member name="P:VO.Control.FieldSpec">
      <summary>
            The field specification connected to the control.
        </summary>
      <value>The field specification connected to the control.</value>
    </member>
    <member name="M:VO.Control.FocusChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and the input focus changes from the current control to another (or vice versa).<br /><br /></summary>
      <param name="oFocusChangeEvent">The FocusChangeEvent object that identifies whether the focus is being gained or lost.</param>
    </member>
    <member name="M:VO.Control.GetExStyle">
      <summary>
            Retrieve the Ex styles for the control.
        </summary>
      <returns>
            Numeric value representing the X# style constants or Windows API style constants enabled for the window.
        </returns>
    </member>
    <member name="M:VO.Control.GetStyle">
      <summary>
            Retrieve the styles for the control.
        </summary>
      <returns>
            Numeric value representing the X# style constants or Windows API style constants enabled for the window.
        </returns>
    </member>
    <member name="M:VO.Control.Handle(XSharp.__Usual)">
      <summary>
            Return the handle for a control.
        </summary>
      <param name="uType">
            The type of handle required. Zero (0) is the only supported option, and it is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle to the "window" (control), describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.Control.HasBorder">
      <summary>Check if a border  has been set for the control</summary>
      <returns>TRUE when the border is set. Otherwise FALSE.</returns>
    </member>
    <member name="M:VO.Control.HasStyle(System.Int32)">
      <summary>Check if a style value has been set for the control</summary>
      <param name="kStyle">The style to check for</param>
      <returns>TRUE when the style is set. Otherwise FALSE.</returns>
    </member>
    <member name="M:VO.Control.Hide">
      <summary>
            Hide a control so it is not visible (until a subsequent call to Control:Show()).
        </summary>
    </member>
    <member name="M:VO.Control.HorizontalScroll(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and a horizontal scroll bar is scrolled.<br /><br /></summary>
      <param name="oScrollEvent">The ScrollEvent object that describes the scroll type and new position.</param>
    </member>
    <member name="P:VO.Control.HyperLabel">
      <summary>
            The hyperlabel connected to the control.
        </summary>
      <value>The hyperlabel connected to the control.</value>
    </member>
    <member name="M:VO.Control.IsEnabled">
      <summary>
            Report if this control is currently enabled.
        </summary>
      <returns>
            TRUE if the control is enabled; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Control.IsExStyle(System.Int32)">
      <summary>Check if a exstyle value has been set for the control</summary>
      <param name="nStyle">The exstyle to check for</param>
      <returns>TRUE when the exstyle is set. Otherwise FALSE.</returns>
    </member>
    <member name="M:VO.Control.IsReadOnly">
      <summary>
            Report if this control is currently readonly.
        </summary>
      <returns>
            TRUE if the control is readonly; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Control.IsStyle(System.Int32)">
      <summary>Check if a style value has been set for the control</summary>
      <param name="nStyle">The style to check for</param>
      <returns>TRUE when the style is set. Otherwise FALSE.</returns>
    </member>
    <member name="M:VO.Control.IsVisible">
      <summary>
            Report if this control is visible (completely or partially) or hidden.
        </summary>
      <returns>
            TRUE if the control is visible; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Control.KeyDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and a key on the keyboard is pressed.<br /><br /></summary>
      <param name="oKeyEvent">The KeyEvent object that describes what key was pressed.</param>
    </member>
    <member name="M:VO.Control.KeyUp(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and a key on the keyboard is released.<br /><br /></summary>
      <param name="oKeyEvent">The KeyEvent object that describes what key was released.</param>
    </member>
    <member name="M:VO.Control.LinkDF(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Connect a control to a data field in a data server.
        </summary>
      <param name="oDS">The server that the field is to be linked to. Ordinarily, this is the common server that the entire window is linked to, but it is possible to link individual fields to other servers. </param>
      <param name="siDF">The number of the data field within the server.</param>
    </member>
    <member name="M:VO.Control.MenuInit(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a pop-up menu owned by the control is about to pop up.
        </summary>
      <param name="oMenuInitEvent">The MenuInitEvent object that describes which menu is about to pop up.</param>
    </member>
    <member name="M:VO.Control.MenuSelect(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item on a menu owned by the control is highlighted.
        </summary>
      <param name="oMenuSelectEvent">The MenuSelectEvent object that describes which menu and menu command (via the item's ID) generated the event.</param>
    </member>
    <member name="P:VO.Control.Modified">
      <summary>
            A logical value that is set to TRUE when a standard edit control or editable combo box is in the process of being modified.
        </summary>
      <value>A logical value that is set to TRUE when a standard edit control or editable combo box is in the process of being modified.</value>
    </member>
    <member name="M:VO.Control.MouseButtonDoubleClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus, the mouse pointer is positioned over the window, and a mouse button is double-clicked.<br /><br /></summary>
      <param name="oMouseEvent">The MouseEvent object that contains information about the state of the mouse when the button was double-clicked.</param>
    </member>
    <member name="M:VO.Control.MouseButtonDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus, the mouse pointer is positioned over the window, and a mouse button is clicked.<br /><br /></summary>
      <param name="oMouseEvent">The MouseEvent object that contains information about the state of the mouse when the button was clicked.</param>
    </member>
    <member name="M:VO.Control.MouseButtonUp(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus, the mouse pointer is positioned over the window, and a mouse button is released.
        </summary>
      <param name="oMouseEvent">The MouseEvent object that contains information about the state of the mouse when the button was released.</param>
    </member>
    <member name="M:VO.Control.MouseDrag(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and a mouse with one or more buttons clicked is moved in the window.
        </summary>
      <param name="oMouseEvent">The MouseEvent object containing information on the location and state of the buttons when the mouse was dragged.</param>
    </member>
    <member name="M:VO.Control.MouseMove(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and the mouse is moved in the control.
        </summary>
      <param name="oMouseEvent">The MouseEvent object containing information on the location of the mouse when it was moved.</param>
    </member>
    <member name="M:VO.Control.Move(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and the control is moved (either by the user or by the application).
        </summary>
      <param name="oMoveEvent">The MoveEvent object that describes the window movement.</param>
    </member>
    <member name="P:VO.Control.Name">
      <summary>
            A string representing the name of the control.
        </summary>
      <value>A string representing the name of the control.</value>
    </member>
    <member name="P:VO.Control.NameSym">
      <summary>
            A symbol representing the name of the control.
        </summary>
      <value>A symbol representing the name of the control.</value>
    </member>
    <member name="P:VO.Control.Origin">
      <summary>
            A point representing the location of a control on its owner window, in canvas coordinates.
        </summary>
      <value>A point representing the location of a control on its owner window, in canvas coordinates.</value>
    </member>
    <member name="M:VO.Control.OverRide(XSharp.__Usual)">
      <summary>This is a compatibility method that is no longer used or needed.</summary>
      <param name="lEnable" />
    </member>
    <member name="P:VO.Control.Owner">
      <summary>
            The owner window of a control.
        </summary>
      <value>The owner window of a control.</value>
    </member>
    <member name="P:VO.Control.OwnerAlignment">
      <summary>
            Constant representing how the window will be aligned within its owner window.

        </summary>
      <value>Constant representing how the window will be aligned within its owner window.</value>
    </member>
    <member name="M:VO.Control.PerformValidations">
      <summary>
            Perform all the validations defined to this control's field specification (for example, required, maximum and minimum digits, maximum and minimum value, validation rule) and return the result of the test.
        </summary>
      <returns>
            If any of the validations fail, this method sets the status of the control appropriately and returns FALSE. Otherwise, it returns TRUE.
        </returns>
    </member>
    <member name="P:VO.Control.ReadOnly">
      <summary>
            Is the control readonly ?
        </summary>
    </member>
    <member name="M:VO.Control.RegisterTimer(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Register a timer method to be invoked for the control.
        </summary>
      <param name="nInterval">Time interval, in seconds, between calls to the Timer() method of the control.</param>
      <param name="lOneTime">
            Logical value indicating if the timer is called just once (TRUE), or multiple times (FALSE).
            If omitted, the default is FALSE.
        </param>
    </member>
    <member name="M:VO.Control.RePaint">
      <summary>
            Send an ExposeEvent to repaint the control
        </summary>
    </member>
    <member name="M:VO.Control.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and the control changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the control.</param>
    </member>
    <member name="M:VO.Control.RestoreUpdate">
      <summary>
            Resume all drawing updates for a control (after Control:SuspendUpdate() is called).
        </summary>
    </member>
    <member name="P:VO.Control.Server">
      <summary>
            The server object that currently connected to this control. If no server is connected, the value is NIL.
        </summary>
      <value>The server object that currently connected to this control. If no server is connected, the value is NIL.</value>
    </member>
    <member name="M:VO.Control.SetExStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the exstyle for the control.
        </summary>
      <param name="kExStyle">The exstyle of the control, specified by a either a X# style constant or a Windows API style constant.</param>
      <param name="lEnable">TRUE enables the specified style; FALSE disables it. If omitted, the default is TRUE.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Control.SetFocus">
      <summary>
            Pass input focus to a control, thereby directing all mouse and keyboard input to the control.
        </summary>
    </member>
    <member name="M:VO.Control.SetParent(System.Void*)">
      <summary>
            Change the parent handle for the control.
        </summary>
      <param name="hWndNewParent">The new parent handle for the control.</param>
    </member>
    <member name="M:VO.Control.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the style for the control.
        </summary>
      <param name="kStyle">The style of the control, specified by a either a X# style constant or a Windows API style constant.</param>
      <param name="lEnable">TRUE enables the specified style; FALSE disables it. If omitted, the default is TRUE.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Control.Show">
      <summary>
            Display a control so it is visible.
        </summary>
    </member>
    <member name="P:VO.Control.Size">
      <summary>
            A dimension representing the size of a control.
        </summary>
      <value>A dimension representing the size of a control.</value>
    </member>
    <member name="P:VO.Control.Status">
      <summary>
            A hyperlabel indicating the status of the control after a validation attempt or other action.
        </summary>
      <value>A hyperlabel indicating the status of the control after a validation attempt or other action.</value>
    </member>
    <member name="M:VO.Control.SuspendUpdate">
      <summary>
            Temporarily suspend all drawing updates for a control; drawing resumes with a call to Control:RestoreUpdate().
        </summary>
    </member>
    <member name="P:VO.Control.TextValue">
      <summary>
            A string representing the value held in the control.
        </summary>
      <value>A string representing the value held in the control.</value>
    </member>
    <member name="M:VO.Control.Timer">
      <summary>
            Provide a method to be invoked at specific intervals defined when the timer is registered though the RegisterTimer() method.
        </summary>
    </member>
    <member name="P:VO.Control.ToolTipText">
      <summary>
            String value representing the tooltip text used when the user moves the mouse pointer over the control.
        </summary>
      <value>String value representing the tooltip text used when the user moves the mouse pointer over the control.</value>
    </member>
    <member name="P:VO.Control.UseHLForToolTip">
      <summary>
            Logical value determining whether the descriptive text of a control's Hyperlabel should be used as the tooltip text.
        </summary>
      <value>Logical value determining whether the descriptive text of a control's Hyperlabel should be used as the tooltip text.</value>
    </member>
    <member name="M:VO.Control.ValidateControl">
      <summary>This method validates if the control has been created and when not then it triggers the control creation</summary>
      <returns>TRUE when the controls was succesfully created. Otherwise FALSE.</returns>
    </member>
    <member name="P:VO.Control.Value">
      <summary>
            The value held in the control, in whatever data type the control holds.
        </summary>
      <value>The value held in the control, in whatever data type the control holds.</value>
    </member>
    <member name="P:VO.Control.ValueChanged">
      <summary>
            A logical value representing whether the control's Value has been changed from its prior setting.
        </summary>
      <value>A logical value representing whether the control's Value has been changed from its prior setting.</value>
    </member>
    <member name="M:VO.Control.VerticalScroll(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and a vertical scroll bar is scrolled.
        </summary>
      <param name="oScrollEvent">The ScrollEvent object that describes the scroll type and new position.</param>
    </member>
    <member name="T:VO.ControlEvent">
      <summary>
            Provide information about a control that generated a control event.
        </summary>
    </member>
    <member name="M:VO.ControlEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ControlEvent.Control">
      <summary>
            The control that generated this control event.
        </summary>
      <value>The control that generated this control event.</value>
    </member>
    <member name="P:VO.ControlEvent.ControlID">
      <summary>
            A number between 1 and 8000 representing the unique ID of the control that generated this control event.
        </summary>
      <value>A number between 1 and 8000 representing the unique ID of the control that generated this control event.</value>
    </member>
    <member name="P:VO.ControlEvent.Description">
      <summary>
            A string representing the description of the control that generated this control event.
        </summary>
      <value>A string representing the description of the control that generated this control event.</value>
    </member>
    <member name="P:VO.ControlEvent.HelpContext">
      <summary>
            A string representing the help context ID of the control that generated this control event.
        </summary>
      <value>A string representing the help context ID of the control that generated this control event.</value>
    </member>
    <member name="P:VO.ControlEvent.HyperLabel">
      <summary>
            The hyperlabel connected to the control event.
        </summary>
      <value>The hyperlabel connected to the control event.</value>
    </member>
    <member name="P:VO.ControlEvent.Name">
      <summary>
            A string representing the name of the control that generated the event.
        </summary>
      <value>A string representing the name of the control that generated the event.</value>
    </member>
    <member name="P:VO.ControlEvent.NameSym">
      <summary>
            A symbol representing the name of the control that generated the event.
        </summary>
      <value>A symbol representing the name of the control that generated the event.</value>
    </member>
    <member name="T:VO.ControlFocusChangeEvent">
      <summary>
            Provide information about an ControlFocusChangeEvent, generated when a control gains or loses the keyboard focus.
        </summary>
    </member>
    <member name="M:VO.ControlFocusChangeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ControlFocusChangeEvent.Control">
      <summary>
            The control that generated this control event.
        </summary>
      <value>The control that generated this control event.</value>
    </member>
    <member name="T:VO.ControlNotifyEvent">
      <summary>
            Provide information about a control notification event, which is generated when a control is required to notify its parent window of an event.
        </summary>
    </member>
    <member name="M:VO.ControlNotifyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ControlNotifyEvent.Control">
      <summary>
            The Control object that generated this event.
        </summary>
      <value>The Control object that generated this event.</value>
    </member>
    <member name="P:VO.ControlNotifyEvent.NotifyCode">
      <summary>
            The notification code for this event as defined by the Windows API.
        </summary>
      <value>The notification code for this event as defined by the Windows API.</value>
    </member>
    <member name="T:VO.ControlWindow">
      <summary>
            Create a control as part of the Window hierarchy, thereby allowing the behavior of the control to be customized using event handlers.
        </summary>
    </member>
    <member name="M:VO.ControlWindow.#ctor(XSharp.__Usual)">
      <summary>
            Construct a control window from an existing control.
        </summary>
      <param name="oControl">The control that should be used to initialize the control window. It should be an instance of any subclass of Control.</param>
    </member>
    <member name="P:VO.ControlWindow.Control">
      <summary>
            The control on which the control window is based.
        </summary>
      <value>The control on which the control window is based.</value>
    </member>
    <member name="P:VO.ControlWindow.ControlID">
      <summary>
            A number between 1 and 8000 representing the unique ID of the control on which the control window is based.
        </summary>
      <value>A number between 1 and 8000 representing the unique ID of the control on which the control window is based.</value>
    </member>
    <member name="M:VO.ControlWindow.Default(XSharp.__Usual)">
      <summary>Call the default windows procedure for a window and set the EventReturnValue for the object.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.ControlWindow.Destroy">
      <summary>
            Free memory resources allocated for a ControlWindow object and its derived objects.
        </summary>
    </member>
    <member name="M:VO.ControlWindow.Disable">
      <summary>
            Disable a control window, including its associated control (until a subsequent call to ControlWindow:Enable()).
        </summary>
    </member>
    <member name="M:VO.ControlWindow.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the dispatcher for events within the system when the window has focus;
            routing various events to their appropriate event handlers.
        </summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event. This is usually the value of the EventReturnValue field.
        </returns>
    </member>
    <member name="M:VO.ControlWindow.Enable">
      <summary>
            Enable a control window that was previously disabled.
        </summary>
    </member>
    <member name="M:VO.ControlWindow.Hide">
      <summary>
            Hide a control window and its associated control so it is not visible (until a subsequent call to ControlWindow:Show()).
        </summary>
    </member>
    <member name="P:VO.ControlWindow.HyperLabel">
      <summary>
            The hyperlabel connected to the control on which the control window is based.
        </summary>
      <value>The hyperlabel connected to the control on which the control window is based.</value>
    </member>
    <member name="P:VO.ControlWindow.Modified">
      <summary>
            A logical value indicating whether the control on which the control window is based has been changed by the user since it was last set.
        </summary>
      <value>A logical value indicating whether the control on which the control window is based has been changed by the user since it was last set.</value>
    </member>
    <member name="P:VO.ControlWindow.Origin">
      <summary>
            A point representing the position of a control window on its owner window, in canvas coordinates.
        </summary>
      <value>A point representing the position of a control window on its owner window, in canvas coordinates.</value>
    </member>
    <member name="M:VO.ControlWindow.Override">
      <summary>This is a compatibility method that is no longer used or needed.</summary>
    </member>
    <member name="M:VO.ControlWindow.SetFocus">
      <summary>
            Pass input focus to a control window, thereby directing all mouse and keyboard input to its associated control.
        </summary>
    </member>
    <member name="P:VO.ControlWindow.Size">
      <summary>
            A dimension representing the size of a control window.
        </summary>
      <value>A dimension representing the size of a control window.</value>
    </member>
    <member name="T:VO.Cursor">
      <summary>
            Create a text cursor, which is used to visually represent the position in a window where the next piece of text appears.
        </summary>
    </member>
    <member name="M:VO.Cursor.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a cursor.
        </summary>
      <param name="oOwner">The window that owns the cursor.</param>
      <param name="oObject">Either the dimension of the cursor, in canvas coordinates, or the bitmap used to depict the cursor.</param>
      <param name="lDimmed">TRUE creates the cursor as semi-transparent (dim); FALSE creates the cursor as black. The default is TRUE.</param>
    </member>
    <member name="M:VO.Cursor.Destroy">
      <summary>
            Provide a method to de-instantiate a Cursor object.
        </summary>
    </member>
    <member name="M:VO.Cursor.Handle(XSharp.__Usual)">
      <summary>
            Return the handle for a cursor.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.Cursor.Hide">
      <summary>
            Hide a cursor so it is not visible (until a subsequent call to Cursor:Show()).
        </summary>
    </member>
    <member name="P:VO.Cursor.Position">
      <summary>
            A point—in owner window canvas coordinates—representing the current position of the cursor.
        </summary>
      <value>A point—in owner window canvas coordinates—representing the current position of the cursor.</value>
    </member>
    <member name="M:VO.Cursor.Show">
      <summary>
            Display a cursor so it is visible.
        </summary>
    </member>
    <member name="T:VO.CustomControl">
      <summary>
            Provide a base custom control class from which to derive specialized custom controls.
        </summary>
    </member>
    <member name="M:VO.CustomControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a custom control.
        </summary>
      <param name="oOwner">The window that owns the custom control.</param>
      <param name="xID">The unique ID of the custom control (between 1 and 8000).</param>
      <param name="oPoint">The origin of the custom control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the custom control in canvas coordinates.</param>
      <param name="kStyle">Constant representing the style of the custom control, specified either by a X# style constant or a Windows API style constant. Styles can be combined using the _Or() operator.</param>
      <param name="lDataAware">Logical value indicating whether the custom control is data-aware (TRUE) or not (FALSE). The default is FALSE.</param>
      <param name="nResourceID">The resource ID of the custom control.</param>
    </member>
    <member name="T:VO.DataBrowser">
      <summary>
            Create a data browser, which is a spreadsheet-like table for displaying information from a data server.
        </summary>
    </member>
    <member name="M:VO.DataBrowser.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a data browser.
        </summary>
      <param name="oOwner">The window that owns the data browser.</param>
      <param name="xID">The unique ID of the data browser (between 1 and 8000).</param>
      <param name="oPoint">The origin of the data browser in canvas coordinates. If not specified, (0,0) is used.</param>
      <param name="oDimension">
            The dimension of the data browser in canvas coordinates. If not specified, the size of <paramref name="oOwner" /> is used.
        </param>
      <param name="nResourceID">The resource ID of the data browser.</param>
    </member>
    <member name="M:VO.DataBrowser.AddColumn(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add one or more columns to a data browser.
        </summary>
      <param name="oGColumn">The data column to be added or the array of data columns to be added.</param>
      <param name="nIndex">The column after which the new column or columns will be inserted. This value can be a string or symbol representing the name of the column, a number representing its column number, or an oDataColumn object identifying the column. If you specify a number, you should note that column numbering begins at 1 (which refers to the first column in the logical sequence, not necessarily the leftmost column from the visual viewpoint). If omitted, new columns are added after the last column.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.AsString">
      <summary>
            Return an identifying label for the data browser.
        </summary>
    </member>
    <member name="P:VO.DataBrowser.Background">
      <summary>
            The brush used for painting the background of this data browser.
        </summary>
      <value>The brush used for painting the background of this data browser.</value>
    </member>
    <member name="M:VO.DataBrowser.CanUndo">
      <summary>
            Determine if the most recent changes to a data browser column can be undone (using DataBrowser:Undo()).
        </summary>
      <returns>
            TRUE if the operation can be undone; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DataBrowser.Caption">
      <summary>
            A string representing the caption of the data browser for use in its title bar.
        </summary>
      <value>A string representing the caption of the data browser for use in its title bar.</value>
    </member>
    <member name="P:VO.DataBrowser.CellEdit">
      <summary>
            Returns the edit control for the current cell when the DataBrowser is in edit mode. Otherwise a NULL_OBJECT is returned.
        </summary>
      <value>The edit control for the current cell when the DataBrowser is in edit mode. Otherwise a NULL_OBJECT is returned.</value>
    </member>
    <member name="M:VO.DataBrowser.ChangeBackground(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a new background brush for this data browser.
        </summary>
      <param name="oBrush">The new background brush to be used.</param>
      <param name="kWhere">
            Indicates what part of the browser should be repainted, specified as one of the following constants:
        </param>
    </member>
    <member name="M:VO.DataBrowser.ChangeFont(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a new font in a particular area of the data browser.
        </summary>
      <param name="oFont">The new font to be used.</param>
      <param name="kWhere">
            Indicates what part of the browser should be changed, specified as one of the following constants:
            <span><list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>GBLCOLCAPTION</term><description>The column caption area.</description></item><item><term>GBLHITEXT</term><description>Highlighted (selected) text in the data area.</description></item><item><term>GBLTEXT</term><description>Text in the data display area. This is the default.</description></item></list></span></param>
      <returns>
            The font previously assigned to the changed area.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.ChangeTextColor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a new pen in a particular area of the data browser.
        </summary>
      <param name="oColor">The new color to be used.</param>
      <param name="kColor">The standard color to be used, specified as one of the following constants in the table below</param>
      <param name="kWhere">Indicates what part of the browser should be changed, specified as one of constants in the table below</param>
      <returns>
            The pen previously assigned to the changed area.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.Clear">
      <summary>
            If one or more cells in the data browser are selected, clear their contents; if only some characters in a cell are selected, remove only those characters.
        </summary>
    </member>
    <member name="M:VO.DataBrowser.ColPos">
      <summary>
            Return the position of the currently focused column.
        </summary>
    </member>
    <member name="P:VO.DataBrowser.ColumnCount">
      <summary>
            A numeric value indicating the number of columns in the data browser.
        </summary>
      <value>A numeric value indicating the number of columns in the data browser.</value>
    </member>
    <member name="M:VO.DataBrowser.ColumnFocusChange(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the column focus is changed.

        </summary>
      <param name="oDataColumn">The column that is gaining or losing focus.</param>
      <param name="lHasFocus">TRUE indicates the column is gaining focus; FALSE indicates the column is losing focus.</param>
    </member>
    <member name="M:VO.DataBrowser.ColumnMoved(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a column is moved.

        </summary>
      <param name="oColumn">The column which was moved.</param>
    </member>
    <member name="M:VO.DataBrowser.ColumnReSize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a column is resized.

        </summary>
      <param name="oColumn">The column which was resized.</param>
    </member>
    <member name="M:VO.DataBrowser.Copy">
      <summary>
            Copy the current selection in the data browser to the clipboard.
        </summary>
    </member>
    <member name="P:VO.DataBrowser.CurrentColumn">
      <summary>
            The current data column in the data browser (i.e., the one that contains the cursor).
        </summary>
      <value>The current data column in the data browser (i.e., the one that contains the cursor).</value>
    </member>
    <member name="M:VO.DataBrowser.Cut">
      <summary>
            Cut the current selection in the data browser to the clipboard.
        </summary>
    </member>
    <member name="M:VO.DataBrowser.DEFAULT(XSharp.__Usual)">
      <summary>Call the default windows procedure for a control and set the EventReturnValue.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>Nothing</returns>
    </member>
    <member name="M:VO.DataBrowser.Destroy">
      <summary>
            Provide a method to de-instantiate a DataBrowser object.
        </summary>
    </member>
    <member name="M:VO.DataBrowser.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="P:VO.DataBrowser.EditFont">
      <summary>
            Returns the edit font for the DataBrowser. This font can be changed with the ChangeFont() method.
        </summary>
      <value>The edit font for the DataBrowser. This font can be changed with the ChangeFont() method.</value>
    </member>
    <member name="M:VO.DataBrowser.EnableBorder(XSharp.__Usual)">
      <summary>
            Specify the border style of the data browser.
        </summary>
      <param name="kBorderType">
            The display style of the data browser window's border, specified as one of the constants in the table below
        </param>
    </member>
    <member name="M:VO.DataBrowser.EnableColumnMove(XSharp.__Usual)">
      <summary>
            Enable/disable whether the user can move (rearrange) columns in the data browser with the mouse. If this method is not called, the ability to move columns is enabled, by default.
        </summary>
      <param name="lAllowMove">TRUE allows column movement; FALSE disables it. The default is TRUE.</param>
    </member>
    <member name="M:VO.DataBrowser.EnableColumnReSize(XSharp.__Usual)">
      <summary>
            Enable/disable whether the user can resize columns in the data browser with the mouse. If this method is not called, the ability to resize columns is enabled, by default.
        </summary>
      <param name="lAllowResize">TRUE allows column resizing; FALSE disables it. The default is TRUE.</param>
    </member>
    <member name="M:VO.DataBrowser.EnableColumnTitles(XSharp.__Usual)">
      <summary>
            Turn column titles on or off for the entire browser.
        </summary>
      <param name="lEnable">TRUE shows column titles; FALSE hides them. The default is TRUE. </param>
      <returns>
            A logical value indicating whether or not the operation was successful.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.EnableGrid(XSharp.__Usual)">
      <summary>
            Enable/disable the display of a grid. If this method is not called, the grid is enabled, by default.
        </summary>
      <param name="lShowGrid">TRUE shows the grid; FALSE hides it. The default is TRUE.</param>
    </member>
    <member name="M:VO.DataBrowser.EnableHorizontalScroll(XSharp.__Usual)">
      <summary>
            Enable/disable horizontal scrolling of a data browser. If this method is not called, horizontal scrolling is enabled, by default.
        </summary>
      <param name="lAllowScroll">TRUE allows scrolling by displaying a horizontal scroll bar along the bottom edge of the data browser; FALSE disables the scroll bar. The default is TRUE.</param>
    </member>
    <member name="M:VO.DataBrowser.EnableHorizontalSplit(XSharp.__Usual)">
      <summary>
            Enable/disable a horizontal splitbar in the data browser.
        </summary>
      <param name="lShowSplit">
            TRUE enables (and shows) the splitbar; FALSE disables (and hides) it. The default is TRUE.
            If this method is not called for a data browser, FALSE is the default.
        </param>
    </member>
    <member name="M:VO.DataBrowser.EnableVerticalScroll(XSharp.__Usual)">
      <summary>
            Enable/disable vertical scrolling of a data browser. If this method is not called, vertical scrolling is enabled, by default.
        </summary>
      <param name="lAllowScroll">TRUE allows scrolling by displaying a vertical scroll bar along the right edge of the data browser; FALSE disables the scroll bar. The default is TRUE.</param>
    </member>
    <member name="M:VO.DataBrowser.EnableVerticalSplit(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Enable/disable a vertical splitbar in the data browser.
        </summary>
      <param name="lShowSplit">
            TRUE enables (and shows) the splitbar; FALSE disables (and hides) it. The default is TRUE.
            If this method is not called for a data browser, FALSE is the default.
        </param>
      <param name="nMode">
            Initial splitbar positioning, specified as one of the following constants:
            <span><list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>GBSSBLEFT</term><description>Places the splitbar at the left-edge of the browser.</description></item><item><term>GBSSBMIDDLE</term><description>Places the splitbar in the middle of the browser.</description></item><item><term>GBSSBRIGHT</term><description>Places the splitbar at the right-edge of the browser.</description></item></list></span>
            If not specified, the initial splitbar position defaults to GBSSBMIDDLE.
        </param>
    </member>
    <member name="M:VO.DataBrowser.Error(XSharp.__Usual)">
      <summary>
            Provide a method for handling error conditions raised during data browser processing.
        </summary>
      <param name="oErrorObj">An Error object describing the error condition.</param>
    </member>
    <member name="P:VO.DataBrowser.Font">
      <summary>
            The font to be used for the text area of the data browser.
        </summary>
      <value>The font to be used for the text area of the data browser.</value>
    </member>
    <member name="M:VO.DataBrowser.GetColumn(XSharp.__Usual)">
      <summary>
            Retrieve a specified column in this data browser.
        </summary>
      <param name="xColumnID">The name, number, or symbol of the column to be retrieved.</param>
      <returns>
            The specified data column or NIL if it could not be found.
        </returns>
    </member>
    <member name="P:VO.DataBrowser.HiBackground">
      <summary>
            Returns the background brush for the Highlighted rows and cells in the Databrowser. This can be changed with the ChangeBackground() method.
        </summary>
      <value>The background brush for the Highlighted rows and cells in the Databrowser. This can be changed with the ChangeBackground() method.</value>
    </member>
    <member name="M:VO.DataBrowser.Notify(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            An event handler that reflects events that have occurred in the server connected to this data browser.
        </summary>
      <param name="kNotification">Identifies the event, specified as one of the constants in the table below.</param>
      <param name="uDescription">Used only with some notification types. See descriptions in the table below</param>
      <returns>
            NIL except if NOTIFYINTENTTOMOVE is specified for <paramref name="kNotifyName" />.
            In this case, the return value is TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DataBrowser.Owner">
      <summary>
            The owner window of the data browser.
        </summary>
      <value>The owner window of the data browser.</value>
    </member>
    <member name="M:VO.DataBrowser.Paste">
      <summary>
            Paste the current contents of the clipboard into the current data browser cell.
        </summary>
    </member>
    <member name="P:VO.DataBrowser.Pointer">
      <summary>
            The Pointer object to be used in the text area of the data browser.
        </summary>
      <value>The Pointer object to be used in the text area of the data browser.</value>
    </member>
    <member name="F:VO.DataBrowser.ptrControlDefaultProc"></member>
    <member name="M:VO.DataBrowser.Refresh">
      <summary>
            Forces the contents of the data browser to be updated from the data server.
        </summary>
    </member>
    <member name="M:VO.DataBrowser.RemoveColumn(XSharp.__Usual)">
      <summary>
            Remove a column from this data browser.
        </summary>
      <param name="uColumnOrIndex">The name, number, or symbol representing the column to be removed.</param>
      <returns>
            The removed data column, if successful; otherwise, NULL_OBJECT.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.RestoreUpdate">
      <summary>
            Update this data browser visually and restore standard operation (after DataBrowser:SuspendUpdate() is called).
        </summary>
    </member>
    <member name="P:VO.DataBrowser.RowCount">
      <summary>
            A numeric value indicating the number of rows in the data browser.
        </summary>
      <value>A numeric value indicating the number of rows in the data browser.</value>
    </member>
    <member name="M:VO.DataBrowser.SetCaption(XSharp.__Usual)">
      <summary>
            Set the caption for the data browser title bar.
        </summary>
      <param name="cText">The text to be used as the caption. </param>
      <param name="symText">The symbol to be used as the caption.</param>
    </member>
    <member name="M:VO.DataBrowser.SetColumn(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Replace an existing column in the data browser with another column.
        </summary>
      <param name="oDataColumn">The new data column.</param>
      <param name="nColumnNumber">The column to be replaced. The number must be within the range of columns in the data browser; this method does not append a column at the end.</param>
      <returns>
            The replaced data column, if successful; otherwise, NULL_OBJECT.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.SetColumnFocus(XSharp.__Usual)">
      <summary>
            Set the column focus to a specified data column.
        </summary>
      <param name="oColumn">The column that the focus will be set to. If omitted, the default is NULL_OBJECT; the focus will not be changed.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.SetPointer(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a new pointer to be used when the mouse moves over a particular area of the data browser.
        </summary>
      <param name="oPointer">The new pointer to be used. If not specified, the default pointer is POINTERARROW.</param>
      <param name="kWhere">Indicates what part of the browser should be changed, specified as one of the following constants</param>
      <param name="Constant">Description</param>
      <param name="GBLCAPTION">The browser caption area. This is only visible if you first set a Browser caption.</param>
      <param name="GBLCOLCAPTION">The column caption area.</param>
      <param name="GBLTEXT">Text in the data display area. This is the default.</param>
    </member>
    <member name="M:VO.DataBrowser.SetStandardStyle(XSharp.__Usual)">
      <summary>
            Set the appearance of the data browser's caption areas.
        </summary>
      <param name="kStyle">The style to set, specified as one of the following constants:</param>
    </member>
    <member name="M:VO.DataBrowser.Show">
      <summary>
            Show this data browser.
        </summary>
    </member>
    <member name="M:VO.DataBrowser.SuspendUpdate">
      <summary>
            Temporarily disable repainting of the data browser while data is being altered; painting resumes with a call to DataBrowser:RestoreUpdate().
        </summary>
    </member>
    <member name="P:VO.DataBrowser.TextColor">
      <summary>
            The text color to be used for the text area of the data browser.
        </summary>
      <value>The text color to be used for the text area of the data browser.</value>
    </member>
    <member name="M:VO.DataBrowser.Undo">
      <summary>
            Undo recent changes to a row in the data browser.
        </summary>
    </member>
    <member name="M:VO.DataBrowser.Use(XSharp.__Usual)">
      <summary>
            Connect the data browser to a data server in a client-server relationship.
        </summary>
      <param name="oServer">The data server to which this data browser should be connected. If the data browser is already connected to a server, it is disconnected first. If omitted, the data browser is disconnected from the data server.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataBrowser.Validate">
      <summary>
            Determine whether the currently focused record is valid.
        </summary>
      <returns>
            TRUE if the record is valid; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.DataColumn">
      <summary>
            Create columns for use in a data browser.
        </summary>
    </member>
    <member name="M:VO.DataColumn.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a data column.
        </summary>
      <param name="nWidth">The initial width in which to display the column, in characters, or the FieldSpec object from which the width is extracted. If not specified, the default is 16.</param>
      <param name="xColumnID">The name or symbolic name of the column or hyperlabel containing the name of the column and any optional annotation.</param>
    </member>
    <member name="P:VO.DataColumn.Alignment">
      <summary>
            One of the following constants representing the alignment of this data column:
        </summary>
      <value>One of the following constants representing the alignment of this data column:</value>
    </member>
    <member name="M:VO.DataColumn.AsString(XSharp.__Usual)">
      <summary>
            Return the current value in the current row of this data column as a formatted string.
        </summary>
      <param name="uParam">The value held in the current row of this data column. </param>
    </member>
    <member name="P:VO.DataColumn.Background">
      <summary>
            The brush used for painting the background of this data column.
        </summary>
      <value>The brush used for painting the background of this data column.</value>
    </member>
    <member name="P:VO.DataColumn.Block">
      <summary>
            A code block associated with the data column. If set, it is used to filter the data in/out of the data column.
        </summary>
      <value>A code block associated with the data column. If set, it is used to filter the data in/out of the data column.</value>
    </member>
    <member name="P:VO.DataColumn.BlockOwner">
      <summary>
            The owner of the code block associated with the data column. If a code block is assigned, this object will be called when the code block is evaluated. For an example, see DataColumn:Block.
        </summary>
      <value>The owner of the code block associated with the data column. If a code block is assigned, this object will be called when the code block is evaluated. For an example, see DataColumn:Block.</value>
    </member>
    <member name="P:VO.DataColumn.Caption">
      <summary>
            A string representing the caption of this data column for use in its caption area.
        </summary>
      <value>A string representing the caption of this data column for use in its caption area.</value>
    </member>
    <member name="P:VO.DataColumn.CellBackground">
      <summary>
            The Brush object used to paint the background of a cell if DataColumn:EnableCellDraw has been called.
        </summary>
      <value>The Brush object used to paint the background of a cell if DataColumn:EnableCellDraw has been called.</value>
    </member>
    <member name="P:VO.DataColumn.CellTextColor">
      <summary>
            The Color object used to paint the text in a cell if DataColumn:EnableCellDraw has been called.
        </summary>
      <value>The Color object used to paint the text in a cell if DataColumn:EnableCellDraw has been called.</value>
    </member>
    <member name="M:VO.DataColumn.ChangeBackground(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a new background brush for this data column.
        </summary>
      <param name="oBrush">The new background brush to be used.</param>
      <param name="kWhere">
            Indicates what part of the data column should be repainted, specified as one of the following constants:
            <span><list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>GBLCOLCAPTION</term><description>The column caption area.</description></item><item><term>GBLHITEXT</term><description>Highlighted (selected) text in the data area.</description></item><item><term>GBLTEXT</term><description>Text in the data display area. This is the default.</description></item></list></span></param>
      <returns>
            The brush previously assigned to the changed area.
        </returns>
    </member>
    <member name="M:VO.DataColumn.ChangeTextColor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a new pen in a particular area of this data column.
        </summary>
      <param name="oColor">The new color to be used.</param>
      <param name="kColor">
            Indicates the standard color to be used, specified as one of the following constants:
        </param>
      <param name="kWhere">
            Indicates what part of the data column should be changed, specified as one of the following constants.
        </param>
      <returns>
            The pen previously assigned to the changed area.
        </returns>
    </member>
    <member name="M:VO.DataColumn.Destroy">
      <summary>
            Provide a method to de-instantiate a DataColumn object.
        </summary>
    </member>
    <member name="M:VO.DataColumn.EnableCellDraw(XSharp.__Usual)">
      <summary>
            Enable the painting of individual cells by registering a cell-painting method.
        </summary>
      <param name="symMethodName">The symbolic name of the method that will be used to paint the cells in this column.</param>
    </member>
    <member name="M:VO.DataColumn.EnableColumnMove(XSharp.__Usual)">
      <summary>
            Enable/disable whether the user can move (rearrange) this data column with the mouse. If the method is not called, the default behavior is determined by the data browser that owns this column.
        </summary>
      <param name="lAllowMove">TRUE allows column movement; FALSE disables it. The default is TRUE.</param>
    </member>
    <member name="M:VO.DataColumn.EnableColumnReSize(XSharp.__Usual)">
      <summary>
            Enable/disable whether the user can resize this data column with the mouse. If this method is not called, the default behavior is determined by the data browser that owns this column.
        </summary>
      <param name="lAllowResize">TRUE allows column resizing; FALSE disables it. The default is TRUE.</param>
    </member>
    <member name="P:VO.DataColumn.FieldSpec">
      <summary>
            The FieldSpec object connected to this data column.
        </summary>
      <value>The FieldSpec object connected to this data column.</value>
    </member>
    <member name="M:VO.DataColumn.GetModified">
      <summary>
            Determine whether the value in column has been modified.
        </summary>
      <returns>
            TRUE if the value in the column has been modified; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataColumn.GetValue">
      <summary>
            Get the value of the current data column.
        </summary>
    </member>
    <member name="P:VO.DataColumn.HyperLabel">
      <summary>
            The hyperlabel connected to this data column.
        </summary>
      <value>The hyperlabel connected to this data column.</value>
    </member>
    <member name="M:VO.DataColumn.LinkDF(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Connect a column to a field in a data server.
        </summary>
      <param name="oDataServer">The server that the column is to be linked to. Ordinarily, this is the common server that the entire window is linked to, but it is possible to link individual columns to other servers.</param>
      <param name="nFieldData">The number of the field within the server.</param>
    </member>
    <member name="P:VO.DataColumn.Modified">
      <summary>
            A logical value indicating whether the contents of the current row of this data column has been changed by the user since it was last set. TRUE indicates that it has changed (even if it has not yet been validated or has failed validation); FALSE indicates that it has not.
        </summary>
      <value>A logical value indicating whether the contents of the current row of this data column has been changed by the user since it was last set. TRUE indicates that it has changed (even if it has not yet been validated or has failed validation); FALSE indicates that it has not.</value>
    </member>
    <member name="P:VO.DataColumn.Name">
      <summary>
            A string representing the name of this data column.
        </summary>
      <value>A string representing the name of this data column.</value>
    </member>
    <member name="P:VO.DataColumn.NameSym">
      <summary>
            A symbol representing the name of this data column.
        </summary>
      <value>A symbol representing the name of this data column.</value>
    </member>
    <member name="P:VO.DataColumn.Owner">
      <summary>
            The data browser that owns this data column.
        </summary>
      <value>The data browser that owns this data column.</value>
    </member>
    <member name="M:VO.DataColumn.PerformValidations">
      <summary>
            Perform all the validations defined to this data column's field specification (for example, required, maximum and minimum digits, maximum and minimum value, validation rule) and return the result of the test.
        </summary>
      <returns>
            If any of the validations fail, this method sets the status of the data column appropriately and returns FALSE. Otherwise, it returns TRUE.
        </returns>
    </member>
    <member name="P:VO.DataColumn.Server">
      <summary>
            The data server to which this data column is currently connected, if any.
        </summary>
      <value>The data server to which this data column is currently connected, if any.</value>
    </member>
    <member name="M:VO.DataColumn.SetCaption(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the caption for the data column.
        </summary>
      <param name="cText">The text to be used as the caption. If omitted, the data browser uses the caption in the hyperlabel.</param>
      <param name="kAlignment">
            One of the following constants representing the alignment of the caption for the data column:
        </param>
    </member>
    <member name="M:VO.DataColumn.SetModified(XSharp.__Usual)">
      <summary>
            Mark the current data column, signifying that it has been modified.
        </summary>
      <param name="lModified">Specify TRUE to mark the data column as modified; otherwise, FALSE.</param>
    </member>
    <member name="M:VO.DataColumn.SetStandardStyle(XSharp.__Usual)">
      <summary>
            Set the appearance of this data column's caption area.
        </summary>
      <param name="kStyle">
            The style to set, specified as one of the constants below
        </param>
    </member>
    <member name="M:VO.DataColumn.SetValue(XSharp.__Usual)">
      <summary>
            Set the value of the current data column.
        </summary>
      <param name="cNewValue">The new value to be assigned to the data column specified as a string.</param>
      <returns>
            A string representing the current value of the data column.
        </returns>
    </member>
    <member name="P:VO.DataColumn.Status">
      <summary>
            A hyperlabel that indicates the results of validations or recent actions to this data column.
        </summary>
      <value>A hyperlabel that indicates the results of validations or recent actions to this data column.</value>
    </member>
    <member name="P:VO.DataColumn.TextColor">
      <summary>
            The text color to be used for the text area of this data column.
        </summary>
      <value>The text color to be used for the text area of this data column.</value>
    </member>
    <member name="P:VO.DataColumn.TextValue">
      <summary>
            A string representing the value held in the current row of this data column. Note that this string is formatted according to the picture clause held in the FieldSpec object inherited from the associated server field.
        </summary>
      <value>A string representing the value held in the current row of this data column. Note that this string is formatted according to the picture clause held in the FieldSpec object inherited from the associated server field.</value>
    </member>
    <member name="P:VO.DataColumn.Value">
      <summary>
            The value held in the current row of this data column, in whatever data type is held in the FieldSpec object inherited from the associated server field.
        </summary>
      <value>The value held in the current row of this data column, in whatever data type is held in the FieldSpec object inherited from the associated server field.</value>
    </member>
    <member name="P:VO.DataColumn.ValueChanged">
      <summary>
            A logical value indicating whether the data column value has been changed to a "valid" value, since it was last set.
        </summary>
      <value>A logical value indicating whether the data column value has been changed to a "valid" value, since it was last set.</value>
    </member>
    <member name="P:VO.DataColumn.VisualPos">
      <summary>
            Returns the number of the data column with respect to its visual position within a data browser from left to right.
        </summary>
      <value>The number of the data column with respect to its visual position within a data browser from left to right.</value>
    </member>
    <member name="P:VO.DataColumn.Width">
      <summary>
            The width of this data column in canvas coordinates.
        </summary>
      <value>The width of this data column in canvas coordinates.</value>
    </member>
    <member name="T:VO.DataDialog">
      <summary>
            Create a data window that behaves like a modal dialog window (also commonly referred to as a dialog box).
        </summary>
    </member>
    <member name="M:VO.DataDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a data dialog window.
        </summary>
      <param name="oOwner">The window that owns the data dialog window. The following window types can be owners: App, ShellWindow, TopAppWindow, ChildAppWindow, DialogWindow, or DataWindow.</param>
      <param name="oSource">The ID of the resource that defines the layout of the data dialog window. If not specified, the window automatically lays itself out when attached to a data server.</param>
      <param name="nResourceID">The resource ID that specifies the location and size of the sub-data window. Specifying this argument creates the new data dialog window as a sub-data window on its owner data window (only data window owners can have sub-data windows). It should refer to a control defined in the resource entity of the owner data window.</param>
      <param name="nDialogStyle">The style for the DataDialog border. Defaults to WS_DLGFRAME.</param>
    </member>
    <member name="T:VO.DataListView">
      <summary>
            Create a data list view as a faster, read-only, standalone control and an alternative to a data browser.
        </summary>
    </member>
    <member name="M:VO.DataListView.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a data list view.
        </summary>
      <param name="oOwner">The window that owns the data list view.</param>
      <param name="xID">The unique ID for the data list view (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of the data list view.</param>
      <param name="oPoint">The origin of the data list view in canvas coordinates.</param>
      <param name="oDimension">The dimension of the data list view in canvas coordinates.</param>
      <param name="kStyle">The style of the data list view.</param>
    </member>
    <member name="M:VO.DataListView.DeleteAll">
      <summary>
            Delete all items in a data list view.
        </summary>
      <returns>
            TRUE if all items were deleted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataListView.Destroy">
      <summary>
            Provide a method to de-instantiate a DataListView object.
        </summary>
    </member>
    <member name="M:VO.DataListView.FIELDGET(XSharp.__Usual)">
      <summary>
            Return the contents of a specified field of the data server associated with the data list view.
        </summary>
      <param name="nFieldPos">The name, number, or symbol representing the desired field.</param>
      <returns>
            The field's contents. The data type of the return value depends on the data type of the field.
        </returns>
    </member>
    <member name="M:VO.DataListView.Notify(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Provide an event handler that reflects events that have occurred in the server connected to this data list view.
        </summary>
      <param name="kNotification">Identifies the event, specified as one of the constants in the table below.</param>
      <param name="uDescription">Used only with some notification types. See descriptions in the table below</param>
      <returns>
            NIL, except if NOTIFYINTENTTOMOVE is specified for <paramref name="kNotification" />.
            In this case, the return value is TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DataListView.Owner">
      <summary>
            The owner of this DataListView control.
        </summary>
      <value>The owner of this DataListView control.</value>
    </member>
    <member name="M:VO.DataListView.Refresh">
      <summary>
            Force the contents of the data list view to be updated from the data server.
        </summary>
    </member>
    <member name="P:VO.DataListView.Server">
      <summary>
            The data server associated with the data list view.
        </summary>
      <value>The data server associated with the data list view.</value>
    </member>
    <member name="M:VO.DataListView.Use(XSharp.__Usual)">
      <summary>
            Associate a data server with the data list view.
        </summary>
      <param name="oNewServer">The data server to be associated with the data list view.</param>
      <returns>
            TRUE, if the server could be assigned successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.DataWindow">
      <summary>
            Create a data window which is capable of interacting intelligently with a data server.
        </summary>
    </member>
    <member name="M:VO.DataWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a data window.
        </summary>
      <param name="oOwner">
            The window that owns the data window. The following window types can be owners:
            ShellWindow, TopAppWindow, ChildAppWindow, DialogWindow, DataDialog, or another DataWindow.
            The behavior of the data window is determined by the type of its owner—see the discussion of
            Adaptive Behavior in the description of this class.
        </param>
      <param name="oSource">
            The ID of the resource that defines the layout of the data window.
            If not specified, the data window automatically lays itself out when attached to a data server.
        </param>
      <param name="nResourceID">
            The resource ID that specifies the location and size of the sub-data window.
            Specifying this argument creates the new data window as a sub-data window on its owner data window
            (only data window owners can have sub-data windows). It should refer to a control defined in the
            resource entity of the owner data window.
            If <paramref name="nResourceID" /> is omitted or if <paramref name="oOwner" /> is not a data window,
            the data window is created as a modal DialogWindow.
        </param>
      <param name="nDialogStyle">** missing parameter documentation **</param>
    </member>
    <member name="M:VO.DataWindow.Activate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is activated.
        </summary>
      <param name="oEvent">The event that describes which window was activated.</param>
    </member>
    <member name="P:VO.DataWindow.AllowServerClose">
      <summary>
            A logical value specifying whether the server is automatically closed with the data window. By default, this is set to TRUE in the DataWindow:Init() method.
        </summary>
      <value>A logical value specifying whether the server is automatically closed with the data window. By default, this is set to TRUE in the DataWindow:Init() method.</value>
    </member>
    <member name="M:VO.DataWindow.Append">
      <summary>
            Append a blank record to the data server connected to this data window and position the window on this new record.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DataWindow.AutoScroll">
      <summary>
            A data window scrolls automatically to any control which gains focus while tabbing, even if the control is not visible (for example, when the window is resized). By setting AutoScroll to FALSE, this automatic scrolling behavior is blocked.
        </summary>
      <value>A data window scrolls automatically to any control which gains focus while tabbing, even if the control is not visible (for example, when the window is resized). By setting AutoScroll to FALSE, this automatic scrolling behavior is blocked.</value>
    </member>
    <member name="P:VO.DataWindow.Background">
      <summary>
            The background brush currently in use by this data window.
        </summary>
      <value>
            The background brush currently in use by this data window.
        </value>
    </member>
    <member name="P:VO.DataWindow.Browser">
      <summary>
            The DataBrowser object to use when this data window is displayed in browse view.
        </summary>
      <value>The DataBrowser object to use when this data window is displayed in browse view.</value>
    </member>
    <member name="P:VO.DataWindow.BrowserClass">
      <summary>
            A symbol specifying the class used for the data window's browse mode. Valid values are: #DATABROWSER, #DATALISTVIEW, or any user-defined class.
            The default is #DATABROWSER.
        </summary>
      <value>
            A symbol specifying the class used for the data window's browse mode. Valid values are: #DATABROWSER, #DATALISTVIEW, or any user-defined class.
            The default is #DATABROWSER.
        </value>
    </member>
    <member name="M:VO.DataWindow.ButtonClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a check box, push button, or radio button is clicked with the mouse.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which button was clicked.</param>
    </member>
    <member name="M:VO.DataWindow.Cancel">
      <summary>
            Discard all information entered in this data window and close the window.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.CanvasErase">
      <summary>
            Erase the current canvas area of this data window and repaint it using either the background brush or the system's default background color.
        </summary>
    </member>
    <member name="P:VO.DataWindow.Caption"></member>
    <member name="M:VO.DataWindow.ChangeFont(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change the font used by this datawindow.
        </summary>
      <param name="oFont">The new font to be used.</param>
      <param name="lUpdate">
            Specify TRUE to resize and reposition all controls in this dialog window and change their fonts; otherwise, FALSE.
            If omitted, the default is FALSE.
        </param>
      <returns>
            The font previously assigned to the datawindow.
        </returns>
    </member>
    <member name="M:VO.DataWindow.CheckStatus">
      <summary>
            Test the information currently displayed in the controls in this data window to see if it passes all validation
            rules defined to the connected server.
        </summary>
      <returns>
            TRUE if the window passes all validation checks; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.Clear">
      <summary>
            Clear the current selection in this data window.
        </summary>
    </member>
    <member name="M:VO.DataWindow.ClearRelations">
      <summary>
            Clear all relations defined to this data window's server.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DataWindow.ClipperKeys">
      <summary>
            A logical value indicating that the Clipper navigation keys (i.e., the Direction and Return keys) are to be used for this data window (TRUE if yes, FALSE if no).
        </summary>
      <value>A logical value indicating that the Clipper navigation keys (i.e., the Direction and Return keys) are to be used for this data window (TRUE if yes, FALSE if no).</value>
    </member>
    <member name="M:VO.DataWindow.Close(XSharp.__Usual)">
      <summary>
            Invoked just as the data window is about to close.
        </summary>
      <param name="oEvent">An event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.Commit">
      <summary>
            Force all pending updates to this data window's server to be permanently written to disk.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DataWindow.ConcurrencyControl">
      <summary>
            A constant, identifying the mode of automatic concurrency control for this data window, determining when and how records are locked and released:
        </summary>
      <value>A constant, identifying the mode of automatic concurrency control for this data window, determining when and how records are locked and released:</value>
    </member>
    <member name="P:VO.DataWindow.ContextMenu">
      <summary>
            The context menu attached to the window
        </summary>
      <value>The context menu attached to the window</value>
    </member>
    <member name="M:VO.DataWindow.ControlFocusChange(XSharp.__Usual)">
      <summary>Provide a method that is invoked when the input focus changes to or from a control.</summary>
      <param name="oControlFocusChangeEvent">The ControlFocusChangeEvent object that identifies which control generated the ControlFocusChangeEvent object and whether it has just gained or lost the keyboard focus. </param>
    </member>
    <member name="M:VO.DataWindow.Copy">
      <summary>
            Copy the current selection in this data window to the clipboard.
        </summary>
    </member>
    <member name="P:VO.DataWindow.CurrentView">
      <summary>
            A symbol representing the view mode of the data window, as #BrowseView or #FormView.
        </summary>
      <value>A symbol representing the view mode of the data window, as #BrowseView or #FormView.</value>
    </member>
    <member name="M:VO.DataWindow.Cut">
      <summary>
            Delete the current selection in this data window and copy it to the clipboard.
        </summary>
    </member>
    <member name="M:VO.DataWindow.DeActivate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is deactivated.
        </summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
    </member>
    <member name="M:VO.DataWindow.DeactivateAllOLEObjects(XSharp.__Usual)"></member>
    <member name="P:VO.DataWindow.DeferUse">
      <summary>
            A logical value specifying whether the Use() operation for connecting the data window to the associated server should be deferred until the data window is first displayed.
        </summary>
      <value>A logical value specifying whether the Use() operation for connecting the data window to the associated server should be deferred until the data window is first displayed.</value>
    </member>
    <member name="M:VO.DataWindow.Delete">
      <summary>
            Delete the current record in the attached server and update the window based on the change.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.DeleteValidated">
      <summary>
            Delete the current record in the attached server only if it passes its validation rules and update the window based on the change.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.Destroy">
      <summary>
            Free memory resources allocated for a window and its derived objects.
        </summary>
    </member>
    <member name="M:VO.DataWindow.DisableConditionalControls">
      <summary>
            Disable those controls in this data window that have been registered with RegisterConditionalControls().
        </summary>
    </member>
    <member name="M:VO.DataWindow.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the dispatcher for events within the system when the window has focus;
            routing various events to their appropriate event handlers.
        </summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event. This is usually the value of the EventReturnValue field.
        </returns>
    </member>
    <member name="M:VO.DataWindow.Draw(XSharp.__Usual)">
      <summary>
            Display a Draw object on this data window.
        </summary>
      <param name="oDrawObject">The object to be drawn.</param>
      <param name="aoDrawObject">The array of objects to be drawn.</param>
    </member>
    <member name="M:VO.DataWindow.EditChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the text in an edit control is changed.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which edit control was changed.</param>
    </member>
    <member name="M:VO.DataWindow.EnableConditionalControls">
      <summary>
            Enable those controls that have been registered with RegisterConditionalControls().
        </summary>
    </member>
    <member name="M:VO.DataWindow.EnableDragDropClient(XSharp.__Usual,XSharp.__Usual)"></member>
    <member name="M:VO.DataWindow.EnableStatusBar(XSharp.__Usual)">
      <summary>
            Enable/disable a status bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the status bar; FALSE disables it. The default is TRUE.</param>
      <returns>
            The status bar object.
        </returns>
    </member>
    <member name="M:VO.DataWindow.EnableToolTips(XSharp.__Usual)">
      <summary>
            Enable or disable the tooltips for a window. Note that assigning a value to Control:ToolTipText automatically enables the tooltip's display on the parent window.
        </summary>
      <param name="lEnable">Logical value indicating whether the tool tips should be enabled (TRUE) or disabled (FALSE). If omitted, the default is TRUE.</param>
      <returns>
            TRUE, if tooltips were enabled; FALSE, if tooltips were disabled.
        </returns>
    </member>
    <member name="M:VO.DataWindow.Error(XSharp.__Usual)">
      <summary>
            Provide a method for handling error conditions raised during data window processing.
        </summary>
      <param name="oErrorObj">An Error object describing the error condition.</param>
    </member>
    <member name="M:VO.DataWindow.Expose(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked whenever part of the data window needs repainting.
        </summary>
      <param name="oExposeEvent">The ExposeEvent object that describes which area of the data window needs repainting.</param>
    </member>
    <member name="M:VO.DataWindow.FIELDGET(XSharp.__Usual)">
      <summary>
            Retrieve the current value of the indicated control in this data window (and the data server field associated with this control, if any).
        </summary>
      <param name="uFieldID">The name, number, or symbol representing the desired field.</param>
      <returns>
            The field's contents. The data type of the return value depends on the data type of the field.
        </returns>
    </member>
    <member name="M:VO.DataWindow.FIELDPUT(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the value of the control in this data window (and the data server field associated with this control, if any).
        </summary>
      <param name="uFieldId">The name, number, or symbol representing the field that is referenced.</param>
      <param name="uNewValue">The value to be assigned to the field. The data type of this value must match the data type of the field.</param>
      <returns>
            The newly assigned value if the operation was successful; otherwise, NIL.
        </returns>
    </member>
    <member name="M:VO.DataWindow.FocusChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the input focus changes from the current data window to another window (or vice versa).
        </summary>
      <param name="oFocusChangeEvent">The FocusChangeEvent object that identifies whether the focus is being gained or lost.</param>
    </member>
    <member name="P:VO.DataWindow.Foreground">
      <summary>
            The foreground brush currently in use by this data window.
        </summary>
      <value>The foreground brush currently in use by this data window.</value>
    </member>
    <member name="M:VO.DataWindow.GetAllChildren">
      <summary>
            Obtain an array of all X# children objects of the window.
        </summary>
      <returns>
            An array of all X# children objects of the window. This array may contain window objects as well as control objects. Note that controls which do not have a corresponding X# object, like a FixedText control where the Generate Code property was set to "No", are not included in the returned array.
        </returns>
    </member>
    <member name="M:VO.DataWindow.GoBottom">
      <summary>
            Position the data server connected to this data window on the last logical record and update the window based on the change.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.GoTo(XSharp.__Usual)">
      <summary>
            Position the data server connected to this data window on a specified record number and update the window based on the change.
        </summary>
      <param name="nRecNo">The record number to which the data window should be positioned.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.GoTop">
      <summary>
            Position the data server connected to this data window on the first logical record and update the window based on the change.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.HelpRequest(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the user requests help from the application using one of the available context-sensitive help mechanisms.
        </summary>
      <param name="oHelpRequestEvent">The HelpRequestEvent object that describes which item help is being requested for.</param>
    </member>
    <member name="M:VO.DataWindow.Hide">
      <summary>
            Hide this data window so it is not visible.
        </summary>
    </member>
    <member name="M:VO.DataWindow.HorizontalScroll(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a horizontal scroll bar is scrolled.
        </summary>
      <param name="oScrollEvent">The ScrollEvent object that describes the scroll type and new position.</param>
    </member>
    <member name="M:VO.DataWindow.HorizontalSlide(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a horizontal slider's thumb is dragged either by the mouse or the keyboard.
        </summary>
      <param name="oSliderEvent">The SliderEvent object that describes which horizontal slider's thumb was dragged.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.DataWindow.HorizontalSpin(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a horizontal spinner is spun.
        </summary>
      <param name="oSpinnerEvent">The SpinnerEvent object that describes which horizontal spinner was spun.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.DataWindow.InsertObject">
      <summary>
            Use the standard Insert Object dialog to insert an OLE object into the focused OLEObject of the data window.
        </summary>
    </member>
    <member name="M:VO.DataWindow.LineTo(XSharp.__Usual)">
      <summary>
            Draw a line on this data window (using the current pen) from the current pen position to a specified point.
        </summary>
      <param name="uPoint">The position where the line should end, in canvas coordinates, or an array of points, in canvas coordinates, where the line should end, in which case DataWindow:LineTo() acts like a polyline method.</param>
    </member>
    <member name="M:VO.DataWindow.ListBoxClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item in a list box owned by this data window is double-clicked.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which list box contained the item that is double-clicked.</param>
    </member>
    <member name="M:VO.DataWindow.ListBoxSelect(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item in a list box owned by this data window is clicked.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which list box contained the item that was clicked.</param>
    </member>
    <member name="P:VO.DataWindow.Menu"></member>
    <member name="M:VO.DataWindow.MouseButtonDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the mouse pointer is positioned over the window and a mouse button is clicked.
        </summary>
      <param name="oMouseEvent">The MouseEvent object that contains information about the state of the mouse when the button was clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.DataWindow.MoveTo(XSharp.__Usual)">
      <summary>
            Move the current pen to a point on the data window's canvas area.
        </summary>
      <param name="oPoint">The position of the pen, in canvas coordinates.</param>
      <returns>
            A point representing the previous location of the pen, in canvas coordinates.
        </returns>
    </member>
    <member name="M:VO.DataWindow.Notify(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            An event handler that reflects events that have occurred in the server connected to this data window.
            <br />Important! Notify() is automatically called by the server, and should normally not be called by application code.
        </summary>
      <param name="kNotification">Identifies the event, specified as one of the constants in the table below.</param>
      <param name="uDescription">Used only with some notification types. See descriptions in the table below</param>
      <returns>
            SELF, except if NOTIFYINTENTTOMOVE is specified for <paramref name="kNotifyName" />. In this case, the return value is TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.OK">
      <summary>
            Accept all information entered in this data window and close the window.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.OLEInPlaceActivate">
      <summary>
            Called whenever a child OLE object is about to be "inplace" activated.
        </summary>
    </member>
    <member name="M:VO.DataWindow.OLEInPlaceDeactivate">
      <summary>
            Called whenever a child OLE object is about to be "inplace" deactivated.
        </summary>
    </member>
    <member name="P:VO.DataWindow.Origin">
      <summary>
            The point representing the new location of this data window, in the canvas coordinates of its owner.
        </summary>
      <value>The point representing the new location of this data window, in the canvas coordinates of its owner.</value>
    </member>
    <member name="P:VO.DataWindow.OwnerAlignment">
      <summary>The Owner Alignment value for the window, which is used when the window is a subwindow on another window.</summary>
      <value>The Owner Alignment value for the window</value>
    </member>
    <member name="M:VO.DataWindow.PaintBoundingBox(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Paint a rectangular area in the data window using a specified painting method.
        </summary>
      <param name="oBB">The bounding box (group or character box) representing the data window area to be painted, in canvas coordinates.</param>
      <param name="kPM">The constant that represents how the data window area is painted:</param>
    </member>
    <member name="M:VO.DataWindow.Paste">
      <summary>
            Replace the current selection in this data window with the contents of the clipboard.
        </summary>
    </member>
    <member name="M:VO.DataWindow.PasteSpecial">
      <summary>
            Use the standard Paste Special dialog to insert an OLE object into the focused OLEObject of the data window.
        </summary>
    </member>
    <member name="P:VO.DataWindow.Pen"></member>
    <member name="P:VO.DataWindow.Pointer">
      <summary>
            The pointer used by the data window to represent the mouse when it enters the window.
        </summary>
      <value>The pointer used by the data window to represent the mouse when it enters the window.</value>
    </member>
    <member name="M:VO.DataWindow.PreValidate">
      <summary>
            Called after any status change in this data window to allow controls and menu commands to be enabled/disabled based on the current validation status.
        </summary>
    </member>
    <member name="P:VO.DataWindow.PreventAutoLayout">
      <summary>
            A logical value indicating that the AutoLayout behavior of the data window is blocked (TRUE if yes, FALSE if no). An empty data window does not create controls automatically when it first uses a new data server.
        </summary>
      <value>A logical value indicating that the AutoLayout behavior of the data window is blocked (TRUE if yes, FALSE if no). An empty data window does not create controls automatically when it first uses a new data server.</value>
    </member>
    <member name="M:VO.DataWindow.QueryClose(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked just before the data window closes to confirm if the application really wants to close the window.
        </summary>
      <param name="oQCE">The Event object that describes which data window is about to be closed.</param>
      <returns>
            TRUE if the data window is to be closed; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.RegisterConditionalControls(XSharp.__Usual)">
      <summary>
            Register a control in this data window as being subject to validation status and hence automatically dimmed whenever the window is in an invalid state.
        </summary>
      <param name="oCC">The control to be registered.</param>
    </member>
    <member name="M:VO.DataWindow.RePaint">
      <summary>
            Send an ExposeEvent to repaint the data window's canvas area.
        </summary>
    </member>
    <member name="M:VO.DataWindow.RepaintBoundingBox(XSharp.__Usual)">
      <summary>
            Repaint a rectangular area in the data window.
        </summary>
      <param name="oBB">The bounding box (group or character box) representing the data window area to be repainted, in canvas coordinates.</param>
    </member>
    <member name="M:VO.DataWindow.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the data window changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the data window canvas area.</param>
    </member>
    <member name="M:VO.DataWindow.Seek(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Search for a value in the data server connected to this data window based on a controlling search order and update the window based on the change.
        </summary>
      <param name="uValue">The value to search for. Its data type should be compatible with the controlling search order.</param>
      <param name="lSoftSeek">
            Determines how the attached data server is positioned if the specified key value is not found: TRUE performs a soft seek; FALSE does not. If <paramref name="lSoftSeek" /> is omitted, the current SetSoftSeek() setting is used.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE. Note that a FALSE value can indicate either that the value was not found or that the server does not support this search operation. Use the DataWindow:Status property to determine the exact cause of a failure.
        </returns>
    </member>
    <member name="P:VO.DataWindow.Server">
      <summary>
            The DataServer object currently connected to this data window. If no server is connected, this value is NIL.
        </summary>
      <value>The DataServer object currently connected to this data window. If no server is connected, this value is NIL.</value>
    </member>
    <member name="M:VO.DataWindow.SetAlignStartSize(XSharp.__Usual)">
      <summary>
            Sets the start size of the form window. In general, this size is set with the first assign to OwnerAlignment but it can be useful when trying to control the sizes for yourself.
        </summary>
      <param name="oDataWindow">The window attached to the child server; which must be a data window linked to a server of compatible type. If omitted, all relations for this server are removed (although the recommended way of doing this is the DataWindow:ClearRelations() method).</param>
      <param name="oSize">The Dimension representing the size of the window.</param>
    </member>
    <member name="M:VO.DataWindow.SetRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a relation from the data server connected to this data window to the data server of another, creating an owner-child relationship between the two servers and the two windows.
        </summary>
      <param name="oDWChild">
            The window attached to the child server; which must be a data window linked to a server
            of compatible type. If omitted, all relations for this server are removed (although the recommended way of
            doing this is the DataWindow:ClearRelations() method).
        </param>
      <param name="uRelation">
            The relation code block for the server, The name or symbol representing the field from
            this server; a code block is constructed and macro-compiled or the array of field names or symbols representing
            the relation for the server. The field names are concatenated with plus signs and formed into a code block which is macro-compiled.
        </param>
      <param name="cRelation">
            When the relation is specified as a code block, a string version of the code block
            can be provided as well; it is returned by the Relation() method.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.SetSelectiveRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a selective relation from this window to the child window, or actually from the server of
            this window to the server of the other window. A selective relation is one that limits operations on the child server to those records that match the relation condition.
        </summary>
      <param name="oDWChild">
            The window attached to the child server; which must be a data window linked to a
            server of compatible type. If omitted, all relations for this server are removed (although the recommended
            way of doing this is the DataWindow:ClearRelations() method).
        </param>
      <param name="uRelation">
            The relation code block for the server, The name or symbol representing the
            field from this server; a code block is constructed and macro-compiled or the array of field names or
            symbols representing the relation for the server. The field names are concatenated with plus signs and
            formed into a code block which is macro-compiled.
        </param>
      <param name="cRelation">
            When the relation is specified as a code block, a string version of the code block
            can be provided as well; it is returned by the Relation() method.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.Show(XSharp.__Usual)">
      <summary>
            Display a window.
        </summary>
      <param name="nShowState">The state in which the window area should be displayed.</param>
      <returns>NIL</returns>
    </member>
    <member name="P:VO.DataWindow.Size">
      <summary>
            The dimension representing the size of this data window in canvas coordinates.
        </summary>
      <value>The dimension representing the size of this data window in canvas coordinates.</value>
    </member>
    <member name="M:VO.DataWindow.Skip(XSharp.__Usual)">
      <summary>
            Move forward or backward in the server by a specified number of records.
        </summary>
      <param name="uRelativePosition">The number of records to be moved. Positive numbers more forward, negative numbers move backward. The default is +1.</param>
      <returns>
            TRUE if operation was successful; otherwise, FALSE. Skip() can fail for several different reasons. It can fail validation, there may not be that many records to move, the write that precedes the move can fail because of lock conflicts with other users that control the server, or the server can have become unavailable due to technical problems. Use DataWindow:Status to determine the reason for the failure.
        </returns>
    </member>
    <member name="M:VO.DataWindow.SkipNext">
      <summary>
            Move to the next record (identical to Skip(1)).
        </summary>
      <returns>
            TRUE if operation was successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DataWindow.SkipPrevious">
      <summary>
            Move to the previous record (identical to Skip(-1)).
        </summary>
      <returns>
            TRUE if operation was successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DataWindow.Status">
      <summary>
            A hyperlabel identifying the status of this data window after the last operation.
        </summary>
      <value>A hyperlabel identifying the status of this data window after the last operation.</value>
    </member>
    <member name="M:VO.DataWindow.StatusOK">
      <summary>
            Indicate the current validation status of the window through a return code and by setting the DataWindow:Status property.
        </summary>
    </member>
    <member name="F:VO.DataWindow.symFormDialog"></member>
    <member name="M:VO.DataWindow.TextPrint(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display a given string on the data window at a specified location using the current font and the current pen color.
        </summary>
      <param name="cText">The string to be printed.</param>
      <param name="oPoint">The position of the string's origin, in canvas coordinates.</param>
    </member>
    <member name="P:VO.DataWindow.ToolBar"></member>
    <member name="M:VO.DataWindow.ToolBarHeightChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the height of the window's toolbar is changed.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes the changes to the toolbar height.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.DataWindow.Undo">
      <summary>
            Undo recent changes made in this data window.
        </summary>
    </member>
    <member name="M:VO.DataWindow.UndoAll">
      <summary>
            Undo all changes made in this data window since the last record movement or Commit() operation.
        </summary>
    </member>
    <member name="M:VO.DataWindow.UpdateActiveObject">
      <summary>
            Update the toolbars of any in-place active OLE objects.
        </summary>
    </member>
    <member name="M:VO.DataWindow.Use(XSharp.__Usual)">
      <summary>
            Connect the data window to a data server in a client-server relationship.
        </summary>
      <param name="oDataServer">The DataServer object that the window is to be connected to. If the window is already connected to a server, it is disconnected first. If the server argument is omitted, the server is not connected to any window.</param>
      <returns>
            TRUE if the connection was successful; otherwise, FALSE. The operation fails under the following conditions: if the window has controls and columns but none matches the names of the fields of the server and, of course, if there is a technical problem with the server.
        </returns>
    </member>
    <member name="M:VO.DataWindow.VerticalScroll(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a vertical scroll bar is scrolled.
        </summary>
      <param name="oScrollEvent">The ScrollEvent object that describes the scroll type and new position.</param>
    </member>
    <member name="M:VO.DataWindow.VerticalSlide(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a vertical slider's thumb is dragged either by the mouse or the keyboard.
        </summary>
      <param name="oSliderEvent">The SliderEvent object that describes which vertical slider's thumb was dragged.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.DataWindow.VerticalSpin(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a vertical spinner is spun.
        </summary>
      <param name="oSpinnerEvent">The SpinnerEvent object that describes which vertical spinner was spun.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.DataWindow.ViewAs(XSharp.__Usual)">
      <summary>
            Specify the view mode of the data window, as browse view or form view.
        </summary>
      <param name="symViewType">
            Specifies which view mode is to be used. Use one of these symbols:
            <list type="table"><listheader><term>Symbol</term><description>Description</description></listheader><item><term>#BrowseView </term><description>Several records are displayed at the same time, as rows in a spreadsheet-like table with each field corresponding to a column.</description></item><item><term>#FormView </term><description>A single record is viewed at a time, with its fields displayed in individual controls.</description></item></list></param>
    </member>
    <member name="M:VO.DataWindow.ViewForm">
      <summary>
            Select form view for the data window.
        </summary>
    </member>
    <member name="M:VO.DataWindow.ViewTable">
      <summary>
            Select browse view for the data window.
        </summary>
    </member>
    <member name="T:VO.DateRange">
      <summary>
            An auxiliary class used by the DateTimePicker and MonthCalendar controls to represent a date range.
        </summary>
    </member>
    <member name="M:VO.DateRange.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a DateRange object.
        </summary>
      <param name="dStart">The start date of the date range. If omitted, defaults to Today().</param>
      <param name="dEnd">The end date of the date range. If omitted, defaults to Today().</param>
    </member>
    <member name="P:VO.DateRange.Max">
      <summary>
            The date representing the upper limit of the date range.
        </summary>
      <value>The date representing the upper limit of the date range.</value>
    </member>
    <member name="P:VO.DateRange.Min">
      <summary>
            The date representing the lower limit of the date range.
        </summary>
      <value>The date representing the lower limit of the date range.</value>
    </member>
    <member name="T:VO.DateTimePicker">
      <summary>
            Encapsulate a DateTimePicker control.
        </summary>
    </member>
    <member name="M:VO.DateTimePicker.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a DateTimePicker object.
        </summary>
      <param name="oOwner">The window that owns the DateTimePicker object.</param>
      <param name="xID">The unique ID for the DateTimePicker object (between 1 and 8000).</param>
      <param name="oPoint">The origin of the DateTimePicker object in canvas coordinates.</param>
      <param name="oDimension">The dimension of the DateTimePicker object in canvas coordinates.</param>
      <param name="dwStyle">
            Constant representing the style of the DateTimePicker object, specified either by a X# style constant or a Windows API style constant. Styles can be combined using the _Or() operator.
        </param>
      <param name="lDataAware">A logical value that is TRUE if the DateTimePicker object is data-aware; otherwise, FALSE. If omitted, defaults to TRUE.</param>
      <param name="nResourceID">The resource ID of the DateTimePicker object.</param>
    </member>
    <member name="P:VO.DateTimePicker.DateRange">
      <summary>
            A DateRange object setting the range of allowable dates.
        </summary>
      <value>A DateRange object setting the range of allowable dates.</value>
    </member>
    <member name="P:VO.DateTimePicker.Format">
      <summary>
            Sets the display format of the DateTimePicker control. The assign expects a string containing any of the following fragments:
        </summary>
      <value>Sets the display format of the DateTimePicker control. The assign expects a string containing any of the following fragments:</value>
    </member>
    <member name="P:VO.DateTimePicker.MCBackgroundColor">
      <summary>
            A Color object describing the background color (between the months) of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.
        </summary>
      <value>A Color object describing the background color (between the months) of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</value>
    </member>
    <member name="P:VO.DateTimePicker.MCFont">
      <summary>
            A Font object specifying the font of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.
        </summary>
      <value>A Font object specifying the font of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</value>
    </member>
    <member name="P:VO.DateTimePicker.MCMonthBackgroundColor">
      <summary>
            A Color object describing the background color (within the month area) of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.
        </summary>
      <value>A Color object describing the background color (within the month area) of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</value>
    </member>
    <member name="P:VO.DateTimePicker.MCTextColor">
      <summary>
            A Color object describing the text color of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.
        </summary>
      <value>A Color object describing the text color of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</value>
    </member>
    <member name="P:VO.DateTimePicker.MCTitleBackgroundColor">
      <summary>
            A Color object describing the title background color of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.
        </summary>
      <value>A Color object describing the title background color of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</value>
    </member>
    <member name="P:VO.DateTimePicker.MCTitleTextColor">
      <summary>
            A Color object describing the title text color of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.
        </summary>
      <value>A Color object describing the title text color of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</value>
    </member>
    <member name="P:VO.DateTimePicker.MCTrailingTextColor">
      <summary>
            A Color object describing the color of the trailing and leading days, i.e., those not belonging to the current month, that appear on the MonthCalendar pop-up window, if the DateTimePicker is in date mode.
        </summary>
      <value>A Color object describing the color of the trailing and leading days, i.e., those not belonging to the current month, that appear on the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</value>
    </member>
    <member name="P:VO.DateTimePicker.SelectedDate">
      <summary>
            A date specifying the currently selected date.
        </summary>
      <value>A date specifying the currently selected date.</value>
    </member>
    <member name="P:VO.DateTimePicker.SelectedTime">
      <summary>
            A string (format "HH:MM:SS") specifying the currently selected time.
        </summary>
      <value>A string (format "HH:MM:SS") specifying the currently selected time.</value>
    </member>
    <member name="P:VO.DateTimePicker.TextValue">
      <summary>
            The current value in string format. This is needed internally to allow the binding of a DateTimePicker control to a database field.
        </summary>
      <value>The current value in string format. This is needed internally to allow the binding of a DateTimePicker control to a database field.</value>
    </member>
    <member name="T:VO.DateTimeSelectionEvent">
      <summary>
            Provide information about a date time selection event, which is generated when a user selected a Date or Time in a DateTimePicker control.
        </summary>
    </member>
    <member name="M:VO.DateTimeSelectionEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.DateTimeSelectionEvent.SelectedDate">
      <summary>
            A date value indicating the date the user selected in the control
        </summary>
      <value>A date value indicating the date the user selected in the control</value>
    </member>
    <member name="P:VO.DateTimeSelectionEvent.SelectedTime">
      <summary>
            A string value indicating the time the user selected in the control
        </summary>
      <value>A string value indicating the time the user selected in the control</value>
    </member>
    <member name="T:VO.DialogWindow">
      <summary>
            Create a dialog window (also commonly referred to as a dialog box), which allows the application and end user to interact. This type of dialog can be modal or modeless (see the description below).
        </summary>
    </member>
    <member name="M:VO.DialogWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a dialog window.
        </summary>
      <param name="oOwner">The window that owns the dialog window.</param>
      <param name="xResourceID">The resource ID of the desired dialog window.</param>
      <param name="lModal">TRUE creates a modal dialog window; FALSE, a modeless one. The default is TRUE.</param>
    </member>
    <member name="M:VO.DialogWindow.Activate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is activated.
        </summary>
      <param name="oEvent">The event that describes which window was activated.</param>
    </member>
    <member name="M:VO.DialogWindow.Active"></member>
    <member name="M:VO.DialogWindow.ButtonClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a check box, push button, or radio button is clicked with the mouse.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which button was clicked.</param>
    </member>
    <member name="M:VO.DialogWindow.ChangeFont(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change the font used by this dialog window.
        </summary>
      <param name="New_Font">The new font to be used.</param>
      <param name="lRescale">Specify TRUE to resize and reposition all controls in this dialog window and change their fonts; otherwise, FALSE. If omitted, the default is FALSE.</param>
      <returns>
            The font previously assigned to the dialog window.
        </returns>
    </member>
    <member name="M:VO.DialogWindow.ControlFocusChange(XSharp.__Usual)">
      <summary>Provide a method that is invoked when the input focus changes to or from a control.</summary>
      <param name="oControlFocusChangeEvent">The ControlFocusChangeEvent object that identifies which control generated the ControlFocusChangeEvent object and whether it has just gained or lost the keyboard focus. </param>
      <param name="oControlFocusChangeEvent">** missing parameter documentation **</param>
    </member>
    <member name="M:VO.DialogWindow.DeActivate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is deactivated.
        </summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
    </member>
    <member name="M:VO.DialogWindow.Default(XSharp.__Usual)">
      <summary>Call the default windows procedure for a window and set the EventReturnValue for the object.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.DialogWindow.Destroy">
      <summary>
            Free memory resources allocated for a dialog window and its derived objects.
        </summary>
    </member>
    <member name="M:VO.DialogWindow.EditChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the text in an edit control is changed.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which edit control was changed.</param>
    </member>
    <member name="M:VO.DialogWindow.EditFocusChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the input focus changes to or from an edit control.
        </summary>
      <param name="oEditFocusChangeEvent">The EditFocusChangeEvent object that identifies which edit control generated the EditFocusChangeEvent object and whether it has just gained or lost the keyboard focus.</param>
    </member>
    <member name="M:VO.DialogWindow.EndDialog(XSharp.__Usual)">
      <summary>
            Remove this dialog window from view (passing control back to the routine which created the dialog window) and post a result code indicating how it was closed.
        </summary>
      <param name="iResult">The result code that should be posted. The default is 0.</param>
    </member>
    <member name="M:VO.DialogWindow.ExecModal">
      <summary>
            Allows the programmer greater control over Windows message handling in dialog windows.
        </summary>
    </member>
    <member name="M:VO.DialogWindow.ListBoxClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item in a list box owned by this dialog window is double-clicked.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which list box contained the item that is double-clicked.</param>
    </member>
    <member name="M:VO.DialogWindow.ListBoxSelect(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item in a list box owned by this window is clicked.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which list box contained the item that was clicked.</param>
    </member>
    <member name="P:VO.DialogWindow.Result">
      <summary>
            A numeric result code posted by the DialogWindow:EndDialog() method returned to the system when this dialog window was closed.
        </summary>
      <value>A numeric result code posted by the DialogWindow:EndDialog() method returned to the system when this dialog window was closed.</value>
    </member>
    <member name="M:VO.DialogWindow.Show(XSharp.__Usual)">
      <summary>
            Display this window.
        </summary>
      <param name="kShowState">The constant that represents how the window is shown. Valid values are:</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.DialogWindow.ShowModal(XSharp.__Usual)">
      <summary>This is the worker method that shows the DialogWindow</summary>
      <param name="lActive">** missing parameter documentation **</param>
    </member>
    <member name="T:VO.Dimension">
      <summary>
            Create a Dimension object, which is used to describe the size of two-dimensional objects using ordered pair coordinates (width, height or x, y).
        </summary>
    </member>
    <member name="M:VO.Dimension.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a dimension.
        </summary>
      <param name="nWidth">The width of the dimension The default is 0, inherited from CLASS Pair.</param>
      <param name="nHeight">The height of the dimension. The default is 0, inherited from CLASS Pair.</param>
    </member>
    <member name="P:VO.Dimension.Height">
      <summary>
            A numeric value representing this dimension's height.
        </summary>
      <value>A numeric value representing this dimension's height.</value>
    </member>
    <member name="P:VO.Dimension.Width">
      <summary>
            A numeric value representing this dimension's width.
        </summary>
      <value>A numeric value representing this dimension's width.</value>
    </member>
    <member name="T:VO.DragDropClient">
      <summary>
            Create the client for use in a drag-and-drop operation.
        </summary>
    </member>
    <member name="M:VO.DragDropClient.#ctor(XSharp.__Usual)">
      <summary>
            Construct a drag-and-drop client.
            <br />Important! Normally, this method should not be called in your application code. Instead use Window:EnableDragDropClient(TRUE) to create a drag-and-drop client.
        </summary>
      <param name="oOwner">The window that owns this drag-and-drop client.</param>
    </member>
    <member name="M:VO.DragDropClient.Dispatch(XSharp.__Usual)"></member>
    <member name="M:VO.DragDropClient.DragLeave(XSharp.__Usual)">
      <summary>
            Notify the application that the mouse has left the client area of the window that owns the drag-and-drop client.
        </summary>
      <param name="oEvent">An empty event maintaining the protocol requirement that an event handler has exactly one event as its argument.</param>
    </member>
    <member name="M:VO.DragDropClient.DragOver(XSharp.__Usual)">
      <summary>
            Notify the application of a DragOver event and accept or reject the drop.
        </summary>
      <param name="oDragEvent">The drag event that determines the position of the mouse (in canvas coordinates), aswell as the number and names of files, in the drag-and-drop load.</param>
      <returns>
            The client can refuse a drag-and-drop operation by returning FALSE from this method (usually because a certain file type is not accepted). Windows then changes the pointer to a no-entry sign. The method returns TRUE if a drop is accepted.
        </returns>
    </member>
    <member name="M:VO.DragDropClient.Drop(XSharp.__Usual)">
      <summary>
            Retrieve information about a load from the drag event and act on each file in the selection.
        </summary>
      <param name="oDragEvent">The drag event that determines the position of the mouse (in canvas coordinates), as well as the number and names of files, in the drag-and-drop load.</param>
    </member>
    <member name="T:VO.DragDropServer">
      <summary>
            Create the server for use in a drag-and-drop operation.
        </summary>
    </member>
    <member name="M:VO.DragDropServer.#ctor(XSharp.__Usual)">
      <summary>
            Construct a drag-and-drop server.
            <br />Important! Normally, this method should not be called in your application code. Instead use Window:EnableDragDropServer(TRUE) to make the window a drag-and-drop server.
        </summary>
      <param name="oOwner">The window that owns this drag-and-drop server.</param>
    </member>
    <member name="M:VO.DragDropServer.StartDrag(XSharp.__Usual)">
      <summary>
            Notify the GUI that a drag-and-drop operation has started.
        </summary>
      <param name="acFilesToDrag">An array of file names to drag.</param>
      <returns>
            TRUE if the drop was successful; otherwise, FALSE (for example, if the user dropped the files on a non-drag-and-drop client).
        </returns>
    </member>
    <member name="T:VO.DragEvent">
      <summary>
            Provide information about a drag event, which enables the drag-and-drop client (the receiving window) to track the progress of the mouse during the drag operation and to identify the files that the user can drop.
        </summary>
    </member>
    <member name="M:VO.DragEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.DragEvent.Control">
      <summary>
            A control object returning the control whenever a drop-and-drag event has occurred inside a control with WS_EX_ACCEPTFILES set. If WS_EX_ACCEPTFILES is TRUE, the control accepts files and triggers a call to its parent Drop() method.
        </summary>
      <value>A control object returning the control whenever a drop-and-drag event has occurred inside a control with WS_EX_ACCEPTFILES set. If WS_EX_ACCEPTFILES is TRUE, the control accepts files and triggers a call to its parent Drop() method.</value>
    </member>
    <member name="P:VO.DragEvent.FileCount">
      <summary>
            A numeric value representing the number of files in the drag-and-drop load that generated this drag event.
        </summary>
      <value>A numeric value representing the number of files in the drag-and-drop load that generated this drag event.</value>
    </member>
    <member name="M:VO.DragEvent.FileName(XSharp.__Usual)">
      <summary>
            Return the name of a specified file in the drag-and-drop load that generated this drag event.
        </summary>
      <param name="nfile">The position of the desired file in the drag-and-drop load array; file numbers in this array start at 1 (see DragEvent:FileCount).</param>
    </member>
    <member name="P:VO.DragEvent.Origin">
      <summary>
            A point representing the location of the mouse in canvas coordinates at the time this drag event was generated.
        </summary>
      <value>A point representing the location of the mouse in canvas coordinates at the time this drag event was generated.</value>
    </member>
    <member name="T:VO.DrawObject">
      <summary>
            Provide the base class from which all X# DrawObject objects are subclassed.
        </summary>
    </member>
    <member name="M:VO.DrawObject.#ctor(XSharp.__Usual)">
      <summary>
            Construct a DrawObject object.
        </summary>
      <param name="oPoint">The origin of the DrawObject object in canvas coordinates.</param>
    </member>
    <member name="P:VO.DrawObject.BoundingBox">
      <summary>
            A bounding box representing the smallest rectangle (in the owner window's canvas coordinates) which encloses this DrawObject object.
        </summary>
      <value>A bounding box representing the smallest rectangle (in the owner window's canvas coordinates) which encloses this DrawObject object.</value>
    </member>
    <member name="M:VO.DrawObject.Destroy">
      <summary>
            Provide a method to de-instantiate a DrawObject object.
        </summary>
    </member>
    <member name="M:VO.DrawObject.Draw">
      <summary>
            Display a DrawObject object.
        </summary>
    </member>
    <member name="M:VO.DrawObject.Handle(XSharp.__Usual)">
      <summary>
            Return the handle for a DrawObject object.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle to the device context for the window on which the object is to be drawn. X# will release this handle when necessary. You should not save it to a variable.
        </returns>
    </member>
    <member name="M:VO.DrawObject.HitTest(XSharp.__Usual)">
      <summary>
            Determine if a given point lies within the bounding box of a DrawObject object.
        </summary>
      <param name="oPoint">The point to test for inclusion.</param>
      <returns>
            TRUE if the point lies within the bounding box of the DrawObject object; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DrawObject.Origin">
      <summary>
            A point representing the origin of this DrawObject object in canvas coordinates.
        </summary>
      <value>A point representing the origin of this DrawObject object in canvas coordinates.</value>
    </member>
    <member name="P:VO.DrawObject.RasterOperation">
      <summary>
            A constant, indicating the raster operation in use for this DrawObject object:
        </summary>
      <value>A constant, indicating the raster operation in use for this DrawObject object:</value>
    </member>
    <member name="P:VO.DrawObject.Size">
      <summary>
            A dimension representing the size of this DrawObject object.
        </summary>
      <value>A dimension representing the size of this DrawObject object.</value>
    </member>
    <member name="T:VO.Edit">
      <summary>
            Provide the base class from which all X# edit controls are subclassed.
        </summary>
    </member>
    <member name="M:VO.Edit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an edit control.
        </summary>
      <param name="oOwner">The window that owns the edit control.</param>
      <param name="xID">The ID of the edit control.</param>
      <param name="oPoint">The origin of the edit control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the edit control in canvas coordinates.</param>
      <param name="kStyle">The style of the edit control, specified as one of the following constants:</param>
      <param name="nResourceID">The resource ID of the edit control.</param>
    </member>
    <member name="M:VO.Edit.CanUndo">
      <summary>
            Determine if the Edit:Undo() method can be called for this edit control.
        </summary>
      <returns>
            TRUE if Edit:Undo() can be invoked; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.Edit.Caption">
      <summary>
            Caption text is not displayed for single-line or multiline edit controls. It can be used to store general text information.
        </summary>
      <value>Caption text is not displayed for single-line or multiline edit controls. It can be used to store general text information.</value>
    </member>
    <member name="M:VO.Edit.Clear">
      <summary>
            Delete the current selection in this edit control.
        </summary>
    </member>
    <member name="M:VO.Edit.Copy">
      <summary>
            Copy the current selection in this edit control to the clipboard.
        </summary>
    </member>
    <member name="M:VO.Edit.Cut">
      <summary>
            Delete the current selection in this edit control and copy it to the clipboard.
        </summary>
    </member>
    <member name="P:VO.Edit.Margins">
      <summary>
            A Dimension object specifying the left and right margins of the edit control.
        </summary>
      <value>A Dimension object specifying the left and right margins of the edit control.</value>
    </member>
    <member name="P:VO.Edit.Modified">
      <summary>
            A logical value indicating whether an editable control is in the process of being modified.
        </summary>
      <value>A logical value indicating whether an editable control is in the process of being modified.</value>
    </member>
    <member name="M:VO.Edit.Paste(XSharp.__Usual)">
      <summary>
            Replace the current selection in this edit control with a string, if specified, or the contents of the clipboard.
        </summary>
      <param name="cNewString">The text to be placed in the edit control. If not specified, the contents of the clipboard is used.</param>
    </member>
    <member name="P:VO.Edit.ReadOnly">
      <summary>
            A logical value specifying the read-only state of an edit control.
        </summary>
      <value>A logical value specifying the read-only state of an edit control.</value>
    </member>
    <member name="P:VO.Edit.SelectedText">
      <summary>
            A string representing the text that is currently selected in this edit control.
        </summary>
      <value>A string representing the text that is currently selected in this edit control.</value>
    </member>
    <member name="P:VO.Edit.Selection">
      <summary>
            The position of the cursor in the edit control.
        </summary>
      <value>The position of the cursor in the edit control.</value>
    </member>
    <member name="P:VO.Edit.TextLimit">
      <summary>
            A numeric value representing the maximum number of characters this edit control can hold.
        </summary>
      <value>A numeric value representing the maximum number of characters this edit control can hold.</value>
    </member>
    <member name="P:VO.Edit.TextValue">
      <summary>
            A string representing the value held in the control.
        </summary>
      <value>A string representing the value held in the control.</value>
    </member>
    <member name="M:VO.Edit.Undo">
      <summary>
            Undo the last modification to the text in this edit control.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.EditFocusChangeEvent">
      <summary>
            Provide information about an EditFocusChangeEvent, generated when an edit control (i.e., SingleLineEdit, MultiLineEdit, or EditWindow) gains or loses the keyboard focus.
        </summary>
    </member>
    <member name="M:VO.EditFocusChangeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.EditFocusChangeEvent.GotFocus">
      <summary>
            A logical value representing whether an edit control has either just gained keyboard focus (TRUE) or has just lost it (FALSE).
        </summary>
      <value>A logical value representing whether an edit control has either just gained keyboard focus (TRUE) or has just lost it (FALSE).</value>
    </member>
    <member name="T:VO.EditWindow">
      <summary>
            Create an edit control as part of the Window hierarchy, thereby allowing the behavior of the edit control to be customized using event handlers.
        </summary>
    </member>
    <member name="M:VO.EditWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create an edit window.
        </summary>
      <param name="oOwner">The window that owns the edit window.</param>
      <param name="xID">The ID of the edit window.</param>
      <param name="oPoint">The origin of the edit window in canvas coordinates.</param>
      <param name="oDimension">The dimension of the edit window in canvas coordinates.</param>
      <param name="nResourceID">The resource ID of the edit window.</param>
    </member>
    <member name="M:VO.EditWindow.AsString">
      <summary>
            Return the contents of the edit window.
        </summary>
    </member>
    <member name="M:VO.EditWindow.Clear">
      <summary>
            Delete the current selection in this edit window.
        </summary>
    </member>
    <member name="M:VO.EditWindow.Copy">
      <summary>
            Copy the text that is currently selected in an edit window to the clipboard.
        </summary>
    </member>
    <member name="M:VO.EditWindow.Cut">
      <summary>
            Delete the text that is currently selected in an edit window and copy it to the clipboard.
        </summary>
    </member>
    <member name="P:VO.EditWindow.Font"></member>
    <member name="M:VO.EditWindow.GetLine(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Get a specified line of text in this edit window.
        </summary>
      <param name="nLineNumber">The position of the desired line in the edit window. Specify one of the following values:</param>
      <param name="Value">Position</param>
      <param name="0">The current line in the edit window (that is, the line currently containing the text cursor). This is the default.</param>
      <param name="1">The first line in the edit window.</param>
      <param name="n">The nth line in the edit window.</param>
      <param name="nMaxLength">The maximum length that you expect the string to be in any language. If not specified, the system substitutes 255. If it is set too low, Windows truncates the resource string.</param>
      <returns>
            The text of the specified line.
        </returns>
    </member>
    <member name="P:VO.EditWindow.Length">
      <summary>
            A numeric value representing the number of characters in this edit window.
        </summary>
      <value>A numeric value representing the number of characters in this edit window.</value>
    </member>
    <member name="P:VO.EditWindow.LineCount">
      <summary>
            A numeric value representing the number of text lines in this edit window.
        </summary>
      <value>A numeric value representing the number of text lines in this edit window.</value>
    </member>
    <member name="M:VO.EditWindow.LineDown">
      <summary>
            Scroll the text in this edit window down by a single line.
        </summary>
    </member>
    <member name="M:VO.EditWindow.LineUp">
      <summary>
            Scroll the text in this edit window up by a single line.
        </summary>
    </member>
    <member name="M:VO.EditWindow.PageDown">
      <summary>
            Scroll the text in this edit window down by a single page.
        </summary>
    </member>
    <member name="M:VO.EditWindow.PageUp">
      <summary>
            Scroll the text in this edit window up by a single page.
        </summary>
    </member>
    <member name="M:VO.EditWindow.Paste(XSharp.__Usual)">
      <summary>
            Replace the text that is currently selected in an edit window with the contents of the clipboard.
        </summary>
      <param name="cNewString">The text to be placed in the edit window. If not specified, the contents of the clipboard is used.</param>
    </member>
    <member name="M:VO.EditWindow.ScrollHorizontal(XSharp.__Usual)">
      <summary>
            Scroll the current line in this edit window a specified number of characters to the right or left.
        </summary>
      <param name="nChars">The number of characters to scroll. Positive values scroll to the right; negative values to the left.</param>
    </member>
    <member name="M:VO.EditWindow.ScrollVertical(XSharp.__Usual)">
      <summary>
            Scroll the current line in this edit window up or down a specified number of lines.
        </summary>
      <param name="nLines">The number of lines to scroll. Positive values scroll up; negative values down.</param>
    </member>
    <member name="P:VO.EditWindow.Selection">
      <summary>
            A Selection object, representing the currently selected text in the edit window.
        </summary>
      <value>A Selection object, representing the currently selected text in the edit window.</value>
    </member>
    <member name="P:VO.EditWindow.TextLimit">
      <summary>
            A numeric value representing the maximum number of characters the edit window can hold.
        </summary>
      <value>A numeric value representing the maximum number of characters the edit window can hold.</value>
    </member>
    <member name="P:VO.EditWindow.TextValue">
      <summary>
            A string representing the value held in the edit window.
        </summary>
      <value>A string representing the value held in the edit window.</value>
    </member>
    <member name="M:VO.EditWindow.Undo">
      <summary>
            Undo the last modification to the text in this edit window.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.EditWindow.Value">
      <summary>
            The value held in the edit field in whatever data type the edit window holds.
        </summary>
      <value>The value held in the edit field in whatever data type the edit window holds.</value>
    </member>
    <member name="T:VO.EllipseObject">
      <summary>
            Create an EllipseObject object; this type of entity is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various objects.
        </summary>
    </member>
    <member name="M:VO.EllipseObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an EllipseObject object.
        </summary>
      <param name="oPoint">The position of the EllipseObject object in canvas coordinates.</param>
      <param name="oDimension">The dimension of the EllipseObject object in canvas coordinates.</param>
      <param name="oPen">The pen used to draw the EllipseObject object. By default, the current pen is used.</param>
      <param name="oBrush">The brush used to fill the EllipseObject object. By default, the current brush is used.</param>
    </member>
    <member name="M:VO.EllipseObject.Draw">
      <summary>
            Draw this EllipseObject object.
        </summary>
    </member>
    <member name="T:VO.ErrorBox">
      <summary>
            Present the user with an error message box.
        </summary>
    </member>
    <member name="M:VO.ErrorBox.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an error message box.
        </summary>
      <param name="uParent">The window that owns the error box. If no owner is specified, the error box is application modal (i.e., the application is suspended until the user acknowledges the error box).</param>
      <param name="uText">The description to be displayed in the error box. If no text is specified, the system-defined 'Error!' error message text is used.</param>
      <param name="oHyperLabel">The hyperlabel containing a description (HyperLabel:Description) to be displayed in the error box.</param>
    </member>
    <member name="T:VO.Event">
      <summary>
            Provide the base class from which all X# events are subclassed.
        </summary>
    </member>
    <member name="M:VO.Event.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.Event.Handle">
      <summary>
            The pointer to the window where the event occurred
        </summary>
      <value>The pointer to the window where the event occurred</value>
    </member>
    <member name="F:VO.Event.hWnd"></member>
    <member name="F:VO.Event.lParam"></member>
    <member name="P:VO.Event.Message">
      <summary>
            A dword representing the Windows API message associated with the given event.
        </summary>
      <value>A dword representing the Windows API message associated with the given event.</value>
    </member>
    <member name="F:VO.Event.oWindow"></member>
    <member name="F:VO.Event.uMsg"></member>
    <member name="P:VO.Event.Window">
      <summary>
            An object indicating the window or control in which the event occurred. This is helpful, for example, for distinguishing between similar menu events coming from the same context menu attached to different controls.
        </summary>
      <value>An object indicating the window or control in which the event occurred. This is helpful, for example, for distinguishing between similar menu events coming from the same context menu attached to different controls.</value>
    </member>
    <member name="F:VO.Event.wParam"></member>
    <member name="T:VO.EventContext">
      <summary>
            Provide the base class from which all X# event-handling classes are subclassed, embodying the elements needed by any objects that receive events.
        </summary>
    </member>
    <member name="M:VO.EventContext.#ctor">
      <summary>
            Construct an event context.
        </summary>
    </member>
    <member name="M:VO.EventContext.Destroy">
      <summary>
            Destroy the event context permanently.
        </summary>
    </member>
    <member name="M:VO.EventContext.Override">
      <summary>This is a compatibility method that is no longer used or needed.</summary>
    </member>
    <member name="T:VO.ExplorerWindow">
      <summary>
            Create an explorer window.
        </summary>
    </member>
    <member name="M:VO.ExplorerWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an ExplorerWindow object.
        </summary>
      <param name="oOwner">The window that owns the explorer window.</param>
      <param name="lLabels">A logical value that is TRUE if you want to create a four-pane explorer window (a four-pane explorer window contains 'labels', or fixed text controls) and FALSE if you want to create a two-pane explorer window. If omitted, the default is TRUE.</param>
      <param name="symTreeViewClassName">The symbolic name of the TreeView class.</param>
      <param name="symListViewClassName">The symbolic name of the ListView class.</param>
    </member>
    <member name="M:VO.ExplorerWindow.Destroy">
      <summary>
            Provide a method to free memory resources allocated for a ChildAppWindow object and its derived objects.
        </summary>
      <returns>
            NIL
        </returns>
    </member>
    <member name="P:VO.ExplorerWindow.LabelLeft">
      <summary>
            The left fixed text control in a four-pane explorer window. In a two-pane explorer window, this returns NULL_OBJECT.
        </summary>
      <value>The left fixed text control in a four-pane explorer window. In a two-pane explorer window, this returns NULL_OBJECT.</value>
    </member>
    <member name="P:VO.ExplorerWindow.LabelRight">
      <summary>
            The right fixed text control in a four-pane explorer window. In a two-pane explorer window, this returns NULL_OBJECT.
        </summary>
      <value>The right fixed text control in a four-pane explorer window. In a two-pane explorer window, this returns NULL_OBJECT.</value>
    </member>
    <member name="P:VO.ExplorerWindow.ListView">
      <summary>
            The list view control in a two- or four-pane explorer window.
        </summary>
      <value>The list view control in a two- or four-pane explorer window.</value>
    </member>
    <member name="M:VO.ExplorerWindow.ListViewColumnClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a list view column header is clicked in a list view control.
        </summary>
      <param name="oListViewColumnClickEvent">The ListViewColumnClickEvent object that describes which list view column of which list view control was clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="P:VO.ExplorerWindow.TreeView">
      <summary>
            The tree view control in a two- or four-pane explorer window.
        </summary>
      <value>The tree view control in a two- or four-pane explorer window.</value>
    </member>
    <member name="T:VO.ExposeEvent">
      <summary>
            Provide information about an ExposeEvent, used to notify a window that it may need to be repainted.
        </summary>
    </member>
    <member name="M:VO.ExposeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ExposeEvent.ExposedArea">
      <summary>
            A bounding box—in canvas coordinates—representing the exposed area that caused this expose event.
            Use this method to optimize your repainting routines so that they paint only the area which requires refreshing.
        </summary>
      <value>
            A bounding box—in canvas coordinates—representing the exposed area that caused this expose event.
            Use this method to optimize your repainting routines so that they paint only the area which requires refreshing.
        </value>
    </member>
    <member name="T:VO.FixedBitmap">
      <summary>
            Create a FixedBitmap object. Unlike the bitmaps created by the Bitmap class, fixed bitmaps are static—they do not need to be redisplayed every time an ExposeEvent occurs. FixedBitmap objects can be created dynamically or from a resource entity.
        </summary>
    </member>
    <member name="M:VO.FixedBitmap.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a FixedBitmap object.
        </summary>
      <param name="uOwner">The window that owns the fixed bitmap.</param>
      <param name="uID">The ID of the fixed bitmap.</param>
      <param name="uPoint">The origin of the fixed bitmap in canvas coordinates.</param>
      <param name="uDimension">The dimension of the fixed bitmap in canvas coordinates.</param>
      <param name="uResID">Resource ID object or numeric resource ID for the bitmap image to be associated with this FixedBitmap static control.</param>
      <param name="oResourceID">The ResourceID object of the fixed bitmap or the resource ID of the fixed bitmap.</param>
    </member>
    <member name="M:VO.FixedBitmap.AsString">
      <summary>
            Return the identifying label of the fixed bitmap.
        </summary>
    </member>
    <member name="M:VO.FixedBitmap.SetBitmap(XSharp.__Usual)">
      <summary>
            Associate a bitmap image with the FixedBitmap static control.
        </summary>
      <param name="oBitmap">The bitmap object to associate with this static control.</param>
    </member>
    <member name="T:VO.FixedIcon">
      <summary>
            Create a FixedIcon object. Unlike the icons created by the Icon class, fixed icons are static—they do not need to be redisplayed every time an ExposeEvent occurs. FixedIcon objects can be created dynamically or from a resource entity.
        </summary>
    </member>
    <member name="M:VO.FixedIcon.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a FixedIcon object.
        </summary>
      <param name="uOwner">The window that owns the fixed icon.</param>
      <param name="uID">The ID of the fixed icon.</param>
      <param name="uPoint">The origin of the fixed icon in canvas coordinates.</param>
      <param name="uResID">The ResourceID object of the fixed icon or the resource ID of the fixed icon.</param>
    </member>
    <member name="M:VO.FixedIcon.AsString">
      <summary>
            Return the identifying label of the fixed icon.
        </summary>
    </member>
    <member name="T:VO.FixedImage">
      <summary>
            Provide the base class from which FixedBitmap and FixedIcon are subclassed.
        </summary>
    </member>
    <member name="M:VO.FixedImage.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a FixedImage control.
        </summary>
      <param name="uOwner">The window that owns the control.</param>
      <param name="uID">The unique ID of the control (between 1 and 8000).</param>
      <param name="uPoint">The origin of the control in canvas coordinates.</param>
      <param name="uDimension">The dimension of the control in canvas coordinates.</param>
      <param name="uResID">The resource ID of the control.</param>
    </member>
    <member name="M:VO.FixedImage.Destroy">
      <summary>
            Provide a method to de-instantiate a FixedImage object.
        </summary>
    </member>
    <member name="T:VO.FixedText">
      <summary>
            Create a FixedText object.
        </summary>
    </member>
    <member name="M:VO.FixedText.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a FixedText object.
        </summary>
      <param name="oOwner">The window that owns the FixedText object.</param>
      <param name="xID">The unique ID of the FixedText object.</param>
      <param name="oPoint">The origin of the FixedText object in canvas coordinates.</param>
      <param name="oDimension">The dimension of the FixedText object in canvas coordinates.</param>
      <param name="cText">The informational text to be printed in the FixedText object. The default is NULL_STRING.</param>
      <param name="lDataAware">A logical value specifying whether the FixedText object is data aware.</param>
      <param name="nResourceID">The resource ID of the FixedText object.</param>
    </member>
    <member name="M:VO.FixedText.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="F:VO.FixedText.lDrawThemeBackground"></member>
    <member name="F:VO.FixedText.lUseDrawText"></member>
    <member name="P:VO.FixedText.Margin"></member>
    <member name="M:VO.FixedText.SetDrawStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the alignment style for the text in a FixedText object.
        </summary>
      <param name="dwDrawStyle">The style to set. See table in the remarks section.</param>
      <param name="lEnable">A logical value to set the style. TRUE sets the style on, FALSE turns it off.</param>
    </member>
    <member name="M:VO.FixedText.SetStandardStyle(XSharp.__Usual)">
      <summary>
            Set the alignment style for the text in a FixedText object.
        </summary>
      <param name="kTextStyle">
            The text alignment style, specified as one of the following constants:
            <list type="Table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>FT_CENTERED</term><description>Centered text</description></item><item><term>FT_LEFTALIGN</term><description>Left-aligned text (This is the default.)</description></item><item><term>FT_RIGHTALIGN</term><description>Right-aligned text</description></item></list></param>
    </member>
    <member name="T:VO.FocusChangeEvent">
      <summary>
            Provide information about a FocusChangeEvent, used to indicate a change in window focus (i.e., gaining or losing focus).
        </summary>
    </member>
    <member name="M:VO.FocusChangeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.FocusChangeEvent.GotFocus">
      <summary>
            A logical value determining whether a window has either gained keyboard focus (TRUE) or is about to lose it (FALSE).
        </summary>
      <value>A logical value determining whether a window has either gained keyboard focus (TRUE) or is about to lose it (FALSE).</value>
    </member>
    <member name="T:VO.Font">
      <summary>
            Create a font, which describes how characters are displayed on a window.
        </summary>
    </member>
    <member name="M:VO.Font.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a font.
        </summary>
      <param name="kFont">
            The standard font to be created, specified as one of the constants in the table in the remarks section or the
            constant that indicates the font family. Specify one of the following constants:
        </param>
      <param name="oDimension">The dimension of the font in canvas coordinates or the windows point size for the font.</param>
      <param name="sTypeFace">The specific font name.</param>
    </member>
    <member name="P:VO.Font.Bold">
      <summary>
            A logical value determining whether a font is displayed in a bold typeface (TRUE if yes; otherwise, FALSE).
        </summary>
      <value>A logical value determining whether a font is displayed in a bold typeface (TRUE if yes; otherwise, FALSE).</value>
    </member>
    <member name="M:VO.Font.ConvPntToDim(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Convert a specified point size for the font into a Dimension object.
        </summary>
      <param name="nPntSize">Windows font point size.</param>
      <param name="hDCConv">Handle of the device-context for which to convert the point size. If omitted, defaults to the window canvas.</param>
      <returns>
            The Dimension object representing the specified point size.
        </returns>
    </member>
    <member name="M:VO.Font.Destroy">
      <summary>
            Provide a method to de-instantiate a Font object.
        </summary>
    </member>
    <member name="P:VO.Font.Family"></member>
    <member name="M:VO.Font.Handle">
      <summary>
            Return the handle for a font.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="P:VO.Font.Italic">
      <summary>
            A logical value determining whether a font is displayed in a italic typeface (TRUE if yes; otherwise, FALSE).
        </summary>
      <value>A logical value determining whether a font is displayed in a italic typeface (TRUE if yes; otherwise, FALSE).</value>
    </member>
    <member name="P:VO.Font.Light">
      <summary>
            A logical value determining whether a font is displayed in a light typeface (TRUE if yes; otherwise, FALSE). Light is the opposite of bold.
        </summary>
      <value>A logical value determining whether a font is displayed in a light typeface (TRUE if yes; otherwise, FALSE). Light is the opposite of bold.</value>
    </member>
    <member name="P:VO.Font.Normal">
      <summary>
            A logical value determining whether a font is displayed in a normal typeface (TRUE if yes; otherwise, FALSE).
        </summary>
      <value>A logical value determining whether a font is displayed in a normal typeface (TRUE if yes; otherwise, FALSE).</value>
    </member>
    <member name="P:VO.Font.PitchFixed">
      <summary>
            A logical value determining whether a font is displayed in a fixed pitch typeface (TRUE if yes; otherwise, FALSE).
        </summary>
      <value>A logical value determining whether a font is displayed in a fixed pitch typeface (TRUE if yes; otherwise, FALSE).</value>
    </member>
    <member name="P:VO.Font.PitchVariable">
      <summary>
            A logical value determining whether a font is displayed in a variable pitch typeface (TRUE if yes; otherwise, FALSE).
        </summary>
      <value>A logical value determining whether a font is displayed in a variable pitch typeface (TRUE if yes; otherwise, FALSE).</value>
    </member>
    <member name="P:VO.Font.Strikethru">
      <summary>
            A logical value determining whether a font is displayed in a strikethrough typeface (TRUE if yes; otherwise, FALSE). A strikethough typeface places a line through every character.
        </summary>
      <value>A logical value determining whether a font is displayed in a strikethrough typeface (TRUE if yes; otherwise, FALSE). A strikethough typeface places a line through every character.</value>
    </member>
    <member name="P:VO.Font.Underline">
      <summary>
            A logical value determining whether a font is displayed in an underline typeface (TRUE if yes; otherwise, FALSE).
        </summary>
      <value>A logical value determining whether a font is displayed in an underline typeface (TRUE if yes; otherwise, FALSE).</value>
    </member>
    <member name="T:VO.FormattedTextObject">
      <summary>
            Provide a way to format a string specifying position (origin), font, and color.
        </summary>
    </member>
    <member name="M:VO.FormattedTextObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a FormattedTextObject object.
        </summary>
      <param name="oPoint">The origin of the FormattedTextObject object in canvas coordinates. The default is Point{16, 16}.</param>
      <param name="cText">The text to be displayed in the FormattedTextObject object.</param>
      <param name="oFont">The font to be used by the FormattedTextObject object. The default is the system font.</param>
      <param name="oColor">The color to be used by the FormattedTextObject object. The default is the current window's color selection. (Refer to the Color:Init() method for details on specifying a color.)</param>
    </member>
    <member name="M:VO.FormattedTextObject.Draw">
      <summary>
            Draw a FormattedTextObject object on a window.
        </summary>
    </member>
    <member name="P:VO.FormattedTextObject.TabSize">
      <summary>
            A numeric value representing the tab size—in characters—for a FormattedTextObject object. The default tab size is 8.
        </summary>
      <value>A numeric value representing the tab size—in characters—for a FormattedTextObject object. The default tab size is 8.</value>
    </member>
    <member name="T:VO.GroupBox">
      <summary>
            Create a group box, which can be used to group related controls together.
        </summary>
    </member>
    <member name="M:VO.GroupBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a group box.
        </summary>
      <param name="oOwner">The window that owns the group box.</param>
      <param name="xID">The unique ID of the group box (between 1 and 8000).</param>
      <param name="oPoint">The origin of the group box in canvas coordinates.</param>
      <param name="oDimension">The dimension of the group box in canvas coordinates.</param>
      <param name="cText">The caption of the group box. The default is NULL_STRING.</param>
      <param name="lDataAware">A logical value specifying whether the group box is data aware.</param>
      <param name="nResourceID">The resource ID of the group box.</param>
    </member>
    <member name="M:VO.GroupBox.AsString">
      <summary>
            Return an identifying label for the group box.
        </summary>
    </member>
    <member name="P:VO.GroupBox.CurrentText">
      <summary>
            This property is provided to override the inherited functionality from the TextControl class, as it does not apply to group boxes.
        </summary>
      <value>This property is provided to override the inherited functionality from the TextControl class, as it does not apply to group boxes.</value>
    </member>
    <member name="T:VO.HelpDisplay">
      <summary>
            Create a link to the help system in use.
        </summary>
    </member>
    <member name="M:VO.HelpDisplay.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a help display to be used for a specified help database.
        </summary>
      <param name="cFileName">The file name of the help database to which this help display should be connected.</param>
      <param name="oOwnerWindow">The window object which owns this help display, if any.</param>
      <param name="lWin32Processing">When TRUE this will tell X# to use the standard WIN32 help processing </param>
    </member>
    <member name="F:VO.HelpDisplay.DefaultPageOnContents"></member>
    <member name="M:VO.HelpDisplay.HelpError">
      <summary>
            Determine if the previous HelpDisplay operation was successful.
        </summary>
      <returns>
        <para>One of the following constants, indicating the success or failure of the previously called HelpDisplay:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>HDCANTOPENFILE</term>
            <description>The help operation could not open the help database.</description>
          </item>
          <item>
            <term>HDINVALIDKEY</term>
            <description>An invalid key was used for HelpDisplay:Show().</description>
          </item>
          <item>
            <term>HDOK</term>
            <description>The operation was successful.</description>
          </item>
          <item>
            <term>HDOUTOFMEMORY</term>
            <description>
                        The operation failed due to insufficient memory or other system resources.
                    </description>
          </item>
          <item>
            <term>HDUNKNOWN</term>
            <description>It was not possible to determine why the last operation failed.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:VO.HelpDisplay.Show(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Instruct the help system to provide the help topic associated with a given keyword.
        </summary>
      <param name="cKeyword">
            The keyword to look up in the application help file. See table in the remarks section.
        </param>
      <param name="symLookupType">
            Controls the lookup type. The default is HH_KEYWORD_LOOKUP.
            Is used to call up Associative links in the help file. Associative Links are not displayed in the index, keywords are. For HTML Help only.
            The second parameter symLookupType can also be a PTR to a _winHelpInfo structure, which is sent with a WM_HELP message.
        </param>
      <returns>
            TRUE if the lookup action took place correctly; otherwise, FALSE.
            <note type="tip">A TRUE value does not imply the key was found.</note></returns>
    </member>
    <member name="F:VO.HelpDisplay.Win32Processing"></member>
    <member name="T:VO.HelpRequestEvent">
      <summary>
            Provide information about a HelpRequestEvent, used to describe the context and item combinations for which help is requested. (This can be help for controls, menu commands, and specific areas of a window.)
        </summary>
    </member>
    <member name="M:VO.HelpRequestEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.HelpRequestEvent.HelpContext">
      <summary>
            A string representing the help context ID of the control that generated this control event. This
        </summary>
      <value>A string representing the help context ID of the control that generated this control event. This</value>
    </member>
    <member name="P:VO.HelpRequestEvent.HelpInfo">
      <summary>
            A pointer to a _winHelpInfo structure if the help request is generated from a WM_HELP message otherwise Null_Ptr.
        </summary>
      <value>A pointer to a _winHelpInfo structure if the help request is generated from a WM_HELP message otherwise Null_Ptr.</value>
    </member>
    <member name="P:VO.HelpRequestEvent.HelpType">
      <summary>
            A constant, indicating the type of item—menu, control, or window area—for which help was requested:
        </summary>
      <value>A constant, indicating the type of item—menu, control, or window area—for which help was requested:</value>
    </member>
    <member name="P:VO.HelpRequestEvent.HyperLabel">
      <summary>
            The hyperlabel connected to the help request event.
        </summary>
      <value>The hyperlabel connected to the help request event.</value>
    </member>
    <member name="P:VO.HelpRequestEvent.ItemID">
      <summary>
            A numeric value representing the ID of the item that the user has requested help on.
        </summary>
      <value>A numeric value representing the ID of the item that the user has requested help on.</value>
    </member>
    <member name="P:VO.HelpRequestEvent.Position">
      <summary>
            The location of the mouse pointer in canvas coordinates.
        </summary>
      <value>The location of the mouse pointer in canvas coordinates.</value>
    </member>
    <member name="P:VO.HelpRequestEvent.WindowRegion">
      <summary>
            A constant, indicating in which window area the help pointer was located when this HelpRequestEvent was generated:
        </summary>
      <value>A constant, indicating in which window area the help pointer was located when this HelpRequestEvent was generated:</value>
    </member>
    <member name="T:VO.HorizontalScrollBar">
      <summary>
            Create a horizontal scroll bar that is independent of its owner window.
        </summary>
    </member>
    <member name="M:VO.HorizontalScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a horizontal scroll bar.
        </summary>
      <param name="oOwner">The window that owns the horizontal scroll bar.</param>
      <param name="xID">The unique ID of the horizontal scroll bar (between 1 and 8000).</param>
      <param name="oPoint">The origin of the horizontal scroll bar in canvas coordinates.</param>
      <param name="oDimension">The dimension of the horizontal scroll bar in canvas coordinates.</param>
      <param name="nResourceID">The resource ID of the horizontal scroll bar.</param>
    </member>
    <member name="T:VO.HorizontalSelectionSlider">
      <summary>
            Create a horizontal selection slider control.
        </summary>
    </member>
    <member name="M:VO.HorizontalSelectionSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a horizontal selection slider.
        </summary>
      <param name="oOwner">The window that owns the horizontal selection slider.</param>
      <param name="xID">The unique ID of the horizontal selection slider (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of horizontal selection slider.</param>
      <param name="oPoint">The origin of the horizontal selection slider in canvas coordinates.</param>
      <param name="oDimension">The dimension of the horizontal selection slider in canvas coordinates.</param>
    </member>
    <member name="T:VO.HorizontalSlider">
      <summary>
            Create a horizontal slider control.
        </summary>
    </member>
    <member name="M:VO.HorizontalSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a horizontal slider.
        </summary>
      <param name="oOwner">The window that owns the horizontal slider.</param>
      <param name="xID">The unique ID of the horizontal slider (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of horizontal slider.</param>
      <param name="oPoint">The origin of the horizontal slider in canvas coordinates.</param>
      <param name="oDimension">The dimension of the horizontal slider in canvas coordinates.</param>
    </member>
    <member name="T:VO.HorizontalSpinner">
      <summary>
            Create a spinner with horizontal arrow buttons.
        </summary>
    </member>
    <member name="M:VO.HorizontalSpinner.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a horizontal spinner.
        </summary>
      <param name="oOwner">The window that owns the horizontal spinner.</param>
      <param name="xID">The unique ID of the horizontal spinner (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of the horizontal spinner.</param>
      <param name="oPoint">The origin of the horizontal spinner in canvas coordinates.</param>
      <param name="oDimension">The dimension of the horizontal spinner in canvas coordinates.</param>
      <param name="kStyle">The style of the horizontal spinner.</param>
    </member>
    <member name="T:VO.HotKey">
      <summary>
            Create a hot key.
        </summary>
    </member>
    <member name="M:VO.HotKey.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a hot key.
        </summary>
      <param name="bKey">The virtual key code for the hot key.</param>
      <param name="lAlt">Specifies that the Alt key is to be used for the hot key.</param>
      <param name="lCtl">Specifies that the Ctl key is to be used for the hot key.</param>
      <param name="lShift">Specifies that the Shift key is to be used for the hot key.</param>
      <param name="lExt">Specifies that the extended key—the keys on the numeric key pad—is to be used for the hot key. </param>
    </member>
    <member name="P:VO.HotKey.AltKey">
      <summary>
            A logical value that is TRUE if the Alt key is valid for the hot key.
        </summary>
      <value>A logical value that is TRUE if the Alt key is valid for the hot key.</value>
    </member>
    <member name="P:VO.HotKey.CtrlKey">
      <summary>
            A logical value that is TRUE if the Ctrl key is valid for the hot key.
        </summary>
      <value>A logical value that is TRUE if the Ctrl key is valid for the hot key.</value>
    </member>
    <member name="P:VO.HotKey.ExtendedKey">
      <summary>
            A logical value that is TRUE if an extended key is valid for the hot key.
        </summary>
      <value>A logical value that is TRUE if an extended key is valid for the hot key.</value>
    </member>
    <member name="P:VO.HotKey.Key">
      <summary>
            A virtual key code for the hot key.
        </summary>
      <value>A virtual key code for the hot key.</value>
    </member>
    <member name="P:VO.HotKey.ShiftKey">
      <summary>
            A logical value that is TRUE if the Shift key is valid for the hot key.
        </summary>
      <value>A logical value that is TRUE if the Shift key is valid for the hot key.</value>
    </member>
    <member name="T:VO.HotKeyEdit">
      <summary>
            Create a hot key edit.
        </summary>
    </member>
    <member name="M:VO.HotKeyEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a hot key edit.
        </summary>
      <param name="oOwner">The window that owns the hot key edit.</param>
      <param name="xID">The unique ID of the hot key edit (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of the hot key edit.</param>
      <param name="oPoint">The origin of the hot key edit in canvas coordinates.</param>
      <param name="oDimension">The dimension of the hot key edit in canvas coordinates.</param>
      <param name="kStyle">The style of the hot key edit.</param>
    </member>
    <member name="M:VO.HotKeyEdit.ApplyHotKey(XSharp.__Usual)">
      <summary>
            Apply the HotKey object associated with this control to a particular window.
        </summary>
      <param name="oWindow">The window to which the HotKey object will be applied.</param>
      <returns>
            A numeric value indicating the result of applying the HotKey object to the window. The result can be one of the following values:
            <list><listheader><term>Value</term><description>Result</description></listheader><item><term>-1</term><description>The operation was unsuccessful because the HotKey object is invalid.</description></item><item><term>0</term><description>The operation was unsuccessful because the window is invalid.</description></item><item><term>1</term><description>The operation was successful, and no other window has the same HotKey object.</description></item><item><term>2</term><description>The operation was successful, but another window already has the same HotKey object.</description></item></list></returns>
    </member>
    <member name="M:VO.HotKeyEdit.Create">
      <summary>
            Creates the underlying window control for a X# hot key edit object.
        </summary>
      <returns>
            The window handle of the control, if successful. A null handle (NULL_PTR) is returned if the control creation failed.
        </returns>
    </member>
    <member name="P:VO.HotKeyEdit.HotKey">
      <summary>
            The HotKey object associated with this hot key edit.
        </summary>
      <value>The HotKey object associated with this hot key edit.</value>
    </member>
    <member name="P:VO.HotKeyEdit.Rule">
      <summary>
            The HotKeyRule object associated with this hot key edit.
        </summary>
      <value>The HotKeyRule object associated with this hot key edit.</value>
    </member>
    <member name="T:VO.HotKeyRule">
      <summary>
            Create a hot key rule.
        </summary>
    </member>
    <member name="P:VO.HotKeyRule.AltKeyInvalid">
      <summary>
            A logical value that is TRUE if the Alt key is invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if the Alt key is invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.CtrlAltKeysInvalid">
      <summary>
            A logical value that is TRUE if the Ctrl+Alt key combination is invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if the Ctrl+Alt key combination is invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.CtrlKeyInvalid">
      <summary>
            A logical value that is TRUE if the Ctrl key is invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if the Ctrl key is invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.ShiftAltKeysInvalid">
      <summary>
            A logical value that is TRUE if the Shift+Alt key combination is invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if the Shift+Alt key combination is invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.ShiftCtrlAltKeysInvalid">
      <summary>
            A logical value that is TRUE if the Shift+Alt+Ctrl key combination is invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if the Shift+Alt+Ctrl key combination is invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.ShiftCtrlKeysInvalid">
      <summary>
            A logical value that is TRUE if the Shift+Ctrl key combination is invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if the Shift+Ctrl key combination is invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.ShiftKeyInvalid">
      <summary>
            A logical value that is TRUE if the Shift key is invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if the Shift key is invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.UnmodifiedKeysInvalid">
      <summary>
            A logical value that is TRUE if unmodified key combinations (no Shift, Alt, or Ctrl keys) are invalid for the HotKey object.
        </summary>
      <value>A logical value that is TRUE if unmodified key combinations (no Shift, Alt, or Ctrl keys) are invalid for the HotKey object.</value>
    </member>
    <member name="P:VO.HotKeyRule.UseAltKeyOnInvalid">
      <summary>
            A logical value that is TRUE if the Alt key is to be used when an invalid key combination is entered into the hot key edit.
        </summary>
      <value>A logical value that is TRUE if the Alt key is to be used when an invalid key combination is entered into the hot key edit.</value>
    </member>
    <member name="P:VO.HotKeyRule.UseCtrlKeyOnInvalid">
      <summary>
            A logical value that is TRUE if the Ctrl key is to be used when an invalid key combination is entered into the hot key edit.
        </summary>
      <value>A logical value that is TRUE if the Ctrl key is to be used when an invalid key combination is entered into the hot key edit.</value>
    </member>
    <member name="P:VO.HotKeyRule.UseExtendedKeyOnInvalid">
      <summary>
            A logical value that is TRUE if an extended key is to be used when an invalid key combination is entered into the hot key edit.
        </summary>
      <value>A logical value that is TRUE if an extended key is to be used when an invalid key combination is entered into the hot key edit.</value>
    </member>
    <member name="P:VO.HotKeyRule.UseShiftKeyOnInvalid">
      <summary>
            A logical value that is TRUE if the Shift key is to be used when an invalid key combination is entered into the hot key edit.
        </summary>
      <value>A logical value that is TRUE if the Shift key is to be used when an invalid key combination is entered into the hot key edit.</value>
    </member>
    <member name="T:VO.HyperLink">
      <summary>
            Create a HyperLink control.
        </summary>
    </member>
    <member name="M:VO.HyperLink.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a HyperLink control.
        </summary>
      <param name="oOwner">The window that owns the HyperLink.</param>
      <param name="xID">The unique ID of the HyperLink control (between 1 and 8000).</param>
      <param name="oPoint">The origin of the HyperLink control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the HyperLink control in canvas coordinates.</param>
      <param name="cText">The string that is to be displayed on screen.</param>
    </member>
    <member name="M:VO.HyperLink.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="M:VO.HyperLink.OpenLink">
      <summary>
            Is the method that is invoked whenever the mouse is clicked over the HyperLink control.
        </summary>
    </member>
    <member name="T:VO.Icon">
      <summary>
            Create an icon, which is a small bitmap that the system displays for a window when it is iconized in its owner window.
        </summary>
    </member>
    <member name="M:VO.Icon.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an icon.
        </summary>
      <param name="xResourceID">The resource ID of the desired icon, a handle of an existing Icon object or one of the icon constants from the table below</param>
      <param name="kLoadOption">The optional constant representing the load option. The default is LR_DEFAULTCOLOR.</param>
      <param name="iWidth">The optional width of the bitmap. The default is the width of the bitmap.</param>
      <param name="iHeight">The optional height of the bitmap. The default is the height of the bitmap.</param>
    </member>
    <member name="M:VO.Icon.Destroy">
      <summary>
            Provide a method to de-instantiate an Icon object.
        </summary>
    </member>
    <member name="M:VO.Icon.Handle">
      <summary>
            Return the handle for an icon.
        </summary>
      <param name="nHandleType">
            The type of handle required. Zero (0) is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="T:VO.ImageList">
      <summary>
            Create an image list.
        </summary>
    </member>
    <member name="M:VO.ImageList.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an image list object.
        </summary>
      <param name="nImages">The number of images this image list will contain.</param>
      <param name="oDimension">A Dimension object representing the size of the images in the image list.</param>
      <param name="oImage">Add an Icon or Bitmap object to the ImageList.</param>
      <param name="wColor">The color mask to use. This is a Set of bit flags that specify the type of image list to create. This parameter can be a combination of the following values, but it can include only one of the ILC_COLOR values.</param>
      <param name="nGrow">This is the number of images by which the image list can grow when the system needs to make room for new images.</param>
    </member>
    <member name="M:VO.ImageList.Add(XSharp.__Usual)">
      <summary>
            Add an icon or bitmap to the image list.
        </summary>
      <param name="oImage">The icon or bitmap to add to the image list.</param>
      <returns>
            The image list index of the added image.
        </returns>
    </member>
    <member name="M:VO.ImageList.AddMask(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Adds an image or images to an image list and generates a mask from the specified bitmap.
        </summary>
      <param name="oBitmap">The bitmap object to use for the ImageList mask.</param>
      <param name="oMaskColor">The color of the mask.</param>
      <returns>
            The index of the first new image, if successful; otherwise, -1.
        </returns>
    </member>
    <member name="M:VO.ImageList.BeginDrag(XSharp.__Usual)">
      <summary>
            Begin a drag operation on an image list.
        </summary>
      <param name="nIndex">The image list index of the image to be dragged. If omitted, the first image in the image list is used.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ImageList.CreateOverlayImage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create an overlay image from an image in an image list.
        </summary>
      <param name="nListIndex">The image list index of the image from which to create an overlay image.</param>
      <param name="nImageIndex">The index of the new overlay image. This can be a value from 1 to 4. If omitted, the new overlay image will be the first in the list.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ImageList.DragEnter(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Starts a drag-and-drop operation at the given position in the given window.
        </summary>
      <param name="oPoint">** missing parameter documentation **</param>
      <param name="oWindow">** missing parameter documentation **</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ImageList.DragLeave">
      <summary>
            Ends a drag-and-drop operation.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ImageList.DragMove(XSharp.__Usual)">
      <summary>
            Drag an image list to the specified position.
        </summary>
      <param name="oPoint">The point to which to drag the image list.</param>
      <param name="oWindow">The window over which the image list is to be dragged.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ImageList.EndDrag">
      <summary>
            End a drag operation on an image list.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ImageList.Handle">
      <summary>
            Return the Windows handle of the image list, which can be used in Windows.
        </summary>
      <returns>
            The handle (a pointer) of the image list.
        </returns>
    </member>
    <member name="P:VO.ImageList.ImageCount">
      <summary>
            The number of images in the ImageList object.
        </summary>
      <value>The number of images in the ImageList object.</value>
    </member>
    <member name="T:VO.InfoBox">
      <summary>
            Present the user with informational message box.
        </summary>
    </member>
    <member name="M:VO.InfoBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an information message box.
        </summary>
      <param name="uParent">The window that owns the information box. If omitted, the default owner is the Windows desktop.</param>
      <param name="uCaption">The caption text to be displayed in the title bar of the information box. If omitted, the default is 'Info Box'.</param>
      <param name="uText">
            The informational text to be printed in the information box when it is shown or the hyperlabel containing a caption and description for the information box.
            If omitted, the default is NULL_STRING.
        </param>
    </member>
    <member name="T:VO.IPAddress">
      <summary>
            Edit control to edit an IP address that consists of 4 numbers
        </summary>
    </member>
    <member name="M:VO.IPAddress.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an IPAddress object.
        </summary>
      <param name="oOwner">The window that owns the IPAddress object.</param>
      <param name="xID">The unique ID for the IPAddress object (between 1 and 8000).</param>
      <param name="oPoint">The origin of the IPAddress object in canvas coordinates.</param>
      <param name="oDimension">The dimension of the IPAddress object in canvas coordinates.</param>
      <param name="dwStyle">
            Constant representing the style of the IPAddress object, specified either by a X# style constant or a Windows API style constant. Styles can be combined using the _Or() operator.
        </param>
      <param name="lDataAware">A logical value that is TRUE if the IPAddress object is data-aware; otherwise, FALSE. If omitted, defaults to TRUE.</param>
      <param name="nResourceID">The resource ID of the IPAddress object.</param>
    </member>
    <member name="P:VO.IPAddress.Address">
      <summary>
            A long value representing the current IP address. This equals the IP address interpreted as a 4-byte integer.
        </summary>
      <value>A long value representing the current IP address. This equals the IP address interpreted as a 4-byte integer.</value>
    </member>
    <member name="P:VO.IPAddress.Field1">
      <summary>
            A numeric value representing the first field of the current IP Address. For the IP Address "130.119.121.147", this access would return 130.
        </summary>
      <value>A numeric value representing the first field of the current IP Address. For the IP Address "130.119.121.147", this access would return 130.</value>
    </member>
    <member name="P:VO.IPAddress.Field2">
      <summary>
            A numeric value representing the second field of the current IP address. For the IP address "130.119.121.147", this access would return 119.
        </summary>
      <value>A numeric value representing the second field of the current IP address. For the IP address "130.119.121.147", this access would return 119.</value>
    </member>
    <member name="P:VO.IPAddress.Field3">
      <summary>
            A numeric value representing the third field of the current IP address. For the IP address "130.119.121.147", this access would return 121.
        </summary>
      <value>A numeric value representing the third field of the current IP address. For the IP address "130.119.121.147", this access would return 121.</value>
    </member>
    <member name="P:VO.IPAddress.Field4">
      <summary>
            A numeric value representing the fourth field of the current IP address. For the IP address "130.119.121.147", this access would return 147.
        </summary>
      <value>A numeric value representing the fourth field of the current IP address. For the IP address "130.119.121.147", this access would return 147.</value>
    </member>
    <member name="M:VO.IPAddress.SetRange(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the allowable entry range per field.
        </summary>
      <param name="iFieldIndex">Index of the field for which the range is being set (between 1 and4).</param>
      <param name="iLower">Lower limit of the range.</param>
      <param name="iUpper">Upper limit of the range.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.IPAddress.TextValue">
      <summary>
            String representing the IP address.
        </summary>
      <value>String representing the IP address.</value>
    </member>
    <member name="T:VO.IpcClient">
      <summary>
            Register an application as a client able to request and receive data from a designated server application.
        </summary>
    </member>
    <member name="M:VO.IpcClient.#ctor(XSharp.__Usual)">
      <summary>
            Construct an IpcClient object.
        </summary>
      <param name="cServerName">The server with which to communicate.</param>
    </member>
    <member name="M:VO.IpcClient.ChangeData(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Tell the remote server that some data value has changed. This results in the server receiving an IpcDataUpdateEvent. It is then the responsibility of the server to update itself.
        </summary>
      <param name="cTopic">The name of the IPC topic whose data has changed. This method causes the system to notify the IPC server of the change by sending it an IpcDataUpdateEvent. When the server asks that event which topic has changed, the event answers with the value you gave to this argument.</param>
      <param name="cItem">The name of the item to change.</param>
      <param name="cStringData">The data that has changed.</param>
    </member>
    <member name="M:VO.IpcClient.ClientError(XSharp.__Usual)">
      <summary>
            Handle ClientErrorEvent, if one occurs. Provide this event handler in your derived IpcClient class if you require special handling of errors.
        </summary>
      <param name="oIpcClientErrorEvent">The type of error that occurred. Refer to the IpcClientErrorEvent class for a list of error types.</param>
      <returns>
            TRUE if the DDE conversation is to continue; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.IpcClient.DataUpdate(XSharp.__Usual)">
      <summary>
            Called whenever the requested data changes. It is invoked after the IpcServer calls its UpdateTopic() method.
        </summary>
      <param name="oIpcDataUpdateEvent">Stores the topic name, item name, and the changed data as a string.</param>
    </member>
    <member name="M:VO.IpcClient.Destroy">
      <summary>
            Provide a method to de-instantiate an IpcClient object.
        </summary>
    </member>
    <member name="M:VO.IpcClient.Dispatch(XSharp.__Usual)"></member>
    <member name="M:VO.IpcClient.Execute(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Send a message to the server telling it to execute the command string remotely. As a result of this call, the server receives an IpcExecuteRequestEvent.
        </summary>
      <param name="cTopic">The name of the IPC topic for which the server executes a command.</param>
      <param name="cItem">The name of the IPC item for which the server executes a command.</param>
      <param name="cCommand">The command to be executed by the server.</param>
    </member>
    <member name="M:VO.IpcClient.RequestData(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Request updates on a particular topic from the server.
        </summary>
      <param name="oIpcTopic">The IPC topic on which data is being requested.</param>
      <param name="continuous">If set to TRUE, the server sends data to the client each time it changes; if FALSE, the server sends only one update.The default is FALSE.</param>
    </member>
    <member name="T:VO.IpcClientErrorEvent">
      <summary>
            Provide information about an IpcClientErrorEvent, used to indicate what type of error event occurred in an IPC server.
        </summary>
    </member>
    <member name="P:VO.IpcClientErrorEvent.ErrorType">
      <summary>
            The type of error event that occurred, as defined by the one of the constants in the table below:
        </summary>
      <value>The type of error event that occurred, as defined by the one of the constants in the table below:</value>
    </member>
    <member name="T:VO.IpcDataRequestEvent">
      <summary>
            Provide information about an IpcDataRequestEvent, used to store the topic name (and length) and the item name (and length) for which data has been requested.
        </summary>
    </member>
    <member name="T:VO.IpcDataUpdateEvent">
      <summary>
            Provide information about an IpcDataUpdateEvent, used to store information about the topic name, item name, and the new data.
        </summary>
    </member>
    <member name="P:VO.IpcDataUpdateEvent.AsString">
      <summary>
            A string containing the data that has changed.
        </summary>
      <value>A string containing the data that has changed.</value>
    </member>
    <member name="M:VO.IpcDataUpdateEvent.GetData">
      <summary>
            Enable the program to handle the data that has changed.
        </summary>
      <returns>
            A string containing the data that has changed.
        </returns>
    </member>
    <member name="T:VO.IpcEvent">
      <summary>
            Provide the base class from which all Ipc event classes are subclassed.
        </summary>
    </member>
    <member name="F:VO.IpcEvent.dwData1"></member>
    <member name="F:VO.IpcEvent.dwData2"></member>
    <member name="F:VO.IpcEvent.dwFmt"></member>
    <member name="F:VO.IpcEvent.dwType"></member>
    <member name="F:VO.IpcEvent.hConv"></member>
    <member name="F:VO.IpcEvent.hData"></member>
    <member name="F:VO.IpcEvent.hsz1"></member>
    <member name="F:VO.IpcEvent.hsz2"></member>
    <member name="P:VO.IpcEvent.Item">
      <summary>
            A string representing the item name for which the event has been requested.
        </summary>
      <value>A string representing the item name for which the event has been requested.</value>
    </member>
    <member name="F:VO.IpcEvent.oIPCObject"></member>
    <member name="P:VO.IpcEvent.Topic">
      <summary>
            A string representing the topic name for which the event has been requested.
        </summary>
      <value>A string representing the topic name for which the event has been requested.</value>
    </member>
    <member name="T:VO.IpcExecuteRequestEvent">
      <summary>
            Provide information about an IpcExecuteRequestEvent, used to store information about the topic, item, and command string.
        </summary>
    </member>
    <member name="P:VO.IpcExecuteRequestEvent.Command">
      <summary>
            A string representing the command name.
        </summary>
      <value>A string representing the command name.</value>
    </member>
    <member name="T:VO.IpcServer">
      <summary>
            Register an application as a server able to access data on specific topics and update registered topics and update registered client applications.
        </summary>
    </member>
    <member name="M:VO.IpcServer.#ctor(XSharp.__Usual)">
      <summary>
            Construct an IpcServer object.
        </summary>
      <param name="cServName">The name uniquely identifying the server, which the clients use.</param>
    </member>
    <member name="M:VO.IpcServer.AddTopic(XSharp.__Usual)">
      <summary>
            Add a topic to the list of topics supported by the server.
        </summary>
      <param name="oIpcTopic">The IPC topic to add to the list supported by the server.</param>
    </member>
    <member name="M:VO.IpcServer.DataRequest(XSharp.__Usual)">
      <summary>
            Called whenever a client makes a request for data or when the IpcServer:UpdateTopic() is called.
        </summary>
      <param name="oIpcDataRequestEvent">Stores the topic name and item name.</param>
      <returns>
            An object containing a pointer to the data and the length of the data string (it created as a global memory object by Windows DDE management library and it passes a data handle back to the application).
        </returns>
    </member>
    <member name="M:VO.IpcServer.DataUpdate(XSharp.__Usual)">
      <summary>
            Called whenever a client calls IpcClient:ChangeData().
        </summary>
      <param name="oIpcDataUpdateEvent">Stores the topic name, item name, and the changed data as a string.</param>
    </member>
    <member name="M:VO.IpcServer.Destroy">
      <summary>
            Provide a method to de-instantiate an IpcServer object.
        </summary>
    </member>
    <member name="M:VO.IpcServer.Dispatch(XSharp.__Usual)"></member>
    <member name="M:VO.IpcServer.ExecuteRequest(XSharp.__Usual)">
      <summary>
            Called when the client calls IpcClient:Execute(). The server should take the appropriate action to execute the command locally.
        </summary>
      <param name="oIpcExecuteRequestEvent">Stores the topic name, item name, and the command name to be executed.</param>
    </member>
    <member name="M:VO.IpcServer.UpdateTopic(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Request that the server update a particular topic and item.
        </summary>
      <param name="cTopic">The IPC topic to be updated.</param>
      <param name="cItem">The IPC item to be updated.</param>
    </member>
    <member name="T:VO.IpcTopic">
      <summary>
            Create topic (and items) to be supported by an IPC server and which IPC clients can request. These objects are used by IpcServer:AddTopic() and IpcClient:RequestData().
        </summary>
    </member>
    <member name="M:VO.IpcTopic.#ctor(XSharp.__Usual)">
      <summary>
            Construct an IpcTopic object.
        </summary>
      <param name="cTopicString">The IPC topic to be created.</param>
    </member>
    <member name="M:VO.IpcTopic.AddItem(XSharp.__Usual)">
      <summary>
            Add an item to the list of items associated with the topic.
        </summary>
      <param name="cItemString">The IPC item to be added to the list of items associated with the topic.</param>
    </member>
    <member name="F:VO.IpcTopic.aItemList"></member>
    <member name="F:VO.IpcTopic.cTopicName"></member>
    <member name="M:VO.IpcTopic.DeleteItem(XSharp.__Usual)">
      <summary>
            Delete an item from the list of items associated with the topic.
        </summary>
      <param name="cItemString">The IPC item to be deleted.</param>
    </member>
    <member name="T:VO.IpcTopicData">
      <summary>
            Create a global memory object and pass a data handle back to the application.
        </summary>
    </member>
    <member name="M:VO.IpcTopicData.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an IpcTopicData object.
        </summary>
      <param name="ptrString">A pointer to the data string.</param>
      <param name="nLength">The number of characters to transfer. If not specified, the entire length of the data string is used.</param>
    </member>
    <member name="F:VO.IpcTopicData.liLen"></member>
    <member name="F:VO.IpcTopicData.ptrData"></member>
    <member name="T:VO.KeyEvent">
      <summary>
            Provide information about a KeyEvent, used to encapsulate information about the key that was pressed.
        </summary>
    </member>
    <member name="M:VO.KeyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.KeyEvent.ASCIIChar">
      <summary>
            A numeric value representing the normal ASCII code for the key that caused this KeyEvent.
        </summary>
      <value>A numeric value representing the normal ASCII code for the key that caused this KeyEvent.</value>
    </member>
    <member name="P:VO.KeyEvent.KeyCode">
      <summary>
            A constant, indicating the code for the key that was pressed:
        </summary>
      <value>A constant, indicating the code for the key that was pressed:</value>
    </member>
    <member name="P:VO.KeyEvent.RepeatCount">
      <summary>
            A numeric value determining whether a user depressed a key repeatedly or held it down for an extended period of time.
        </summary>
      <value>A numeric value determining whether a user depressed a key repeatedly or held it down for an extended period of time.</value>
    </member>
    <member name="P:VO.KeyEvent.System">
      <summary>
            A logical value determining whether the Alt key was pressed at the same time as another key (TRUE if yes, FALSE if no).
        </summary>
      <value>A logical value determining whether the Alt key was pressed at the same time as another key (TRUE if yes, FALSE if no).</value>
    </member>
    <member name="T:VO.LineObject">
      <summary>
            Create a LineObject object; this type of entity is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various objects.
        </summary>
    </member>
    <member name="M:VO.LineObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a LineObject object.
        </summary>
      <param name="oPoint1">The point representing the start of the line.</param>
      <param name="oPoint2">The point representing the end of the line.</param>
      <param name="oPen">The pen to be used for drawing the LineObject object. If omitted, the current pen is used.</param>
    </member>
    <member name="P:VO.LineObject.BoundingBox">
      <summary>
            A bounding box representing the smallest rectangle that completely encloses this LineObject object.
        </summary>
      <value>A bounding box representing the smallest rectangle that completely encloses this LineObject object.</value>
    </member>
    <member name="M:VO.LineObject.Draw">
      <summary>
            Draw the LineObject object on a window.
        </summary>
    </member>
    <member name="P:VO.LineObject.Origin">
      <summary>
            A point, in canvas coordinates, representing the starting coordinate of the LineObject object on its owner window.
        </summary>
      <value>A point, in canvas coordinates, representing the starting coordinate of the LineObject object on its owner window.</value>
    </member>
    <member name="P:VO.LineObject.Pen">
      <summary>
            A pen associated with this LineObject object.
        </summary>
      <value>A pen associated with this LineObject object.</value>
    </member>
    <member name="P:VO.LineObject.Size">
      <summary>
            A dimension representing the size of this LineObject object.
        </summary>
      <value>A dimension representing the size of this LineObject object.</value>
    </member>
    <member name="T:VO.ListBox">
      <summary>
            Create a list box.
        </summary>
    </member>
    <member name="M:VO.ListBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a list box.
        </summary>
      <param name="oOwner">The window that owns the list box.</param>
      <param name="xID">The unique ID of the list box (between 1 and 8000).</param>
      <param name="oPoint">The origin of the list box in canvas coordinates.</param>
      <param name="oDimension">The dimension of the list box in canvas coordinates.</param>
      <param name="kStyle">The style of the list box, specified as one of the following constants listed below:</param>
      <param name="nResourceID">The resource ID of the list box.</param>
    </member>
    <member name="M:VO.ListBox.AddItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a new item to a list box at a specified position.
        </summary>
      <param name="cItem">The item to be inserted.</param>
      <param name="nItemNumber">The position in the list box at which to insert the new item. Specify one of the values listed below.</param>
      <param name="uRetValue">
            The value associated with the specified item. The default is <paramref name="cItem" />.
        </param>
      <returns>
            If the item was added, its position in the list box is returned (a value of 1 refers to the first position in the list box). If the item could not be added, 0 is returned.
        </returns>
    </member>
    <member name="P:VO.ListBox.Caption">
      <summary>
            The string representing the caption of the list box.
        </summary>
      <value>The string representing the caption of the list box.</value>
    </member>
    <member name="M:VO.ListBox.ChangeSelected(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change a range of items in a multiple selection list box to a specified selection.
        </summary>
      <param name="oRange">The Range object representing the selected items.</param>
      <param name="lEnabled">The state of the selected items. If not specified, the default is TRUE.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListBox.Clear"></member>
    <member name="M:VO.ListBox.ClearSelection">
      <summary>
            Clear a multiple selection list box of all selections.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListBox.CurrentItem">
      <summary>
            A string representing the displayed list box or combo box item selected.
        </summary>
      <value>A string representing the displayed list box or combo box item selected.</value>
    </member>
    <member name="P:VO.ListBox.CurrentItemNo">
      <summary>
            A numeric value, between 1 and the ListBox:ItemCount, indicating which item is currently selected.
        </summary>
      <value>A numeric value, between 1 and the ListBox:ItemCount, indicating which item is currently selected.</value>
    </member>
    <member name="P:VO.ListBox.CurrentText">
      <summary>
            ListBox:CurrentText is set to the NULL_STRING, since there is no text editing for list boxes.
        </summary>
      <value>ListBox:CurrentText is set to the NULL_STRING, since there is no text editing for list boxes.</value>
    </member>
    <member name="M:VO.ListBox.DeleteItem(XSharp.__Usual)">
      <summary>
            Remove an item from a list box.
        </summary>
      <param name="uItemNumber">The number of the item to be deleted. Specify one of values listed below</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListBox.DeselectItem(XSharp.__Usual)">
      <summary>
            Turn off the selection of a specified item in a list box.
        </summary>
      <param name="nItem">The item number to be deselected. Zero (0) represents the current item.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListBox.EnableItemDrag">
      <summary>
            Turn the list box into a drag list box.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListBox.FillUsing(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Specify the set of values to be displayed in the list box, using an array or a data server. These values act as a constraint on the values that may be entered in the list box, and optionally as a translation between program values and display values.
        </summary>
      <param name="aContents">
            An array containing the values to be placed in the list box. A two-dimensional array may be used to define the values to be returned to the program when a list item is selected, separately from the text strings shown in the list; this 'other' value is what is returned in the ListBox:Value property, and what is stored in the database if the control is associated with a database field.
            Thus, the array may be specified in one of two formats:
            <list type="table"><item><term>1.</term><description>One-dimensional array containing the list of values.</description></item><item><term>2.</term><description>
                        Array of two-element arrays, each containing the string to display in the list and the corresponding value returned to the program.
                        Note that the two dimensional array has the same structure as that returned by DBServer:GetLookupTable(), and the
                        one-dimensional array matches that returned by DBServer:GetArray(). or The data server that is to be used to provide the set of values.
                    </description></item></list></param>
      <param name="symField1">The symbolic name of the field that is to be used for the display values. If not specified, the values of the first field are used.</param>
      <param name="symField2">The symbolic name of the field that is to be used for the values that are returned to the program. If not specified, the values of the first field are used.</param>
    </member>
    <member name="M:VO.ListBox.FirstSelected">
      <summary>
            Returns the position of the first item selected in a multiple selection list box, or 0 if no item is selected.
        </summary>
    </member>
    <member name="M:VO.ListBox.GetItemValue(XSharp.__Usual)">
      <summary>
            Retrieve the value of a specified list box item.
        </summary>
      <param name="nItemNumber">The number of the desired item. Specify one of the values listed below:</param>
      <returns>
            The value associated with the specified item.
        </returns>
    </member>
    <member name="M:VO.ListBox.IsSelected(XSharp.__Usual)">
      <summary>
            Determine if the list box item at the specified index position is selected.
        </summary>
      <param name="iIdx">Index position of the list box item.</param>
      <returns>
            TRUE if selected; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListBox.ListFiles(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Fill a list box with the names of all files that match the specified path or file name.
        </summary>
      <param name="sStartDir">The path or file name of the starting directory.</param>
      <param name="oFixedText">
            Set automatically to the fixed text of the drive/directory of <paramref name="sStartDir" />.
        </param>
      <param name="FileTypes">One of the following constants indicating the attributes of the files to be displayed:</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListBox.MultiSelection">
      <summary>
            Used to identify if the ListBox supports multiple selections.
        </summary>
      <value>Used to identify if the ListBox supports multiple selections.</value>
    </member>
    <member name="M:VO.ListBox.NextSelected">
      <summary>
            After calling ListBox:FirstSelected(), this method is used to cycle through the remaining items selected in a multiple selection list box.
        </summary>
      <returns>
            Position of the next selected item in the list box, or 0 if no item is selected or if there are no remaining items.
        </returns>
    </member>
    <member name="P:VO.ListBox.SelectedCount">
      <summary>
            A numeric value representing the total number of items that are currently selected in a multiple selection list box.
            <note type="tip">This property is intended for use with a multiple selection list box (i.e., a list box created using the LBOXMULTIPLESEL style).</note></summary>
      <value>
            A numeric value representing the total number of items that are currently selected in a multiple selection list box.
            This property is intended for use with a multiple selection list box (i.e., a list box created using the LBOXMULTIPLESEL style).
        </value>
    </member>
    <member name="P:VO.ListBox.SelectedFile"></member>
    <member name="M:VO.ListBox.SelectItem(XSharp.__Usual)">
      <summary>
            Turn on the selection of an item in a list box.
        </summary>
      <param name="nItemId">The item number to be selected. Zero (0) represents the current item.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListBox.TextValue">
      <summary>
            A string representing the display value (first array's element) for the currently selected item.
        </summary>
      <value>A string representing the display value (first array's element) for the currently selected item.</value>
    </member>
    <member name="T:VO.ListView">
      <summary>
            Create a list view control.
            Important - Microsoft Note - Under visual styles GridLines are not always displayed correctly.
        </summary>
    </member>
    <member name="M:VO.ListView.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a list view.
        </summary>
      <param name="oOwner">The window that owns the list view.</param>
      <param name="xID">The unique ID for the list view (between 1 and 8000).</param>
      <param name="oPoint">The origin of the list view in canvas coordinates.</param>
      <param name="oDimension">The dimension of the list view in canvas coordinates.</param>
      <param name="kStyle">The style of the list view.</param>
      <param name="nResourceID">The resource ID of the list view.</param>
    </member>
    <member name="M:VO.ListView.AddColumn(XSharp.__Usual)">
      <summary>
            Add a new ListViewColumn object to the end of the list view's list of columns.
        </summary>
      <param name="oListViewColumn">The ListViewColumn object to add to the list view.</param>
      <returns>
            TRUE if the column was added successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.AddGroup(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set an image as the background to the list view.
        </summary>
      <param name="iGroupId">The number of the group.</param>
      <param name="cGroupName">group name</param>
      <param name="dwAlign">
            The group alignment. Available options are -
            <list type="table"><item><term>LVGA_HEADER_LEFT</term><description /></item><item><term>LVGA_HEADER_RIGHT</term><description /></item><item><term>LVGA_HEADER_CENTER</term><description /></item></list></param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.AddItem(XSharp.__Usual)">
      <summary>
            Add a new ListViewItem object as the last item in the list view.
        </summary>
      <param name="oListViewItem">The ListViewItem object to add to the list view.</param>
      <returns>
            TRUE if the item was added successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.Arrange(XSharp.__Usual)">
      <summary>
            Align list view items while in icon view.
        </summary>
      <param name="kAlignment">One of the following constants describing how to align the list view items:</param>
      <returns>
            TRUE if the item was arranged successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListView.BackgroundColor">
      <summary>
            A Color object used to paint the background in the list view.
        </summary>
      <value>A Color object used to paint the background in the list view.</value>
    </member>
    <member name="P:VO.ListView.CheckBoxes">
      <summary>
            A logical value determining whether check boxes are used in the list view.
        </summary>
      <value>A logical value determining whether check boxes are used in the list view.</value>
    </member>
    <member name="P:VO.ListView.ColumnCount">
      <summary>
            A numeric value representing the number of columns in the list view.
        </summary>
      <value>A numeric value representing the number of columns in the list view.</value>
    </member>
    <member name="P:VO.ListView.ColumnOrderArray">
      <summary>
            An array of ListViewColumn object symbolic names representing the order of the columns in the list view.
        </summary>
      <value>An array of ListViewColumn object symbolic names representing the order of the columns in the list view.</value>
    </member>
    <member name="P:VO.ListView.CurrentView">
      <summary>
            A symbolic name representing the current view of the list view.
        </summary>
      <value>A symbolic name representing the current view of the list view.</value>
    </member>
    <member name="M:VO.ListView.DeleteAll">
      <summary>
            Delete all items of the list view.
        </summary>
      <returns>
            TRUE if all items were deleted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.DeleteAllColumns">
      <summary>
            Delete all columns from a list view.
        </summary>
      <returns>
            TRUE if all items were deleted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.DeleteColumn(XSharp.__Usual)">
      <summary>
            Delete a ListViewColumn object from the list view.
        </summary>
      <param name="oListViewColumn">The ListViewColumn object to delete from the list view.</param>
      <returns>
            TRUE if the column was deleted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.DeleteItem(XSharp.__Usual)">
      <summary>
            Delete a ListViewItem object from the list view.
        </summary>
      <param name="nItem">The index of the ListViewItem object to delete from the list view.</param>
      <returns>
            TRUE if the item was deleted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.Destroy">
      <summary>
            Provide a method to de-instantiate any TextControl.Destroy object.
        </summary>
    </member>
    <member name="P:VO.ListView.DragDropEnabled">
      <summary>
            A logical value that is TRUE if drag and drop is enabled for the list view. If drag and drop is enabled, items can be dragged within, as well as outside, the control.
        </summary>
      <value>A logical value that is TRUE if drag and drop is enabled for the list view. If drag and drop is enabled, items can be dragged within, as well as outside, the control.</value>
    </member>
    <member name="P:VO.ListView.DragImageList">
      <summary>
            An image list containing a single image displayed during a drag and drop operation for the list view.
        </summary>
      <value>An image list containing a single image displayed during a drag and drop operation for the list view.</value>
    </member>
    <member name="M:VO.ListView.EditItemLabel(XSharp.__Usual)">
      <summary>
            Begins in-place label editing of an item in the list view.
        </summary>
      <param name="nItem">The index of the ListViewItem object whose label you want to edit.</param>
    </member>
    <member name="M:VO.ListView.EnableDragDrop(XSharp.__Usual)">
      <summary>
            Enable or disable drag and drop of items for the list view.
        </summary>
      <param name="lEnable">A value of TRUE indicates that drag and drop is enabled, while FALSE indicates that it is disabled. The default value is TRUE.</param>
      <returns>
            TRUE if drag and drop could be enabled or disabled; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.EnableGroupView(XSharp.__Usual)">
      <summary>
            Set Group View on or off in a ListView control.
        </summary>
      <param name="lSetting">A logical value. TRUE turns Group View on, FALSE turns it off. The default is TRUE.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.EnableSort(XSharp.__Usual)">
      <summary>
            Register a user-defined method to use for sorting items in the list view.
        </summary>
      <param name="symMethodName">The symbolic name of the user-defined method that will be used to sort items in the list view. When called, this method receives two ListViewItem objects as arguments. The method should determine which of the two list view items should come first in the list view. If the first item precedes the second, this method should return -1; if the second item precedes the first, this method should return 1; if the items are equivalent, this method should return 0.</param>
      <returns>
            The symbolic name of the user-defined method to perform the sort.
        </returns>
    </member>
    <member name="M:VO.ListView.EnsureVisible(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Ensure that an item is visible in the list view, scrolling if necessary.
        </summary>
      <param name="nItem">The index of the list view item to make visible.</param>
      <param name="lPartiallyVisible">A value of TRUE indicates that the specified item can be only partially visible. Specify FALSE if you want the item to be fully visible.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListView.FullRowSelect">
      <summary>
            A logical value determining whether the entire row is highlighted when a list view item is selected.
        </summary>
      <value>A logical value determining whether the entire row is highlighted when a list view item is selected.</value>
    </member>
    <member name="M:VO.ListView.GetAllItems">
      <summary>
            Get an array with all the Listview Items
        </summary>
      <returns>
            An array with all Listview Items
        </returns>
    </member>
    <member name="M:VO.ListView.GetAllSelectedItems">
      <summary>
            Get an array with all the selected Listview Items
        </summary>
      <returns>
            An array with all selected Listview Items
        </returns>
    </member>
    <member name="M:VO.ListView.GetColumn(XSharp.__Usual)">
      <summary>
            Return a particular ListViewColumn object.
        </summary>
      <param name="xColumnID">
            The numeric position of the list view column in the list view. Columns are numbered from left to right,
            or the symbolic name of the list view column.
        </param>
      <returns>
            The ListViewColumn object.
        </returns>
    </member>
    <member name="M:VO.ListView.GetGroupTextColor">
      <summary>
            Get the text color used for the headings when displaying a ListView control by group.
        </summary>
      <returns>
            The color object.
        </returns>
    </member>
    <member name="M:VO.ListView.GetItemAtPosition(XSharp.__Usual)">
      <summary>
            Return a ListViewItem object at a particular position, if one exists.
        </summary>
      <param name="oPoint">The point at which to find a list view item.</param>
      <returns>
            The ListViewItem object at the specified point.
        </returns>
    </member>
    <member name="M:VO.ListView.GetItemAttributes(XSharp.__Usual)">
      <summary>
            Return a ListViewItem object given its item index.
        </summary>
      <param name="nItem">The index of the list view item to be returned.</param>
      <returns>
            The ListViewItem object specified by the item index.
        </returns>
    </member>
    <member name="M:VO.ListView.GetItemBoundingBox(XSharp.__Usual)">
      <summary>
            Return the bounding box of a ListViewItem object given its item index.
        </summary>
      <param name="nItem">The index of the list view item whose bounding box you want to obtain.</param>
      <returns>
            The bounding box of the ListViewItem object specified by the item index.
        </returns>
    </member>
    <member name="M:VO.ListView.GetItemPosition(XSharp.__Usual)">
      <summary>
            Return the origin of a ListViewItem object given its item index.
        </summary>
      <param name="nItem">The index of the list view item whose origin you want to obtain.</param>
      <returns>
            The origin of the list view item specified by the item index.
        </returns>
    </member>
    <member name="M:VO.ListView.GetItemSpacing(XSharp.__Usual)">
      <summary>
            Return the spacing between list view items in icon view or small icon view.
        </summary>
      <param name="symView">The symbolic name of the view whose spacing you want to obtain. This value can be #IconView or #SmallIconView. If omitted, the spacing of icon view is reported.</param>
      <returns>
            The amount of spacing between items.
        </returns>
    </member>
    <member name="M:VO.ListView.GetNextItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve the next list view item that possesses all of the specified properties.
        </summary>
      <param name="kRelationship">One of the following constants describing the physical relationship to the specified item. See table below for possible values</param>
      <param name="lDisabled">A value of TRUE indicates that the list view item's image should be disabled. If omitted, the default is FALSE.</param>
      <param name="lDropTarget">A value of TRUE indicates that the list view item should be a drag and drop target. If omitted, the default is FALSE.</param>
      <param name="lFocused">A value of TRUE indicates that the list view item should be focused. If omitted, the default is FALSE.</param>
      <param name="lSelected">A value of TRUE indicates that the list view item should be selected. If omitted, the default is FALSE.</param>
      <param name="nItemStart">Index of the item with which to begin searching. If omitted, searching starts from the beginning.</param>
      <returns>
            The list view item returned as a result of the search.
        </returns>
    </member>
    <member name="M:VO.ListView.GetSelectedItem">
      <summary>
            Retrieve the currently selected ListViewItem object.
        </summary>
      <returns>
            The currently selected ListViewItem object.
        </returns>
    </member>
    <member name="P:VO.ListView.GridLines">
      <summary>
            A logical value determining whether gridlines are shown in the list view.
        </summary>
      <value>A logical value determining whether gridlines are shown in the list view.</value>
    </member>
    <member name="M:VO.ListView.HasGroup(XSharp.__Usual)">
      <summary>
            A logical value to determine if the group with the specified ID exists in a ListView control.
        </summary>
      <param name="iGroupId">The number of the group.</param>
      <returns>
            TRUE if it exists; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListView.HeaderDragDrop">
      <summary>
            A logical value determining whether columns can be rearranged in the list view by dragging and dropping the column headers.
        </summary>
      <value>A logical value determining whether columns can be rearranged in the list view by dragging and dropping the column headers.</value>
    </member>
    <member name="M:VO.ListView.InsertColumn(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Insert a new ListViewColumn object after a particular column index in the list view.
        </summary>
      <param name="oListViewColumn">The ListViewColumn object to insert in the list view.</param>
      <param name="nInsertAfter">The position after which to insert the new column. If omitted, the new column is added to the end of the column list.</param>
      <returns>
            TRUE if the column was inserted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.InsertItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Insert a new ListViewItem object after a particular item index in the list view.
        </summary>
      <param name="oListViewItem">The ListViewItem object to insert in the list view.</param>
      <param name="nInsertAfter">The position after which to insert the new item. If omitted, the new item is added as the last item.</param>
      <returns>
            TRUE if the item was inserted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListView.IsGroupViewEnabled">
      <summary>
            A logical value to identify if ListView groups are enabled.
        </summary>
      <value>A logical value to identify if ListView groups are enabled.</value>
    </member>
    <member name="P:VO.ListView.ItemCount">
      <summary>
            A numeric value representing the number of items in the list view.
        </summary>
      <value>A numeric value representing the number of items in the list view.</value>
    </member>
    <member name="P:VO.ListView.ItemsPerPage">
      <summary>
            A numeric value representing the number of items that can fit vertically in the visible area of the list view.
        </summary>
      <value>A numeric value representing the number of items that can fit vertically in the visible area of the list view.</value>
    </member>
    <member name="P:VO.ListView.LargeImageList">
      <summary>
            An image list containing large images to display for each item when the list view is displayed in icon view.
        </summary>
      <value>An image list containing large images to display for each item when the list view is displayed in icon view.</value>
    </member>
    <member name="M:VO.ListView.RedrawRange(XSharp.__Usual)">
      <summary>
            Redraw a range of list view items.
        </summary>
      <param name="oRange">The range of list view item indexes to redraw.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.RemoveAllGroups">
      <summary>
            Remove all groups from a ListView control.
        </summary>
    </member>
    <member name="M:VO.ListView.RemoveGroup(XSharp.__Usual)">
      <summary>
            Remove the group with the specified ID from a ListView control.
        </summary>
      <param name="iGroupId">The number of the group.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.Scroll(XSharp.__Usual)">
      <summary>
            Scroll the contents of a list view.
        </summary>
      <param name="oDimension">The dimension representing the amount to scroll the list view. Positive width values scroll to the right, while negative width values scroll to the left. In addition, positive height values scroll upwards, while negative height values scroll downwards.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListView.SearchString">
      <summary>
            The incremental search string associated with the list view.
        </summary>
      <value>The incremental search string associated with the list view.</value>
    </member>
    <member name="M:VO.ListView.Seek(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Search the list view for a particular list view item.
        </summary>
      <param name="uValue">
            The value to seek. <paramref name="kSeekType" /> must be LV_SEEKVALUE.
        </param>
      <param name="cText">
            The string to seek. <paramref name="kSeekType" /> must be LV_SEEKTEXT.
        </param>
      <param name="oPoint">
            The point in the client area of the list view at which the seek begins. The nearest list view item to this point in the direction specified by <paramref name="kSeekType" /> will be returned.
        </param>
      <param name="kSeekType">A constant that specifies what type of seek to perform. LV_SEEKVALUE causes a seek on a usual value. LV_SEEKTEXT causes a seek on a text string.  If the seek is on a Point object, this argument can be LV_SEEKUP or LV_SEEKDOWN to specify a search in the respective directions. In this case, if the argument is omitted, LV_SEEKDOWN is assumed.</param>
      <param name="nStart">The index of the list view item at which to begin the search. If omitted, the seek begins at the first item.</param>
      <param name="lWrap">A value of TRUE continues the search at the first list view item if no match is found. If omitted, the default is FALSE, which disables wrapping.</param>
      <param name="lPartial">
            A value of TRUE produces a match if the list view item label begins with <paramref name="cText" />. If omitted, the default is FALSE, which disables partial seeking.
        </param>
      <returns>
            The list view item returned as a result of the seek.
        </returns>
    </member>
    <member name="P:VO.ListView.SelectedCount">
      <summary>
            A numeric value representing the number of items that are selected in the list view.
        </summary>
      <value>A numeric value representing the number of items that are selected in the list view.</value>
    </member>
    <member name="M:VO.ListView.SelectItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Select or deselect a specific item in a list view.
        </summary>
      <param name="nItem">Index of the list view items in the list view to be selected or deselected.</param>
      <param name="lSelect">Select (TRUE) or deselect (FALSE) the item in the list view. The default setting is TRUE.</param>
      <returns>
            TRUE if the list view item was selected; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.SelectNextItem">
      <summary>
            Select the next list view item after the currently selected item.
        </summary>
      <returns>
            TRUE if the selection was successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.SetBackgroundImage(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set an image as the background to the list view.
        </summary>
      <param name="uImage">
            The image to use as the background in one of the following four types.
            Object	A BitMap object
            PTR	An image handle
            String	A URL or filename as a string
            NIL	If you want to remove the background
        </param>
      <param name="dwFlags">
            Flags that can be set to create the required style. More than one style can be used by combining them with _Or()
            _Or( LVBKIF_SOURCE_HBITMAP, LVBKIF_STYLE_TILE )
            _Or( LVBKIF_SOURCE_URL, LVBKIF_STYLE_TILE )
        </param>
      <param name="xOffSet">controls the x placement of the image.</param>
      <param name="yOffSet">controls the y placement of the image.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.SetColumnFormat(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the desired extended style for a list view.
        </summary>
      <param name="nCol">The column index number.</param>
      <param name="dwFlag">
            Flags that can be set to create the required style. More than one style can be used by combining them with _Or()
            Available styles are -
            HDF_CENTER	Allign the column to the center.
            HDF_LEFT	Allign the column to the left. This is the default.
            HDF_RIGHT	Allign the column to the right.
            HDF_BITMAP	Add a bitmap to the left of the column.
            HDF_BITMAP_ON_RIGHT	Add a bitmap to the right of the column.
            HDF_SORTDOWN	down arrow in header - For visual themes only
            HDF_SORTUP	up arrow in header - For visual themes only
        </param>
      <param name="nImage">the number of the image in the image list to display in the column header. The default is no image.</param>
      <returns>
            TRUE, if the style was enabled; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.SetGroupName(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the name of a list view group.
        </summary>
      <param name="iGroupId">The number of the group.</param>
      <param name="cGroupName">group name</param>
      <param name="dwAlign">
            The group alignment.
            Available options are -
            LVGA_HEADER_LEFT
            LVGA_HEADER_RIGHT
            LVGA_HEADER_CENTER
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.SetGroupTextColor(XSharp.__Usual)">
      <summary>
            Set the text color to be used for the headings when displaying a ListView control by group.
        </summary>
      <param name="oColor">The color object required.</param>
    </member>
    <member name="M:VO.ListView.SetItemAttributes(XSharp.__Usual)">
      <summary>
            Update a ListViewItem object with new attributes.
        </summary>
      <param name="oListViewItem">The list view item whose attributes you want to change.</param>
    </member>
    <member name="M:VO.ListView.SetItemGroupId(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            A logical value to determine if the group with the specified ID exists in a ListView control.
        </summary>
      <param name="uLVI">The item index or ListViewItem.</param>
      <param name="nId">The number of the group.</param>
    </member>
    <member name="M:VO.ListView.SetItemPosition(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Move a list view item to a new position in icon view or small icon view.
        </summary>
      <param name="nItem">The index of the list view item whose position you want to change.</param>
      <param name="oPoint">The new position of the list view item.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.SetSelectedColumn(XSharp.__Usual)">
      <summary>
            Show column as selected.
        </summary>
      <param name="nIndex">The column index number.</param>
    </member>
    <member name="P:VO.ListView.SmallImageList">
      <summary>
            An image list containing small images to display for each item when the list view is displayed in list view, report view, or small icon view. The icons in this list must be defined elsewhere in
        </summary>
      <value>An image list containing small images to display for each item when the list view is displayed in list view, report view, or small icon view. The icons in this list must be defined elsewhere in</value>
    </member>
    <member name="M:VO.ListView.SortItems">
      <summary>
            Sort the list view items using the user-defined sort method specified by EnableSort().
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ListView.StateImageList">
      <summary>
            An image list containing state images to display for each item in the list view.
        </summary>
      <value>An image list containing state images to display for each item in the list view.</value>
    </member>
    <member name="P:VO.ListView.TextBackgroundColor">
      <summary>
            A Color object used to paint the text background in the list view.
        </summary>
      <value>A Color object used to paint the text background in the list view.</value>
    </member>
    <member name="P:VO.ListView.TextColor">
      <summary>
            A Color object used to paint the text in the list view.
        </summary>
      <value>A Color object used to paint the text in the list view.</value>
    </member>
    <member name="P:VO.ListView.TopItem">
      <summary>
            A numeric value representing the index of the topmost visible item when the list view is in list view or report view.
        </summary>
      <value>A numeric value representing the index of the topmost visible item when the list view is in list view or report view.</value>
    </member>
    <member name="M:VO.ListView.Update(XSharp.__Usual)">
      <summary>
            Update a list view item.
        </summary>
      <param name="nItem">The index of the list view item to update.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ListView.ViewAs(XSharp.__Usual)">
      <summary>
            Change the current view of the list view.
        </summary>
      <param name="symView">The symbolic name of the new view for the list view. It can be one of the following values:</param>
    </member>
    <member name="P:VO.ListView.ViewBoundingBox">
      <summary>
            The bounding box that encloses all of a list view's items when in icon view or small icon view.
        </summary>
      <value>The bounding box that encloses all of a list view's items when in icon view or small icon view.</value>
    </member>
    <member name="P:VO.ListView.ViewOrigin">
      <summary>
            The Point object representing the current view origin of a list view when in icon view or small icon view.
        </summary>
      <value>The Point object representing the current view origin of a list view when in icon view or small icon view.</value>
    </member>
    <member name="T:VO.ListViewColumn">
      <summary>
            Create a list view column.
        </summary>
    </member>
    <member name="M:VO.ListViewColumn.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a list view column.
        </summary>
      <param name="nWidth">The character width of the list view column. If omitted, the width is 16 characters.</param>
      <param name="xColumnID">The HyperLabel object for the column or the symbolic or string name of the column.</param>
      <param name="kAlignment">Optional constant representing the alignment of the list view column. If omitted, defaults to left-alignment. </param>
    </member>
    <member name="P:VO.ListViewColumn.Alignment">
      <summary>
            A constant representing the alignment of the list view column. One of the following values can be used:
            LVCFMT_LEFT
            LVCFMT_CENTER
            LVCFMT_RIGHT
        </summary>
      <value>
            A constant representing the alignment of the list view column. One of the following values can be used:
            LVCFMT_LEFT
            LVCFMT_CENTER
            LVCFMT_RIGHT
        </value>
    </member>
    <member name="P:VO.ListViewColumn.Caption">
      <summary>
            The caption displayed in the list view column header.
        </summary>
      <value>The caption displayed in the list view column header.</value>
    </member>
    <member name="M:VO.ListViewColumn.Destroy">
      <summary>Free memory resources allocated for a VObject object and its derived objects.</summary>
    </member>
    <member name="P:VO.ListViewColumn.FieldSpec">
      <summary>
            The FieldSpec object for the list view column.
        </summary>
      <value>The FieldSpec object for the list view column.</value>
    </member>
    <member name="P:VO.ListViewColumn.HyperLabel">
      <summary>
            The HyperLabel object for the list view column.
        </summary>
      <value>The HyperLabel object for the list view column.</value>
    </member>
    <member name="P:VO.ListViewColumn.NameSym">
      <summary>
            The symbolic name of the list view column.
        </summary>
      <value>The symbolic name of the list view column.</value>
    </member>
    <member name="M:VO.ListViewColumn.SetPixWidth(System.Int32)"></member>
    <member name="P:VO.ListViewColumn.Width">
      <summary>
            A numeric value that represents the character width of the list view column.
        </summary>
      <value>A numeric value that represents the character width of the list view column.</value>
    </member>
    <member name="T:VO.ListViewColumnClickEvent">
      <summary>
            Provide information about a list view column click event, which is generated when the header of a column in a list view control is clicked.
        </summary>
    </member>
    <member name="M:VO.ListViewColumnClickEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ListViewColumnClickEvent.ListViewColumn">
      <summary>
            The ListViewColumn object whose header was clicked.
        </summary>
      <value>The ListViewColumn object whose header was clicked.</value>
    </member>
    <member name="T:VO.ListViewDeleteEvent">
      <summary>
            Provide information about a list view delete event, which is generated when an item in a list view control is deleted.
        </summary>
    </member>
    <member name="M:VO.ListViewDeleteEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="T:VO.ListViewDragEvent">
      <summary>
            Provide information about a list view drag event, which is generated when an item in a list view control is dragged.
        </summary>
    </member>
    <member name="M:VO.ListViewDragEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ListViewDragEvent.IsLeftButton">
      <summary>
            A logical value that is TRUE if this is a left-button drag.
        </summary>
      <value>A logical value that is TRUE if this is a left-button drag.</value>
    </member>
    <member name="P:VO.ListViewDragEvent.IsRightButton">
      <summary>
            A logical value that is TRUE if this is a right-button drag.
        </summary>
      <value>A logical value that is TRUE if this is a right-button drag.</value>
    </member>
    <member name="P:VO.ListViewDragEvent.Position">
      <summary>
            A Point object that describes the initial position of the drag in list view control coordinates.
        </summary>
      <value>A Point object that describes the initial position of the drag in list view control coordinates.</value>
    </member>
    <member name="T:VO.ListViewEditEvent">
      <summary>
            Provide information about a list view edit event, which is generated when the label of an item in a list view control is edited.
        </summary>
    </member>
    <member name="M:VO.ListViewEditEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ListViewEditEvent.EditBeginning">
      <summary>
            A logical value that is TRUE if the edit is beginning.
        </summary>
      <value>A logical value that is TRUE if the edit is beginning.</value>
    </member>
    <member name="P:VO.ListViewEditEvent.EditEnding">
      <summary>
            A logical value that is TRUE if the edit is ending.
        </summary>
      <value>A logical value that is TRUE if the edit is ending.</value>
    </member>
    <member name="P:VO.ListViewEditEvent.EditText">
      <summary>
            String value containing the new label text of a list view item after that item's label has been edited.
        </summary>
      <value>String value containing the new label text of a list view item after that item's label has been edited.</value>
    </member>
    <member name="P:VO.ListViewEditEvent.ListViewItem">
      <summary>
            The ListViewItem object which is being edited.
        </summary>
      <value>The ListViewItem object which is being edited.</value>
    </member>
    <member name="T:VO.ListViewItem">
      <summary>
            Create a list view item.
        </summary>
    </member>
    <member name="M:VO.ListViewItem.#ctor">
      <summary>
            Construct a list view item.
        </summary>
    </member>
    <member name="P:VO.ListViewItem.Disabled">
      <summary>
            A logical value that is TRUE if the image of a list view item is displayed in a disabled fashion.
        </summary>
      <value>A logical value that is TRUE if the image of a list view item is displayed in a disabled fashion.</value>
    </member>
    <member name="P:VO.ListViewItem.DropTarget">
      <summary>
            A logical value that is TRUE if the list view item is highlighted as the target of a drag and drop operation.
        </summary>
      <value>A logical value that is TRUE if the list view item is highlighted as the target of a drag and drop operation.</value>
    </member>
    <member name="P:VO.ListViewItem.Focused">
      <summary>
            A logical value that is TRUE if the list view item is focused.
        </summary>
      <value>A logical value that is TRUE if the list view item is focused.</value>
    </member>
    <member name="M:VO.ListViewItem.GetText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve the text label of a column.
        </summary>
      <param name="symColumnName">The symbolic name of the column whose text you want to retrieve.</param>
      <param name="nRefImageIndex">If this is a reference to a numeric variable, it gets the image index of this column.</param>
      <returns>
            The text label of the specified column.
        </returns>
    </member>
    <member name="M:VO.ListViewItem.GetValue(XSharp.__Usual)">
      <summary>
            Retrieve the value of a column.
        </summary>
      <param name="symColumnName">The symbolic name of the column whose value you want to retrieve.</param>
      <returns>
            The value of the specified column.
        </returns>
    </member>
    <member name="P:VO.ListViewItem.ImageIndex">
      <summary>
            A numeric value that represents the index of the list view item's image in the image list.
        </summary>
      <value>A numeric value that represents the index of the list view item's image in the image list.</value>
    </member>
    <member name="P:VO.ListViewItem.Indent">
      <summary>
            Sets the indentation of a ListView item.
        </summary>
      <value>Sets the indentation of a ListView item.</value>
    </member>
    <member name="P:VO.ListViewItem.ItemIndex">
      <summary>
            A numeric value that represents the index of the list view item in the list view control.
        </summary>
      <value>A numeric value that represents the index of the list view item in the list view control.</value>
    </member>
    <member name="P:VO.ListViewItem.OverlayImageIndex">
      <summary>
            A numeric value that represents the index of the list view item's overlay image in the image list.
        </summary>
      <value>A numeric value that represents the index of the list view item's overlay image in the image list.</value>
    </member>
    <member name="P:VO.ListViewItem.Selected">
      <summary>
            A logical value that is TRUE if the list view item is selected.
        </summary>
      <value>A logical value that is TRUE if the list view item is selected.</value>
    </member>
    <member name="M:VO.ListViewItem.SetText(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the text label of a column.
        </summary>
      <param name="cNewText">The text to be added to the column.</param>
      <param name="symColumnName">The symbolic name of the column whose text you want to set.</param>
      <param name="nImageIndex">A numeric value that represents the index of the list view’s column image in the image list.</param>
    </member>
    <member name="M:VO.ListViewItem.SetValue(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the value of a column.
        </summary>
      <param name="uNewValue">The value to be added to the column.</param>
      <param name="symColumnName">The symbolic name of the column whose value you want to set.</param>
    </member>
    <member name="P:VO.ListViewItem.StateImageIndex">
      <summary>
            A numeric value that represents the index of the list view item's state image in the state image list.
        </summary>
      <value>A numeric value that represents the index of the list view item's state image in the state image list.</value>
    </member>
    <member name="T:VO.ListViewItemEvent">
      <summary>
            Provide information about events generated when operations with list view items are taking place.
        </summary>
    </member>
    <member name="M:VO.ListViewItemEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ListViewItemEvent.ListViewItem">
      <summary>
            The ListViewItem object affected by the list view item event.
        </summary>
      <value>The ListViewItem object affected by the list view item event.</value>
    </member>
    <member name="T:VO.ListViewKeyEvent">
      <summary>
            Provide information about a list view key event, which is generated when a key is pressed while the list view control has the input focus.
        </summary>
    </member>
    <member name="M:VO.ListViewKeyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ListViewKeyEvent.KeyCode">
      <summary>
            The virtual key code of the key that was pressed.
        </summary>
      <value>The virtual key code of the key that was pressed.</value>
    </member>
    <member name="T:VO.ListViewMouseEvent">
      <summary>
            Provide information about a list view mouse event, which is generated when a mouse button in a list view control is clicked or double-clicked.
        </summary>
    </member>
    <member name="M:VO.ListViewMouseEvent.#ctor(XSharp.__Usual)">
      <summary>Construct a ListViewMouseEvent object.</summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent that occurred when the event happened.</param>
    </member>
    <member name="P:VO.ListViewMouseEvent.ButtonID">
      <summary>
            A constant representing which mouse button was clicked. The value can be either BUTTONLEFT or BUTTONRIGHT.
        </summary>
      <value>A constant representing which mouse button was clicked. The value can be either BUTTONLEFT or BUTTONRIGHT.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.IsLeftButton">
      <summary>
            A logical value that is TRUE if this is a left-button event.
        </summary>
      <value>A logical value that is TRUE if this is a left-button event.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.IsRightButton">
      <summary>
            A logical value that is TRUE if this is a right-button event.
        </summary>
      <value>A logical value that is TRUE if this is a right-button event.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.ListViewItem">
      <summary>
            The ListViewItem object which was clicked, if the mouse click occurred on an item; otherwise, a null object.
        </summary>
      <value>The ListViewItem object which was clicked, if the mouse click occurred on an item; otherwise, a null object.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointAboveClientArea">
      <summary>
            A logical value that is TRUE if the click occurred above the list view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred above the list view control's client area.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointBelowClientArea">
      <summary>
            A logical value that is TRUE if the click occurred below the list view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred below the list view control's client area.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointLeftOfClientArea">
      <summary>
            A logical value that is TRUE if the click occurred to the left of the list view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred to the left of the list view control's client area.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointNowhere">
      <summary>
            A logical value that is TRUE if the click occurred inside the list view control but not on an item.
        </summary>
      <value>A logical value that is TRUE if the click occurred inside the list view control but not on an item.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItem">
      <summary>
            A logical value that is TRUE if the click occurred on a list view item in the list view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a list view item in the list view control.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItemImage">
      <summary>
            A logical value that is TRUE if the click occurred on a list view item's image in the list view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a list view item's image in the list view control.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItemLabel">
      <summary>
            A logical value that is TRUE if the click occurred on a list view item's label in the list view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a list view item's label in the list view control.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItemStateImage">
      <summary>
            A logical value that is TRUE if the click occurred on a list view item's state image in the list view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a list view item's state image in the list view control.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointRightOfClientArea">
      <summary>
            A logical value that is TRUE if the click occurred to the right of the list view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred to the right of the list view control's client area.</value>
    </member>
    <member name="P:VO.ListViewMouseEvent.Position">
      <summary>
            A Point object that describes the position where the click occurred in list view control coordinates.
        </summary>
      <value>A Point object that describes the position where the click occurred in list view control coordinates.</value>
    </member>
    <member name="T:VO.Menu">
      <summary>
            Create a menu. Menus consist of items which the user selects for execution; a menu item can be a string, a bitmap, or another menu.
        </summary>
    </member>
    <member name="M:VO.Menu.#ctor(XSharp.__Usual)">
      <summary>
            Construct a menu.
        </summary>
      <param name="xResourceID">The resource ID of the menu. If not specified, the system creates an empty menu.</param>
    </member>
    <member name="P:VO.Menu.Accelerator">
      <summary>
            The accelerator table to be used with this menu.
        </summary>
      <value>The accelerator table to be used with this menu.</value>
    </member>
    <member name="M:VO.Menu.AppendItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a string to the end of this menu.
        </summary>
      <param name="nItemID">
            The ID of the new menu item.
        </param>
      <param name="xNewItem">
            One of the following:oBitmap, cNewItem, oHyperLabel, oSubmenu
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Menu.CheckItem(XSharp.__Usual)">
      <summary>
            Place a check mark to the left of a specified menu item.
        </summary>
      <param name="nItemID">The ID of the menu command.</param>
      <returns>
            MF_CHECKED if checked, MF_UNCHECKED if unchecked
        </returns>
    </member>
    <member name="M:VO.Menu.DeleteItem(XSharp.__Usual)">
      <summary>
            Delete an item from this menu, removing it from memory. (To delete a bitmap or string, specify an ID; to delete a submenu, specify the Menu object.)
        </summary>
      <param name="xItemIdOrMenu">The ID of the menu item to be deleted or the submenu to be deleted.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Menu.Destroy">
      <summary>
            Provide a method to de-instantiate a Menu object.
        </summary>
    </member>
    <member name="M:VO.Menu.DisableItem(XSharp.__Usual)">
      <summary>
            Disable a specified menu item (until a subsequent call to Menu:EnableItem()).
        </summary>
      <param name="nItemID">The ID of the menu item to be disabled.</param>
      <returns>
            A LONG indicating the previous state of the item. If the item does not exist the return value is -1.
        </returns>
    </member>
    <member name="M:VO.Menu.EnableItem(XSharp.__Usual)">
      <summary>
            Enable a specified menu item that was previously disabled.
        </summary>
      <param name="nItemID">The ID of the menu item to be enabled.</param>
      <returns>
            A LONG indicating the previous state of the item. If the item does not exist the return value is -1.
        </returns>
    </member>
    <member name="M:VO.Menu.Handle">
      <summary>
            Return the handle for a menu.
        </summary>
      <param name="nHandleType">
            The type of handle required. Zero (0) is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.Menu.HyperLabel(XSharp.__Usual)">
      <summary>
            Return the hyperlabel attached to the menu item, or NIL if it has none.
        </summary>
      <param name="nItemID">The unique ID of the menu item.</param>
    </member>
    <member name="M:VO.Menu.InsertItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Insert a new menu item before a specified menu item.
        </summary>
      <param name="nItemID">The ID of the new menu item or the sub-menu to add (simply another Menu object). This is how to construct hierarchical menus.</param>
      <param name="xNewItem">
            One of the following:
            <paramref name="cNewItem" />	The caption of the new menu item.
            <paramref name="oHyperLabel" />	The hyperlabel containing the caption to appear as the new menu item.
            <paramref name="oBitmap" />	The bitmap to appear for the new menu item.
        </param>
      <param name="nBeforeID">The ID of the menu item before which the new item should be inserted.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Menu.MakeMenuRtol(XSharp.__Usual)">
      <summary>
            Reverse the order of the menu items in a menu. This is only necessary if you are using an International, bi-directional version of Windows.
        </summary>
      <param name="lRToL">If TRUE, the menu items appear from right to left; if FALSE, they appear from left to right. If omitted, the default value is TRUE.</param>
    </member>
    <member name="M:VO.Menu.Name(XSharp.__Usual)">
      <summary>
            Return the name, as a string, stored in the hyperlabel attached to the menu command, or NIL if there is none.
        </summary>
      <param name="nItemID">The ID of the menu item.</param>
      <param name="nItemID">The ID of the menu item.</param>
    </member>
    <member name="M:VO.Menu.PostInit">
      <summary>
            Implement customized initialization code for the window.
        </summary>
    </member>
    <member name="M:VO.Menu.PreInit">
      <summary>
            Implement customized initialization code for the server.
        </summary>
    </member>
    <member name="M:VO.Menu.RegisterItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Register the hyperlabel for this menu item.
        </summary>
      <param name="nItemID">The ID of the menu item.</param>
      <param name="oHyperLabel">The hyperlabel to be registered for the menu item.</param>
      <param name="hParentMenu">The handle of the menu item being registered. This parameter is only required if the registered item contains a submenu.</param>
      <param name="nPosition">
            The offset of menu item being registered.
            The offset of the submenu of the menu item being registered. (For example, if a menu contains the items 'File', 'Edit', and 'View' and the offset is 1, the Edit submenu will be registered with the Edit menu item.) This parameter is only required if the registered item contains a submenu.
        </param>
    </member>
    <member name="M:VO.Menu.SetAutoUpdate(XSharp.__Usual)">
      <summary>
            Append a section to a specified submenu on a menu. This section automatically keeps track of what MDI child windows are currently open and displays their names on the submenu.
        </summary>
      <param name="nMenuNumber">The offset of the submenu to which the new section should be appended. (For example, if a menu contains the items 'File', 'Edit' and 'View' and the offset is 1, the new section is appended to the 'Edit' submenu.) The default is 0 (the first menu item).</param>
    </member>
    <member name="M:VO.Menu.ShowAsPopup(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display menu as a local pop-up menu.
        </summary>
      <param name="oOwner">The window that owns the local pop-up menu.</param>
      <param name="oPoint">The point, relative to the client area, at which to display the menu. If omitted, the menu is displayed at the current mouse cursor position.</param>
      <param name="kButton">The button constant that indicates which button the menu will track. Values can be PM_LEFTBUTTON and PM_RIGHTBUTTON. If omitted, the menu tracks the left mouse button.</param>
      <param name="kAlignment">The alignment constant that indicates how the menu will be aligned with respect to the display position of the menu. Values can be PM_ALIGNCENTER, PM_ALIGNLEFT, and PM_ALIGNRIGHT. If omitted, the menu is aligned to the left of the display position.</param>
      <param name="oNotOverlap">** missing parameter documentation **</param>
      <returns>
            TRUE if the menu was displayed successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.Menu.ToolBar">
      <summary>
            The toolbar that corresponds to the menu.
        </summary>
      <value>The toolbar that corresponds to the menu.</value>
    </member>
    <member name="M:VO.Menu.UncheckItem(XSharp.__Usual)">
      <summary>
            Remove the check mark (that the user sees) from the menu item. Typically, you do this in response to a MenuCommandEvent on that item.
        </summary>
      <param name="nItemID">The ID of the menu item.</param>
      <returns>
            TRUE if removed successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Menu.UnregisterItem(XSharp.__Usual)">
      <summary>
            Unregister the hyperlabel for this menu item.
        </summary>
      <param name="nItemID">The ID of the menu item.</param>
    </member>
    <member name="T:VO.MenuCommandEvent">
      <summary>
            Provide information about a MenuCommandEvent, generated when the user executes a menu item, either directly or through the use of accelerator keys.
        </summary>
    </member>
    <member name="M:VO.MenuCommandEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="M:VO.MenuCommandEvent.AsString">
      <summary>
            Return the caption of the selected menu item.
        </summary>
    </member>
    <member name="P:VO.MenuCommandEvent.HyperLabel">
      <summary>
            The hyperlabel connected to the menu item that generated this MenuCommandEvent.
        </summary>
      <value>The hyperlabel connected to the menu item that generated this MenuCommandEvent.</value>
    </member>
    <member name="P:VO.MenuCommandEvent.ItemID">
      <summary>
            A numeric value representing the ID of the menu item that generated this MenuCommandEvent.
        </summary>
      <value>A numeric value representing the ID of the menu item that generated this MenuCommandEvent.</value>
    </member>
    <member name="P:VO.MenuCommandEvent.Menu">
      <summary>
            The Menu object that generated this MenuCommandEvent.
        </summary>
      <value>The Menu object that generated this MenuCommandEvent.</value>
    </member>
    <member name="P:VO.MenuCommandEvent.Name">
      <summary>
            A string representing the name stored in the hyperlabel of the menu item that generated this MenuCommandEvent.
        </summary>
      <value>A string representing the name stored in the hyperlabel of the menu item that generated this MenuCommandEvent.</value>
    </member>
    <member name="P:VO.MenuCommandEvent.NameSym">
      <summary>
            A symbol representing the name stored in the hyperlabel of the menu item that generated this MenuCommandEvent.
        </summary>
      <value>A symbol representing the name stored in the hyperlabel of the menu item that generated this MenuCommandEvent.</value>
    </member>
    <member name="T:VO.MenuInitEvent">
      <summary>
            Provide information about a MenuInitEvent, generated when the user first activates a menu for the first time.
        </summary>
    </member>
    <member name="M:VO.MenuInitEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.MenuInitEvent.Menu">
      <summary>
            The Menu object that generated this MenuInitEvent (and is about to be displayed for initialization).
        </summary>
      <value>The Menu object that generated this MenuInitEvent (and is about to be displayed for initialization).</value>
    </member>
    <member name="T:VO.MenuSelectEvent">
      <summary>
            Provide information about a MenuSelectEvent, generated whenever a menu item is highlighted on a menu (menu items are highlighted as the user moves either the mouse or the highlight bar up or down a menu).
        </summary>
    </member>
    <member name="M:VO.MenuSelectEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="M:VO.MenuSelectEvent.AsString">
      <summary>
            Return the caption of the selected menu item.
        </summary>
    </member>
    <member name="P:VO.MenuSelectEvent.HyperLabel">
      <summary>
            The hyperlabel connected to the menu that generated this MenuSelectEvent. From the hyperlabel, you can retrieve additional information about the menu.
        </summary>
      <value>The hyperlabel connected to the menu that generated this MenuSelectEvent. From the hyperlabel, you can retrieve additional information about the menu.</value>
    </member>
    <member name="P:VO.MenuSelectEvent.ItemID">
      <summary>
            A numeric value representing the ID of the menu item that generated this MenuSelectEvent.
        </summary>
      <value>A numeric value representing the ID of the menu item that generated this MenuSelectEvent.</value>
    </member>
    <member name="P:VO.MenuSelectEvent.Menu">
      <summary>
            The Menu object that generated this MenuSelectEvent.
        </summary>
      <value>The Menu object that generated this MenuSelectEvent.</value>
    </member>
    <member name="P:VO.MenuSelectEvent.Name">
      <summary>
            A string representing the name stored in the hyperlabel of the menu items that generated this MenuSelectEvent.
        </summary>
      <value>A string representing the name stored in the hyperlabel of the menu items that generated this MenuSelectEvent.</value>
    </member>
    <member name="P:VO.MenuSelectEvent.NameSym">
      <summary>
            A symbol representing the name stored in the hyperlabel of the menu items that generated this MenuSelectEvent.
        </summary>
      <value>A symbol representing the name stored in the hyperlabel of the menu items that generated this MenuSelectEvent.</value>
    </member>
    <member name="T:VO.MinMaxInfoEvent">
      <summary>
            Provide information about a MinMaxInfoEvent, generated whenever the size or position of a window is about to change. The MinMaxInfoEvent object describes the maximised width, height and position of the maximised window in addition to the minimum and maximum height and width of the window.
        </summary>
    </member>
    <member name="M:VO.MinMaxInfoEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="T:VO.ModelessDialog">
      <summary>
            Create a modeless dialog window (also commonly referred to as a dialog box), which are used to present a collection of controls for user input and output.
        </summary>
    </member>
    <member name="M:VO.ModelessDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a modeless dialog box.
        </summary>
      <param name="oOwner">The window that owns the modeless dialog box.</param>
      <param name="xResourceID">The resource ID of the modeless dialog box.</param>
    </member>
    <member name="T:VO.MonthCalendar">
      <summary>
            Encapsulate a standalone MonthCalendar control.
        </summary>
    </member>
    <member name="M:VO.MonthCalendar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a MonthCalendar object.
        </summary>
      <param name="oOwner">The window that owns the MonthCalendar object.</param>
      <param name="xID">The unique ID for the MonthCalendar object (between 1 and 8000).</param>
      <param name="oPoint">The origin of the MonthCalendar object in canvas coordinates.</param>
      <param name="oDimension">The dimension of the MonthCalendar object in canvas coordinates.</param>
      <param name="dwStyle">
            Constant representing the style of the MonthCalendar object, specified either by a X# style constant or a Windows API style constant. Styles can be combined using the _Or() operator.
        </param>
      <param name="lDataAware">A logical value that is TRUE if the MonthCalendar object is data-aware; otherwise, FALSE. The default is TRUE.</param>
      <param name="nResourceID">The resource ID of the MonthCalendar object.</param>
    </member>
    <member name="P:VO.MonthCalendar.BackgroundColor">
      <summary>
            A Color object describing the background color (between the months) of the MonthCalendar control.
        </summary>
      <value>A Color object describing the background color (between the months) of the MonthCalendar control.</value>
    </member>
    <member name="M:VO.MonthCalendar.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="P:VO.MonthCalendar.FirstDayOfWeek">
      <summary>
            An integer specifying the first day of the week (Monday=0, Tuesday=1, etc.).
        </summary>
      <value>An integer specifying the first day of the week (Monday=0, Tuesday=1, etc.).</value>
    </member>
    <member name="P:VO.MonthCalendar.MaxSelCount">
      <summary>
            The maximum number of days that can be selected in the MonthCalendar control.
        </summary>
      <value>The maximum number of days that can be selected in the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.MonthBackgroundColor">
      <summary>
            A Color object describing the background color (within the month area) of the MonthCalendar control.
        </summary>
      <value>A Color object describing the background color (within the month area) of the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.MonthDelta">
      <summary>
            The number of months the control scrolls when the user clicks the scroll button.
        </summary>
      <value>The number of months the control scrolls when the user clicks the scroll button.</value>
    </member>
    <member name="P:VO.MonthCalendar.Range">
      <summary>
            A DateRange object setting the minimum and maximum allowable dates for the MonthCalendar control.
        </summary>
      <value>A DateRange object setting the minimum and maximum allowable dates for the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.Selection">
      <summary>
            The currently selected date. In the case of a multiple selection, the starting date is returned.
        </summary>
      <value>The currently selected date. In the case of a multiple selection, the starting date is returned.</value>
    </member>
    <member name="P:VO.MonthCalendar.SelectionRange">
      <summary>
            A DateRange object representing the currently selected date range.
        </summary>
      <value>A DateRange object representing the currently selected date range.</value>
    </member>
    <member name="P:VO.MonthCalendar.TextColor">
      <summary>
            A Color object specifying the text color of the MonthCalendar control.
        </summary>
      <value>A Color object specifying the text color of the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.TextValue">
      <summary>
            The current date selection in string format.
        </summary>
      <value>The current date selection in string format.</value>
    </member>
    <member name="P:VO.MonthCalendar.TitleBackgroundColor">
      <summary>
            A Color object specifying the title background color of the MonthCalendar control.
        </summary>
      <value>A Color object specifying the title background color of the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.TitleTextColor">
      <summary>
            A Color object specifying the title text color of the MonthCalendar control.
        </summary>
      <value>A Color object specifying the title text color of the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.Today">
      <summary>
            The date specified as "today" for the MonthCalendar control.
        </summary>
      <value>The date specified as "today" for the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.TrailingTextColor">
      <summary>
            A Color object describing the color of the trailing and leading days, i.e., those not belonging to the current month, of the MonthCalendar control.
        </summary>
      <value>A Color object describing the color of the trailing and leading days, i.e., those not belonging to the current month, of the MonthCalendar control.</value>
    </member>
    <member name="P:VO.MonthCalendar.Value">
      <summary>
            The currently selected date.
        </summary>
      <value>The currently selected date.</value>
    </member>
    <member name="T:VO.MonthCalSelectionEvent">
      <summary>
            Provide information about a monthcalendar selection event, which is generated when a user selects a date in a MonthCalendar control.
        </summary>
    </member>
    <member name="M:VO.MonthCalSelectionEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.MonthCalSelectionEvent.Explicit">
      <summary>
            A Logic value indicating when the user made an explicit date selection within a month calendar control
        </summary>
      <value>A Logic value indicating when the user made an explicit date selection within a month calendar control</value>
    </member>
    <member name="P:VO.MonthCalSelectionEvent.Selection">
      <summary>
            A date value indicating the date the user selected in the control
        </summary>
      <value>A date value indicating the date the user selected in the control</value>
    </member>
    <member name="T:VO.MouseEvent">
      <summary>
            Provide information about the location of the mouse, as well as which mouse button was pressed, when a MouseEvent occurred.
        </summary>
    </member>
    <member name="M:VO.MouseEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.MouseEvent.ButtonID">
      <summary>
            One of the following constants indicating the mouse button the user pressed when a MouseEvent was generated:
        </summary>
      <value>One of the following constants indicating the mouse button the user pressed when a MouseEvent was generated:</value>
    </member>
    <member name="P:VO.MouseEvent.IsControlButton">
      <summary>
            A logical value indicating whether the user pressed the Control key when a MouseEvent was generated.
        </summary>
      <value>A logical value indicating whether the user pressed the Control key when a MouseEvent was generated.</value>
    </member>
    <member name="P:VO.MouseEvent.IsLeftButton">
      <summary>
            A logical value indicating whether the user pressed the left mouse button when a MouseEvent was generated.
        </summary>
      <value>A logical value indicating whether the user pressed the left mouse button when a MouseEvent was generated.</value>
    </member>
    <member name="P:VO.MouseEvent.IsMiddleButton">
      <summary>
            A logical value indicating whether the user pressed the middle mouse button when a MouseEvent was generated.
        </summary>
      <value>A logical value indicating whether the user pressed the middle mouse button when a MouseEvent was generated.</value>
    </member>
    <member name="P:VO.MouseEvent.IsRightButton">
      <summary>
            A logical value indicating whether the user pressed the right mouse button when a MouseEvent was generated.
        </summary>
      <value>A logical value indicating whether the user pressed the right mouse button when a MouseEvent was generated.</value>
    </member>
    <member name="P:VO.MouseEvent.IsShiftButton">
      <summary>
            A logical value indicating whether the user pressed the Shift key when a MouseEvent was generated.
        </summary>
      <value>A logical value indicating whether the user pressed the Shift key when a MouseEvent was generated.</value>
    </member>
    <member name="P:VO.MouseEvent.IsXButton1">
      <summary>
            A logical value determining whether the user pressed the XButton1 causing the MouseEvent to be generated.
        </summary>
      <value>A logical value determining whether the user pressed the XButton1 causing the MouseEvent to be generated.</value>
    </member>
    <member name="P:VO.MouseEvent.IsXButton2">
      <summary>
            A logical value determining whether the user pressed the XButton2 causing the MouseEvent to be generated.
        </summary>
      <value>A logical value determining whether the user pressed the XButton2 causing the MouseEvent to be generated.</value>
    </member>
    <member name="P:VO.MouseEvent.Position">
      <summary>
            A point, in canvas coordinates, representing the position of the mouse pointer on the window when this MouseEvent was generated.
        </summary>
      <value>A point, in canvas coordinates, representing the position of the mouse pointer on the window when this MouseEvent was generated.</value>
    </member>
    <member name="T:VO.MoveEvent">
      <summary>
            Provide information about a MoveEvent, used to notify the program that the user is in the process of moving a window.
        </summary>
    </member>
    <member name="M:VO.MoveEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.MoveEvent.Origin">
      <summary>
            A point representing the new location of a window after a MoveEvent was generated.
        </summary>
      <value>A point representing the new location of a window after a MoveEvent was generated.</value>
    </member>
    <member name="T:VO.MultiLineEdit">
      <summary>
            Create a multiline edit control for displaying and entering information to a variable or field in a server. Multiline edit controls may be bound to a data server field of any type (character, date, logical, numeric, or memo).
        </summary>
    </member>
    <member name="M:VO.MultiLineEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a multiline edit control.
        </summary>
      <param name="oOwner">The window that owns the multiline edit control.</param>
      <param name="xID">The unique ID of the multiline edit control (between 1 and 8000).</param>
      <param name="oPoint">The origin of the multiline edit control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the multiline edit control in canvas coordinates.</param>
      <param name="kStyle">The style of the multiline edit control, specified as one of the following constants listed below.</param>
      <param name="nResourceID">The resource ID of the multiline edit control.</param>
    </member>
    <member name="M:VO.MultiLineEdit.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="M:VO.MultiLineEdit.GetLine(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Get a line of text—specified by position—in a multiline edit control.
        </summary>
      <param name="nLineNumber">
            The position in the multiline edit control at which the desired string is located. Specify one of the following values:
            Value	Position
            0	The current line in the multiline edit control (that is, the line currently containing the text cursor). This is the default.
            1	The first line in the multiline edit control.
            n	The nth line in the multiline edit control.
        </param>
      <param name="nMaxLength">The maximum number of characters to extract from the specified line. The default is to return the entire line, including any actual blanks in the text but excluding any blanks displayed due to word-wrapping.</param>
      <returns>
            The text of the specified line.
        </returns>
    </member>
    <member name="M:VO.MultiLineEdit.GetLineLength(XSharp.__Usual)">
      <summary>
            Get the length of a line of text—specified by position—in a multiline edit control.
        </summary>
      <param name="nLineNumber">
            The position in the multiline edit control at which the desired string is located. Specify one of the following values:
            Value	Position
            0	The current line in the multiline edit control (that is, the line currently containing the text cursor). This is the default.
            1	The first line in the multiline edit control.
            n	The nth line in the multiline edit control.
        </param>
      <returns>
            The length of the specified line.
        </returns>
    </member>
    <member name="P:VO.MultiLineEdit.LineCount">
      <summary>
            A numeric value representing the number of lines in a multiline edit control.
        </summary>
      <value>A numeric value representing the number of lines in a multiline edit control.</value>
    </member>
    <member name="M:VO.MultiLineEdit.LineDown">
      <summary>
            Move the cursor from its current position in a multiline edit control down a single line.
        </summary>
    </member>
    <member name="M:VO.MultiLineEdit.LineUp">
      <summary>
            Move the cursor from its current position in a multiline edit control up a single line.
        </summary>
    </member>
    <member name="M:VO.MultiLineEdit.PageDown">
      <summary>
            Move the cursor from its current position in a multiline edit control down a single page length.
        </summary>
    </member>
    <member name="M:VO.MultiLineEdit.PageUp">
      <summary>
            Move the cursor from its current position in a multiline edit control up a single page length.
        </summary>
    </member>
    <member name="M:VO.MultiLineEdit.ScrollHorizontal(XSharp.__Usual)">
      <summary>
            Scroll the text in a multiline edit control a specified number of characters to the right or left.
        </summary>
      <param name="nChars">The number of characters to scroll. Positive values move the cursor to the right; negative values to the left. The default is no movement.</param>
    </member>
    <member name="M:VO.MultiLineEdit.ScrollVertical(XSharp.__Usual)">
      <summary>
            Scroll the text in a multiline edit control a specified number of characters up or down.
        </summary>
      <param name="nLines">The number of lines to scroll. Positive values move the cursor up; negative values down. The default is no movement, or zero (0) lines.</param>
    </member>
    <member name="T:VO.MultiMediaContainer">
      <summary>
            Implement a container window for displaying multimedia data.
        </summary>
    </member>
    <member name="M:VO.MultiMediaContainer.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Instantiate a MultiMediaContainer control.
        </summary>
      <param name="oOwner">The window that owns the control.</param>
      <param name="xID">The unique ID of the control (between 1 and 8000).</param>
      <param name="oPoint">The origin of the control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the control in canvas coordinates.</param>
      <param name="nResourceID">The resource ID of the control.</param>
    </member>
    <member name="M:VO.MultiMediaContainer.Destroy">
      <summary>
            Provide a method to de-instantiate a MultiMediaContainer object.
        </summary>
    </member>
    <member name="M:VO.MultiMediaContainer.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus, routing various events to their appropriate event handlers.
        </summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler that handled the event.
        </returns>
    </member>
    <member name="P:VO.MultiMediaContainer.FileName">
      <summary>
            The name of the file containing the multimedia data as a string. Major and minor MIME types are derived from the file extension.
        </summary>
      <value>The name of the file containing the multimedia data as a string. Major and minor MIME types are derived from the file extension.</value>
    </member>
    <member name="P:VO.MultiMediaContainer.MajorType">
      <summary>
            The major MIME type of the current multimedia file, e.g., "image".
        </summary>
      <value>The major MIME type of the current multimedia file, e.g., "image".</value>
    </member>
    <member name="M:VO.MultiMediaContainer.MCISendMessage(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Send an MCIWNDM_XXX message to the contained MCI window.
        </summary>
      <param name="dwMsg">The message ID.</param>
      <param name="wParam">The first SendMessage parameter as DWORD. The default is 0.</param>
      <param name="lParam">The second SendMessage parameter as LONG. The default is 0.</param>
      <returns>
            The result value (as LONG).
        </returns>
    </member>
    <member name="P:VO.MultiMediaContainer.MinorType">
      <summary>
            The minor MIME type of the current multimedia file, e.g., "x-msvideo".
        </summary>
      <value>The minor MIME type of the current multimedia file, e.g., "x-msvideo".</value>
    </member>
    <member name="P:VO.MultiMediaContainer.Size">
      <summary>
            A Dimension object defining the size of the control.
        </summary>
      <value>A Dimension object defining the size of the control.</value>
    </member>
    <member name="T:VO.OLEDataWindow">
      <summary>
            Create a data window capable of hosting OLE objects.
        </summary>
    </member>
    <member name="M:VO.OLEDataWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Note 	The functionality in this method has now been incorporated into the Window Class.

            Construct an OLE data window.
        </summary>
      <param name="oOwner">
            The window that owns the OLE data window. The following window types can be owners: App, ShellWindow, TopAppWindow, ChildAppWindow, DialogWindow, DataDialog, or another DataWindow.
            The behavior of the OLE data window is determined by the type of its owner.
        </param>
      <param name="oSource">
            The ID of the resource that defines the layout of the OLE data window. or the resource ID that specifies the location and size of the sub-data window.
            Specifying this argument creates the new OLE data window as a sub-data window on its owner data window (only data window owners can have sub-data windows).
            It should refer to a control defined in the resource entity of the owner data window.
            If <paramref name="oSource" /> is omitted or if <paramref name="oOwner" /> is not a data window, the data window is created as a modal DialogWindow.
        </param>
      <param name="nResourceID">** missing parameter documentation **</param>
    </member>
    <member name="T:VO.OleDragEvent"></member>
    <member name="M:VO.OleDragEvent.#ctor(XSharp.__Usual)">
      <summary>
            Construct an OLEDragEvent.
        </summary>
      <param name="DragInfo">A pointer to a DRAGINFO structure.</param>
    </member>
    <member name="P:VO.OleDragEvent.DataObject">
      <summary>
            A pointer to the OLE object data.
        </summary>
      <value>A pointer to the OLE object data.</value>
    </member>
    <member name="P:VO.OleDragEvent.Effect">
      <summary>
            A constant indicating the effect of the drag and drop operation:
        </summary>
      <value>A constant indicating the effect of the drag and drop operation:</value>
    </member>
    <member name="P:VO.OleDragEvent.ObjectName">
      <summary>
            A string representing the OLE object name. By examining the object and/or server name, the container application can selectively allow or disallow a particular object or server as a drag and drop source.
        </summary>
      <value>A string representing the OLE object name. By examining the object and/or server name, the container application can selectively allow or disallow a particular object or server as a drag and drop source.</value>
    </member>
    <member name="P:VO.OleDragEvent.Position">
      <summary>
            A Point object specifying the position of the event.
        </summary>
      <value>A Point object specifying the position of the event.</value>
    </member>
    <member name="P:VO.OleDragEvent.ServerName">
      <summary>
            A string representing the OLE server name. By examining the object and/or server name, the container application can selectively allow or disallow a particular object or server as a drag and drop source.
        </summary>
      <value>A string representing the OLE server name. By examining the object and/or server name, the container application can selectively allow or disallow a particular object or server as a drag and drop source.</value>
    </member>
    <member name="T:VO.OLEShellWindow">
      <summary>
            Create a specialized shell window that includes support for in-place active OLE objects.
        </summary>
    </member>
    <member name="M:VO.OLEShellWindow.#ctor(XSharp.__Usual)">
      <summary>
            Note -

            Construct an OLE shell window.
        </summary>
      <param name="oOwner">The window that owns the OLE shell window.</param>
    </member>
    <member name="T:VO.OpenDialog">
      <summary>
            Present the user with a standard "file open" dialog box.
        </summary>
    </member>
    <member name="M:VO.OpenDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a standard "file open" dialog box.
        </summary>
      <param name="oOwnWnd">The window that owns the dialog box.</param>
      <param name="cInitPath">The name of the file that is initially selected when the dialog is first shown (i.e., *.* or *.TXT). The default is *.*, which means all files and their extensions.</param>
      <param name="dwFlag">Reserved for future use.</param>
    </member>
    <member name="T:VO.Pair">
      <summary>
            Provide the base class from which all X# objects containing ordered pairs of values are subclassed.
        </summary>
    </member>
    <member name="M:VO.Pair.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a pair.
        </summary>
      <param name="uInt1">The first value of the pair. The default is 0.</param>
      <param name="uInt2">The second value of the pair. The default is 0.</param>
    </member>
    <member name="T:VO.PaletteDialog">
      <summary>
            Present the user with a standard color palette dialog box, allowing the user to define custom colors.
        </summary>
    </member>
    <member name="M:VO.PaletteDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a standard color palette dialog.
        </summary>
      <param name="uOwner">The window that owns the palette dialog.</param>
      <param name="oColor">The color initially selected for the PaletteDialog object. The default is black. (Refer to the Color:Init() method for details on specifying a color.)</param>
    </member>
    <member name="T:VO.Pen">
      <summary>
            Create a pen, which can be used to draw lines in a particular color, style, and width. Pens are used by the Window:LineTo() method and the DrawObject hierarchy.
        </summary>
    </member>
    <member name="M:VO.Pen.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a pen.
        </summary>
      <param name="uColor">The pen's color. The default is black. (Refer to the Color:Init() method for details on specifying a color.)</param>
      <param name="uLineStyle">
            The pen's style, specified as one of the following constants:
        </param>
      <param name="uWidth">The pen's width, in canvas coordinates. The default is 1.</param>
    </member>
    <member name="M:VO.Pen.Destroy">
      <summary>
            Provide a method to de-instantiate a Pen object.
        </summary>
    </member>
    <member name="M:VO.Pen.Handle(XSharp.__Usual)">
      <summary>
            Return the handle for a pen.
        </summary>
      <param name="uType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="T:VO.PieObject">
      <summary>
            Construct a PieObject object.
        </summary>
    </member>
    <member name="M:VO.PieObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a PieObject object.
        </summary>
      <param name="oPoint">The position of the PieObject object in canvas coordinates.</param>
      <param name="oDimension">The dimension of the PieObject object in canvas coordinates.</param>
      <param name="oPen">The pen used to draw the PieObject object. By default, the current pen is used.</param>
      <param name="oBrush">The brush used to fill the PieObject object. By default, the current brush is used.</param>
      <param name="iStartAngle">The starting angle of the pie shape in degrees (0 to 360).</param>
      <param name="iEndAngle">The ending angle of the pie shape in degrees (0 to 360).</param>
    </member>
    <member name="M:VO.PieObject.Draw">
      <summary>
            Draw a PieObject object which represents a pie-shaped portion of an ellipse.
        </summary>
    </member>
    <member name="T:VO.Point">
      <summary>
            Create a point, which is used to describe a location on the canvas of a window.
        </summary>
    </member>
    <member name="M:VO.Point.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a point.
        </summary>
      <param name="nX">The x coordinate of the point. The default is 0.</param>
      <param name="nY">The y coordinate of the point. The default is 0.</param>
    </member>
    <member name="P:VO.Point.X">
      <summary>
            An integer representing this point's x coordinate.
        </summary>
      <value>An integer representing this point's x coordinate.</value>
    </member>
    <member name="P:VO.Point.Y">
      <summary>
            An integer representing this point's y coordinate.
        </summary>
      <value>An integer representing this point's y coordinate.</value>
    </member>
    <member name="T:VO.Pointer">
      <summary>
            Create a mouse cursor, which is used to visually represent the mouse in a window.
        </summary>
    </member>
    <member name="M:VO.Pointer.#ctor(XSharp.__Usual)">
      <summary>
            Load a pointer from a resource entity.
        </summary>
      <param name="xResourceID">
            The resource ID of the desired pointer.
            If <paramref name="kResourceID" /> is specified, use one of the constants listed below:
        </param>
    </member>
    <member name="M:VO.Pointer.Confine(XSharp.__Usual)">
      <summary>
            Confine the movement of this pointer to a given set of screen coordinates.
        </summary>
      <param name="oRect">The bounding box representing the set of screen coordinates in which the pointer can move.</param>
    </member>
    <member name="M:VO.Pointer.Handle">
      <summary>
            Return the handle for a pointer.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.Pointer.Hide">
      <summary>
            Hide this pointer so it is not visible. Hide a control so it is not visible (until a subsequent call to Pointer:Show()).
        </summary>
    </member>
    <member name="P:VO.Pointer.Position">
      <summary>
            A point representing the position of this pointer on the window, in screen coordinates.
        </summary>
      <value>A point representing the position of this pointer on the window, in screen coordinates.</value>
    </member>
    <member name="M:VO.Pointer.Show">
      <summary>
            Display a pointer so it is visible.
        </summary>
    </member>
    <member name="T:VO.Printer">
      <summary>
            Create an object that represents a single print job.
        </summary>
    </member>
    <member name="M:VO.Printer.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a printer job.
        </summary>
      <param name="cJobname">The name passed to Print Manager, a Windows application, to identify the print job. If omitted, the default is NULL_STRING.</param>
      <param name="oDevice">The printing device to use. If omitted, the default is the currently selected printer installed by the user through Windows.</param>
    </member>
    <member name="M:VO.Printer.Abort">
      <summary>
            Instruct the printer to abort the current print job.
        </summary>
    </member>
    <member name="M:VO.Printer.Destroy">
      <summary>
            Provide a method to de-instantiate a Printer object.
        </summary>
    </member>
    <member name="M:VO.Printer.Handle(XSharp.__Usual)">
      <summary>
            Return the handle for a printer.
        </summary>
      <param name="ServiceID">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="ServiceID" /> is omitted.
        </param>
      <returns>
            A handle describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.Printer.Idle">
      <summary>
            Instruct the system to process events while printing.
        </summary>
    </member>
    <member name="M:VO.Printer.IsValid">
      <summary>
            Determine if a printer is valid.
        </summary>
      <returns>
            TRUE if valid; otherwise, FALSE.
        </returns>
    </member>
    <member name="F:VO.Printer.lprAbort"></member>
    <member name="M:VO.Printer.NewPage">
      <summary>
            Direct the attached printer to eject to a new page.
        </summary>
    </member>
    <member name="M:VO.Printer.PrinterError(XSharp.__Usual)">
      <summary>
            Called if a printer error occurs. PrintErrorEvent is interrogated to identify the type of error has occurred.
        </summary>
      <param name="oPerr">The printer error event that is being handled.</param>
      <returns>
            TRUE if the print job is to be retried (i.e., the error is to be ignored); FALSE if the print job is to be canceled.
        </returns>
    </member>
    <member name="M:VO.Printer.PrinterExpose(XSharp.__Usual)">
      <summary>
            Invoked for each page (or part of a page) of the print job whenever it needs repainting.
        </summary>
      <param name="oPrinterExposeEvt">The expose event that describes which page (or part of a page) of the print job needs painting.</param>
      <returns>
            TRUE if there is another page (or part of a page) to print; FALSE if the last page has been printed.
        </returns>
    </member>
    <member name="M:VO.Printer.Start(XSharp.__Usual)">
      <summary>
            Start a print job or contiguous portion of a print job.
        </summary>
      <param name="oRange">The range of pages to be printed. For example, to print pages 5 to 10 inclusive, specify Start(Range{5,10}). If omitted, Printer:PrinterExpose() is called until FALSE is returned.</param>
    </member>
    <member name="T:VO.PrinterErrorEvent">
      <summary>
            Provide information about a PrinterErrorEvent, used to describe errors that occur during a print job (for example, insufficient memory or disk space).
        </summary>
    </member>
    <member name="M:VO.PrinterErrorEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.PrinterErrorEvent.ErrorType">
      <summary>
            One of the following events that are passed to the Printer:Expose() method, when the system requires another page to be painted and sent to the Print Manager:
        </summary>
      <value>One of the following events that are passed to the Printer:Expose() method, when the system requires another page to be painted and sent to the Print Manager:</value>
    </member>
    <member name="T:VO.PrinterExposeEvent">
      <summary>
            Provides facilities for determining the number of the page to be painted, as well as the area of the page to be painted.
        </summary>
    </member>
    <member name="M:VO.PrinterExposeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.PrinterExposeEvent.ExposedArea">
      <summary>
            A bounding box representing the area of the page to be printed, in printer coordinates.
        </summary>
      <value>A bounding box representing the area of the page to be printed, in printer coordinates.</value>
    </member>
    <member name="P:VO.PrinterExposeEvent.PageNo">
      <summary>
            A numeric value representing the number of the page to be painted.
        </summary>
      <value>A numeric value representing the number of the page to be painted.</value>
    </member>
    <member name="T:VO.PrintingDevice">
      <summary>
            Create an object that allows you to set up the printing device for an application. It also allows you to invoke the standard dialog box to configure a default printer and change values, such as changing the page orientation or paper source.
        </summary>
    </member>
    <member name="M:VO.PrintingDevice.#ctor(XSharp.__Usual)">
      <summary>
            Construct a PrintingDevice object.
        </summary>
      <param name="uName">
            The comma-separated string indicating the printer driver to be used. In Windows, this string should be given in the following form:
            &lt;PrinterInfo&gt;,&lt;PrinterDriver&gt;,&lt;Port&gt;
            For example, you might specify:
            'PostScript Printer,PSSCRIPT,LPT1:'
            If omitted, the default printer driver is used.
            NOTE: There are no spaces at the beginning or end of each part of this string. Spaces should only be used where they appear in the parameter.
        </param>
    </member>
    <member name="P:VO.PrintingDevice.Copies">
      <summary>
            Specifies the number of copies printed if the device supports multiple-page copies.
        </summary>
      <value>Specifies the number of copies printed if the device supports multiple-page copies.</value>
    </member>
    <member name="M:VO.PrintingDevice.Destroy">
      <summary>
            Provide a method to de-instantiate a PrintingDevice object.
        </summary>
    </member>
    <member name="P:VO.PrintingDevice.Device">
      <summary>
            Specifies the printer device to be used.
        </summary>
      <value>Specifies the printer device to be used.</value>
    </member>
    <member name="M:VO.PrintingDevice.DeviceCapabilities(XSharp.__Usual)">
      <summary>
            Obtain information about the capabilities printing device.
        </summary>
      <param name="wCapability">
            The capability to be queried, specified by a Windows API device capability constant. For example, you might specify:
            'DC_PAPERNAMES'
            If omitted, the default capability is used.
        </param>
      <returns>
            A usual variable containing a X# dynamic array or WORD. A value represented by the constant CAPABILITY_NOT_AVAILABLE indicates that the attempt to retrieve the value was unsuccessful. The return value varies according to the <paramref name="kCapability" />. Refer to the Windows SDK topic on DeviceCapabilites for return values. If the SDK indicates that the return value is an array or a point structure then the return value will contain a VO dynamic array; otherwise it will contain a word.
        </returns>
    </member>
    <member name="P:VO.PrintingDevice.Driver">
      <summary>
            A string representing the printer driver to be used.
        </summary>
      <value>A string representing the printer driver to be used.</value>
    </member>
    <member name="M:VO.PrintingDevice.GetDevMode">
      <summary>
            Retrieve a pointer to the DevMode structure.
        </summary>
      <returns>
            A pointer to the DevMode structure or 0 if the structure is inaccessible. You should store this pointer in a variable typed "AS _WINDEVMODE".
        </returns>
    </member>
    <member name="M:VO.PrintingDevice.IsValid">
      <summary>
            Determine if a printing device is valid.
        </summary>
      <returns>
            TRUE if valid; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.PrintingDevice.Orientation">
      <summary>
            Specifies whether the orientation of the paper is portrait or landscape.
        </summary>
      <value>Specifies whether the orientation of the paper is portrait or landscape.</value>
    </member>
    <member name="P:VO.PrintingDevice.PaperHeight">
      <summary>
            Specifies paper length, in tenths of a millimeter.
        </summary>
      <value>Specifies paper length, in tenths of a millimeter.</value>
    </member>
    <member name="P:VO.PrintingDevice.PaperSize">
      <summary>
            Specifies the size of the paper to print on.
        </summary>
      <value>Specifies the size of the paper to print on.</value>
    </member>
    <member name="P:VO.PrintingDevice.PaperWidth">
      <summary>
            Specifies paper width, in tenths of a millimeter. This parameter overrides the paper width specified by the dmPaperSize member.
        </summary>
      <value>Specifies paper width, in tenths of a millimeter. This parameter overrides the paper width specified by the dmPaperSize member.</value>
    </member>
    <member name="P:VO.PrintingDevice.Port">
      <summary>
            Specifies the default port setting for the printer.
        </summary>
      <value>Specifies the default port setting for the printer.</value>
    </member>
    <member name="M:VO.PrintingDevice.SetUp">
      <summary>
            Display the standard Windows Printer Setup dialog box, which allows the user to configure or change a default printer and set page orientation, paper size, and paper source (e.g., Manual Feed, Upper Tray, etc.).
        </summary>
      <returns>
            Returns TRUE, if the OK button is pressed; or FALSE, if the Cancel button is pressed, thus closing the Windows Printer Setup dialog box.
        </returns>
    </member>
    <member name="M:VO.PrintingDevice.UpdateDevMode">
      <summary>
            Apply changes made to the DevMode structure to the associated device driver.
        </summary>
      <returns>
            A logic indicating the success of the update.
        </returns>
    </member>
    <member name="T:VO.ProgressBar">
      <summary>
            Create a progress bar.
        </summary>
    </member>
    <member name="M:VO.ProgressBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a progress bar.
        </summary>
      <param name="oOwner">The window that owns the progress bar.</param>
      <param name="xID">The unique ID of the progress bar (between 1 and 8000).</param>
      <param name="oPoint">The origin of the progress bar in canvas coordinates.</param>
      <param name="oDimension">The dimension of the progress bar in canvas coordinates.</param>
      <param name="kStyle">The style of the progress bar.</param>
      <param name="lDataAware">A logical value specifying whether the progress bar is data aware.</param>
      <param name="nResourceID">The resource ID of the progress bar.</param>
    </member>
    <member name="M:VO.ProgressBar.Advance(XSharp.__Usual)">
      <summary>
            Advance the progress bar to a new position.
        </summary>
      <param name="dwNewPosition">The amount by which the progress bar is advanced. If omitted, the progress bar is advanced by the unit size.</param>
      <returns>
            The amount by which the progress bar is advanced.
        </returns>
    </member>
    <member name="P:VO.ProgressBar.BackgroundColor">
      <summary>
            A Color object specifying the background color for the progress bar.
        </summary>
      <value>A Color object specifying the background color for the progress bar.</value>
    </member>
    <member name="P:VO.ProgressBar.BarColor">
      <summary>
            A Color object specifying the bar color for the progress bar control.
        </summary>
      <value>A Color object specifying the bar color for the progress bar control.</value>
    </member>
    <member name="P:VO.ProgressBar.OldPosition">
      <summary>
            A numeric value representing the previous position of the progress bar.
        </summary>
      <value>A numeric value representing the previous position of the progress bar.</value>
    </member>
    <member name="P:VO.ProgressBar.Position">
      <summary>
            A numeric value representing the current position of the progress bar.
        </summary>
      <value>A numeric value representing the current position of the progress bar.</value>
    </member>
    <member name="P:VO.ProgressBar.Range">
      <summary>
            A Range object representing the minimum and maximum values currently in use for the progress bar.
        </summary>
      <value>A Range object representing the minimum and maximum values currently in use for the progress bar.</value>
    </member>
    <member name="P:VO.ProgressBar.UnitSize">
      <summary>
            A numeric value representing the unit size currently associated with the progress bar.
        </summary>
      <value>A numeric value representing the unit size currently associated with the progress bar.</value>
    </member>
    <member name="T:VO.PushButton">
      <summary>
            Create a push button, which can be used to initiate an event and associated action when clicked on by the user.
        </summary>
    </member>
    <member name="M:VO.PushButton.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a push button.
        </summary>
      <param name="oOwner">The window that owns the push button.</param>
      <param name="xID">The unique ID of the push button (between 1 and 8000).</param>
      <param name="oPoint">The origin of the push button in canvas coordinates.</param>
      <param name="oDimension">The dimension of the push button in canvas coordinates.</param>
      <param name="cText">The text that appears in the push button. The default is NULL_STRING.</param>
      <param name="kStyle">
            The style of the push button, specified by a Windows API style constant.
        </param>
      <param name="nResourceID">The resource ID of the push button.</param>
    </member>
    <member name="P:VO.PushButton.Value">
      <summary>
            PushButton:Value always returns FALSE, since it has a single state.
        </summary>
      <value>PushButton:Value always returns FALSE, since it has a single state.</value>
    </member>
    <member name="T:VO.RadioButton">
      <summary>
            Create a radio button.
        </summary>
    </member>
    <member name="M:VO.RadioButton.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a radio button.
        </summary>
      <param name="oOwner">The window that owns the radio button.</param>
      <param name="xID">The unique ID of the radio button (between 1 and 8000).</param>
      <param name="oPoint">The origin of the radio button in canvas coordinates.</param>
      <param name="oDimension">The dimension of the radio button in canvas coordinates.</param>
      <param name="cText">The caption text of the radio button. If omitted, the default is NULL_STRING.</param>
      <param name="kStyle">
            The style of the radio button, specified by a Windows API style constant.
        </param>
      <param name="nResourceID">The resource ID of the radio button.</param>
    </member>
    <member name="M:VO.RadioButton.Destroy">
      <summary>
            Provide a method to de-instantiate a RadioButton object.
        </summary>
    </member>
    <member name="P:VO.RadioButton.Pressed">
      <summary>
            A logical value representing the current state of the radio button (TRUE if it is on, FALSE if it is off).
        </summary>
      <value>A logical value representing the current state of the radio button (TRUE if it is on, FALSE if it is off).</value>
    </member>
    <member name="P:VO.RadioButton.TextValue">
      <summary>
            RadioButton:TextValue is set to the RadioButton:Caption text.
        </summary>
      <value>RadioButton:TextValue is set to the RadioButton:Caption text.</value>
    </member>
    <member name="P:VO.RadioButton.Value">
      <summary>
            RadioButton:Value contains TRUE if the radio button is in the pressed (ON) state or FALSE if it is not pressed (OFF).
        </summary>
      <value>RadioButton:Value contains TRUE if the radio button is in the pressed (ON) state or FALSE if it is not pressed (OFF).</value>
    </member>
    <member name="T:VO.RadioButtonGroup">
      <summary>
            A group of radio buttons considered as a combination control, presenting a set of options and returning a single value.
        </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a radio button group.
        </summary>
      <param name="oOwner">The window that owns the radio button group.</param>
      <param name="xID">The unique ID of the radio button group (between 1 and 8000) or the resource ID of the radio button group.</param>
      <param name="uPoint">The origin of the group box in canvas coordinates.</param>
      <param name="uDimension">The dimension of the group box in canvas coordinates.</param>
      <param name="cText">The caption text displayed when the group box containing the radio button group is shown. By default, this value is the caption in the dialog template, defined when the dialog is initialized.</param>
    </member>
    <member name="M:VO.RadioButtonGroup.Button(XSharp.__Usual)">
      <summary>
            Retrieve a specific radio button.
        </summary>
      <param name="nButtonPosition">The position of the radio button in the array that was used to set up the group (in FillUsing()).</param>
      <returns>
            The RadioButton object at the specified position in the array. Note that the radio button position in the array may not correspond to the order the radio buttons are displayed in the group box. NIL is returned if there is no radio button at the indicated position.
        </returns>
    </member>
    <member name="M:VO.RadioButtonGroup.Disable">
      <summary>
            Disable a radio button group (until a subsequent call to RadioButtonGroup:Enable()).
        </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.Enable">
      <summary>
            Enable a radio button group that was previously disabled.
        </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.FillUsing(XSharp.__Usual)">
      <summary>
            Specify the radio buttons that make up the group and the set of values corresponding to these buttons, using an array.
        </summary>
      <param name="aContents">
            The array containing existing radio buttons or the values that should be used to create radio buttons. A two-dimensional array may be used to define the values to be returned to the program when a radio button is selected; this 'other' value is what is returned in the RadioButtonGroup:Value property, and what is stored in the database if the control is associated with a database field. If a one-dimensional array is specified, the values are returned as 1, 2, 3...
            Thus, the array may be specified in one of two formats:
            1.	One-dimensional array containing radio button objects that are to be linked to the group
            2.	Two-dimensional arrays, each element containing a RadioButton object and the corresponding value returned to the program
            Note: the two dimensional array has the same structure as that returned by DBServer:GetLookupTable().
        </param>
    </member>
    <member name="M:VO.RadioButtonGroup.Hide">
      <summary>
            Hide a radio button group so it is not visible (until a subsequent call to RadioButtonGroup:Show()).
        </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.SetFocus">
      <summary>
            Pass input focus to the selected radio button within the radio button group.
        </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.Show">
      <summary>
            Display a radio button group so it is visible.
        </summary>
    </member>
    <member name="P:VO.RadioButtonGroup.TextValue">
      <summary>
            RadioButtonGroup:TextValue holds the first element of the FillUsing() array
        </summary>
      <value>RadioButtonGroup:TextValue holds the first element of the FillUsing() array</value>
    </member>
    <member name="P:VO.RadioButtonGroup.Value">
      <summary>
            Contains the group value setting (specified on the Window Editor Property Window) associated with the radio button within the group that is selected.
        </summary>
      <value>Contains the group value setting (specified on the Window Editor Property Window) associated with the radio button within the group that is selected.</value>
    </member>
    <member name="T:VO.Range">
      <summary>
            Create a range, representing the minimum and maximum values of the coordinates (or scroll units) that the thumb position on a scroll bar can move—up or down, left or right.
        </summary>
    </member>
    <member name="M:VO.Range.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a range.
        </summary>
      <param name="nMin">The minimum value in the range. The default is 0.</param>
      <param name="nMax">The maximum value in the range. The default is 0.</param>
    </member>
    <member name="P:VO.Range.Max">
      <summary>
            A numeric value representing the maximum value in this range.
        </summary>
      <value>A numeric value representing the maximum value in this range.</value>
    </member>
    <member name="P:VO.Range.Min">
      <summary>
            A numeric value representing the minimum value in this range.
        </summary>
      <value>A numeric value representing the minimum value in this range.</value>
    </member>
    <member name="T:VO.RectangleObject">
      <summary>
            Create a RectangleObject object; this class is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various geometric objects.
        </summary>
    </member>
    <member name="M:VO.RectangleObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a rectangle.
        </summary>
      <param name="oPoint">The origin of the rectangle, in canvas coordinates.</param>
      <param name="oDimension">The dimension of the rectangle, in canvas coordinates.</param>
      <param name="oPen">
            The pen to be used to draw the rectangle. By default, <paramref name="oPen" /> is set to NIL, which causes the current pen to be used.
        </param>
      <param name="oBrush">The brush to be used to fill the rectangle. If omitted, the default is NIL, which causes the current brush to be used.</param>
    </member>
    <member name="M:VO.RectangleObject.Draw">
      <summary>
            Draw the rectangle on the window.
        </summary>
    </member>
    <member name="T:VO.ResizeEvent">
      <summary>
            Provide information about the ResizeEvent, used to indicate that a window has been resized.
        </summary>
    </member>
    <member name="M:VO.ResizeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ResizeEvent.Height">
      <summary>
            A numeric value representing the new height of the canvas area of the window that generated this resize event, in canvas coordinates.
        </summary>
      <value>A numeric value representing the new height of the canvas area of the window that generated this resize event, in canvas coordinates.</value>
    </member>
    <member name="P:VO.ResizeEvent.Size">
      <summary>
            A dimension representing the new size of the canvas area of the window that generated this resize event, in canvas coordinates.
        </summary>
      <value>A dimension representing the new size of the canvas area of the window that generated this resize event, in canvas coordinates.</value>
    </member>
    <member name="P:VO.ResizeEvent.Width">
      <summary>
            A numeric value representing the new width, in canvas coordinates, of the canvas area of the window that generated this resize event.
        </summary>
      <value>A numeric value representing the new width, in canvas coordinates, of the canvas area of the window that generated this resize event.</value>
    </member>
    <member name="T:VO.ResourceFile">
      <summary>
            Identify a file containing resource information.
        </summary>
    </member>
    <member name="M:VO.ResourceFile.#ctor(XSharp.__Usual)">
      <summary>
            Construct a resource file object.
        </summary>
      <param name="sName">The name of the resource file, either an .EXE or .DLL file. If omitted, the default is the executable (.EXE) program file name.</param>
    </member>
    <member name="M:VO.ResourceFile.Destroy">
      <summary>
            Provide a method to de-instantiate a ResourceFile object.
        </summary>
    </member>
    <member name="T:VO.ResourceID">
      <summary>
            Identify and create a ResourceID using a numeric resource ID.
        </summary>
    </member>
    <member name="M:VO.ResourceID.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a ResourceID object.
        </summary>
      <param name="xID">
            The unique ID between 1 and 8000 of the resource ID or a string describing the resource.
            Strings can only identify resource blocks, such as dialogs or menus. For individual controls, you must use numeric IDs.
        </param>
      <param name="xResourceFile">The resource file that includes the resource. The default is the current executable file.</param>
    </member>
    <member name="T:VO.ResourceString">
      <summary>
            Extract strings from a resource entity.
        </summary>
    </member>
    <member name="M:VO.ResourceString.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Load a resource string from the resource entity.
        </summary>
      <param name="xResourceID">The resource ID of the desired string.</param>
      <param name="nMaxLen">The maximum length that you expect the string to be in any language. For example, if the string is translated into French, it can be longer than in English. The default is 255. If you set it too low, Windows truncates the resource string.</param>
    </member>
    <member name="M:VO.ResourceString.AsString">
      <summary>
            Return the text stored in a resource string.
        </summary>
    </member>
    <member name="P:VO.ResourceString.Length">
      <summary>
            A numeric value representing the length—the number of characters—of a ResourceString object.
        </summary>
      <value>A numeric value representing the length—the number of characters—of a ResourceString object.</value>
    </member>
    <member name="P:VO.ResourceString.Value">
      <summary>
            The value held in the ResourceString object.
        </summary>
      <value>The value held in the ResourceString object.</value>
    </member>
    <member name="T:VO.RichEdit">
      <summary>
            Create a rich edit control.
        </summary>
    </member>
    <member name="M:VO.RichEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a rich edit.
        </summary>
      <param name="oOwner">The window that owns the rich edit.</param>
      <param name="xID">The unique ID of the rich edit (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of the rich edit.</param>
      <param name="oPoint">The origin of the rich edit in canvas coordinates.</param>
      <param name="oDimension">The dimension of the rich edit in canvas coordinates.</param>
      <param name="kStyle">The style of the rich edit.</param>
    </member>
    <member name="P:VO.RichEdit.Alignment">
      <summary>
            A constant representing the paragraph alignment of the rich edit:
        </summary>
      <value>A constant representing the paragraph alignment of the rich edit:</value>
    </member>
    <member name="P:VO.RichEdit.Background"></member>
    <member name="P:VO.RichEdit.BackgroundColor">
      <summary>
            A Color object representing the background color of the rich edit
        </summary>
      <value>A Color object representing the background color of the rich edit</value>
    </member>
    <member name="M:VO.RichEdit.CanPaste(XSharp.__Usual)">
      <summary>
            Determine whether the rich edit can paste the specified clipboard format.
        </summary>
      <param name="dwClipboardFormat">
            The specified Clipboard format. If not specified, it defaults to 0, meaning that the rich edit object will try any format currently on the Clipboard.
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.RichEdit.EnableAdvancedTypography(XSharp.__Usual)">
      <summary>
            Sets the ability for advanced line breaking and line formatting.
        </summary>
      <param name="lEnable">TRUE turns this on, False turns this off.</param>
    </member>
    <member name="M:VO.RichEdit.GetOption(XSharp.__Usual)">
      <summary>
            Determine the status of a particular option for the rich edit.
        </summary>
      <param name="kOption">One of the following constants representing the option whose status you want to check:</param>
      <returns>
            TRUE if the option is enabled; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.RichEdit.GetTabStops">
      <summary>
            Set the TabStops for a rich edit control.
        </summary>
      <returns>
            An array of tab values.
        </returns>
    </member>
    <member name="M:VO.RichEdit.GetTextRange(XSharp.__Usual)">
      <summary>
            Retrieve a range of characters from the rich edit.
        </summary>
      <param name="oRange">The range of characters to retrieve.</param>
      <returns>
            A string representing the retrieved range of characters.
        </returns>
    </member>
    <member name="M:VO.RichEdit.GetWordBreak(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Locate a particular type of word break in the rich edit.
        </summary>
      <param name="nCharPos">The character position from which to find the work break.</param>
      <param name="kWordBreakType">One of the following constants representing the type of word break to retrieve:</param>
      <returns>
            If <paramref name="kWordBreakType" /> is REGWB_ISDELIMITER this function returns a logical value that is TRUE if the specified character is a delimiter and FALSE otherwise. If <paramref name="kWordBreakType" /> is any other value, the function returns a numeric value representing the character position of the word break.
        </returns>
    </member>
    <member name="M:VO.RichEdit.HideSelection(XSharp.__Usual)">
      <summary>
            Hide the selection in the rich edit.
        </summary>
      <param name="lTemporary">A logical value that is TRUE if the selection will be hidden temporarily and FALSE otherwise. If omitted, the default is TRUE.</param>
    </member>
    <member name="M:VO.RichEdit.LineFromCharacter(XSharp.__Usual)">
      <summary>
            Determine the line number of the rich edit from the specified character position.
        </summary>
      <param name="nCharacterPos">A numeric value specifying the character position whose line number you want to obtain.</param>
      <returns>
            The line number of the specified character position.
        </returns>
    </member>
    <member name="M:VO.RichEdit.LoadFromFile(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Load data from an RTF file into the rich edit control.
        </summary>
      <param name="cFileName">The name of the file you wish to load.</param>
      <param name="dwFormat">** missing parameter documentation **</param>
      <returns>
            TRUE, if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="M:VO.RichEdit.Margin(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the margins for the currently selected text in the rich edit control.
        </summary>
      <param name="nStart">Integer representing the indentation of the first line in the paragraph.</param>
      <param name="nRight">Integer representing the right margin of the paragraph.</param>
      <param name="nOffset">
            Integer representing the indentation of the second line and subsequent lines, relative to <paramref name="nStart" />. If this value is positive, a hanging indent is created (first line is 'outdented' and the subsequent lines are indented). If this value is negative, the first line is indented and the subsequent lines are outdented.
        </param>
      <returns>
            TRUE, if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="P:VO.RichEdit.Numbering">
      <summary>
            A constant representing the type of paragraph numbering currently associated with the rich edit:
        </summary>
      <value>A constant representing the type of paragraph numbering currently associated with the rich edit:</value>
    </member>
    <member name="M:VO.RichEdit.PasteSpecial(XSharp.__Usual)">
      <summary>
            Paste a particular clipboard format in the rich edit.
        </summary>
      <param name="dwClipboardFormat">The specified clipboard format. Refer to the SetClipboardData() function in your Microsoft Win32 Software Development Kit documentation for definitions of valid format constants.</param>
    </member>
    <member name="P:VO.RichEdit.PrimaryIndent">
      <summary>
            A numeric value representing the indent of the first line of a paragraph in the rich edit.
        </summary>
      <value>A numeric value representing the indent of the first line of a paragraph in the rich edit.</value>
    </member>
    <member name="M:VO.RichEdit.Print(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Print the contents of the rich edit.
        </summary>
      <param name="oPrintingDevice">The PrintingDevice object or printing device name that will receive the output. If omitted, a print dialog box is raised for the user to choose a print destination.</param>
      <param name="oRange">The range of characters to print. If omitted, the entire range of characters is printed.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.RichEdit.Protected">
      <summary>
            A logical value that is TRUE if the text in the rich edit is protected from modification.
        </summary>
      <value>A logical value that is TRUE if the text in the rich edit is protected from modification.</value>
    </member>
    <member name="P:VO.RichEdit.RightMargin">
      <summary>
            A numeric value representing the right margin of the rich edit.
        </summary>
      <value>A numeric value representing the right margin of the rich edit.</value>
    </member>
    <member name="M:VO.RichEdit.SaveToFile(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Save the current contents of the control to an RTF file.
        </summary>
      <param name="cFileName">The name of the file to which you wish to save.</param>
      <param name="dwFormat">** missing parameter documentation **</param>
      <returns>
            TRUE, if successful; otherwise FALSE.
        </returns>
    </member>
    <member name="P:VO.RichEdit.SecondaryIndent">
      <summary>
            A numeric value representing the indent of the second and subsequent lines of a paragraph in the rich edit.
        </summary>
      <value>A numeric value representing the indent of the second and subsequent lines of a paragraph in the rich edit.</value>
    </member>
    <member name="M:VO.RichEdit.Seek(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Search the rich edit for the specified text.
        </summary>
      <param name="cText">The text for which to search.</param>
      <param name="oRange">The range of characters in which to search.</param>
      <param name="lMatchCase">A logical value that is TRUE if the search is case-sensitive. If omitted, the default is FALSE.</param>
      <param name="lWholeWord">A logical value that is TRUE if the search must match on a whole word. If omitted, the default is FALSE.</param>
      <param name="lReturnRange">A logical value that is FALSE if the return value will be the numeric character position of the found text or TRUE if it will be a Range object representing the range of characters in which the text was found. If omitted, the default is FALSE.</param>
      <param name="lSearchUp">
            If lSearchUp is TRUE, the search is from the end of the current selection to the beginning of the document. If lSearchUp is FALSE, the search is from the end of the current selection to the end of the document. If omitted the default is FALSE.
            For Rich Edit 1.0 the lSearchUp parameter is ignored. The search is always from the end of the current selection to the end of the document.
        </param>
      <returns>
            If <paramref name="lReturnRange" /> is TRUE, the range of characters in which the text was found. If <paramref name="lReturnRange" /> is FALSE, the character position where the text was found.
        </returns>
    </member>
    <member name="P:VO.RichEdit.SelectedText">
      <summary>
            A string representing the currently selected text in the rich edit.
        </summary>
      <value>A string representing the currently selected text in the rich edit.</value>
    </member>
    <member name="P:VO.RichEdit.Selection">
      <summary>
            A Selection object representing the currently selected text in the rich edit.
        </summary>
      <value>A Selection object representing the currently selected text in the rich edit.</value>
    </member>
    <member name="P:VO.RichEdit.SelectionType">
      <summary>
            A constant representing the type of the current selection in the rich edit:
        </summary>
      <value>A constant representing the type of the current selection in the rich edit:</value>
    </member>
    <member name="M:VO.RichEdit.SetOption(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set an option for the rich edit.
        </summary>
      <param name="kOption">One of the following constants representing the option you want to set:</param>
      <param name="symOperation">
            One of the following symbolic names representing the operation to perform:
            <list type="table"><listheader><term>Operation</term><description>Description</description></listheader><item><term>#Add</term><description>Add this option to the current options. This is the default.</description></item><item><term>#Change</term><description>Change to this option, removing all other options</description></item><item><term>#Keep</term><description>Keep only this option</description></item><item><term>#Remove</term><description>Remove only this option</description></item></list></param>
    </member>
    <member name="M:VO.RichEdit.SetTabStops(XSharp.__Usual)">
      <summary>
            Set the TabStops for a rich edit control.
        </summary>
      <param name="aTabStops">An array of values.</param>
    </member>
    <member name="M:VO.RichEdit.ShowSelection(XSharp.__Usual)">
      <summary>
            Show the selection in the rich edit.
        </summary>
      <param name="lTemporary">A logical value that is TRUE if the selection will be shown temporarily and FALSE otherwise. If omitted, the default is TRUE.</param>
    </member>
    <member name="P:VO.RichEdit.TabStopCount">
      <summary>
            A numeric value representing the number of tab stops in the rich edit.
        </summary>
      <value>A numeric value representing the number of tab stops in the rich edit.</value>
    </member>
    <member name="P:VO.RichEdit.TextColor">
      <summary>
            A Color object representing the text color of the rich edit.
        </summary>
      <value>A Color object representing the text color of the rich edit.</value>
    </member>
    <member name="P:VO.RichEdit.TextLimit">
      <summary>
            A numeric value representing the maximum amount of text in the rich edit. The default is 32KB.
        </summary>
      <value>A numeric value representing the maximum amount of text in the rich edit. The default is 32KB.</value>
    </member>
    <member name="P:VO.RichEdit.Value">
      <summary>
            A string representing the text contents of the rich edit
        </summary>
      <value>A string representing the text contents of the rich edit</value>
    </member>
    <member name="T:VO.RichEditProtectEvent">
      <summary>
            Provide information about a rich edit protection event, which is generated when the user attempts to edit protected text in a rich edit control.
        </summary>
    </member>
    <member name="P:VO.RichEditProtectEvent.Selection">
      <summary>
            A selection object representing the selection range in the rich edit.
        </summary>
      <value>A selection object representing the selection range in the rich edit.</value>
    </member>
    <member name="P:VO.RichEditProtectEvent.SelectionRange">
      <summary>
            A Range object representing the selection range in the rich edit.
        </summary>
      <value>A Range object representing the selection range in the rich edit.</value>
    </member>
    <member name="T:VO.RichEditSelectionEvent">
      <summary>
            Provide information about a rich edit selection event, which is generated when the selection in a rich edit control is changed.
        </summary>
    </member>
    <member name="P:VO.RichEditSelectionEvent.Selection">
      <summary>
            A selection object representing the selection range in the rich edit.
        </summary>
      <value>A selection object representing the selection range in the rich edit.</value>
    </member>
    <member name="P:VO.RichEditSelectionEvent.SelectionRange">
      <summary>
            A Range object representing the new selection range in the rich edit.
        </summary>
      <value>A Range object representing the new selection range in the rich edit.</value>
    </member>
    <member name="P:VO.RichEditSelectionEvent.SelectionType">
      <summary>
            A constant representing the type of the newly changed selection in the rich edit:
        </summary>
      <value>A constant representing the type of the newly changed selection in the rich edit:</value>
    </member>
    <member name="T:VO.SaveAsDialog">
      <summary>
            Provide standard save-file dialog facilities.
        </summary>
    </member>
    <member name="M:VO.SaveAsDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a standard SaveAs dialog box.
        </summary>
      <param name="oOwnWnd">The window that owns the SaveAsDialog object.</param>
      <param name="cInitPath">The preset file name to display in the dialog. Use this, for example, to prompt the user with the current name of the file. You can also specify wild-cards, such as *.TXT. The default is a NULL_STRING.</param>
      <param name="dwFlag">Reserved for future use.</param>
    </member>
    <member name="T:VO.ScrollBar">
      <summary>
            Provide the base class from which all X# scroll bars are subclassed.
        </summary>
    </member>
    <member name="M:VO.ScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a scroll bar.
        </summary>
      <param name="oOwner">The window that owns the scroll bar.</param>
      <param name="xID">The unique ID between 1 and 8000 of the scroll bar.</param>
      <param name="oPoint">The origin of the scroll bar, in canvas coordinates.</param>
      <param name="oDimension">The dimension of the scroll bar, in canvas coordinates.</param>
      <param name="oResourceID">The resource ID of the scroll bar.</param>
      <param name="lDataAware">A logical value specifying whether the list box is data aware.</param>
    </member>
    <member name="P:VO.ScrollBar.BlockSize">
      <summary>
            A numeric value representing the block size of the scroll bar
        </summary>
      <value>A numeric value representing the block size of the scroll bar</value>
    </member>
    <member name="M:VO.ScrollBar.Create">
      <summary>
            Creates the underlying Win32 control
        </summary>
    </member>
    <member name="M:VO.ScrollBar.Hide">
      <summary>
            Hide a control so it is not visible (until a subsequent call to Control:Show()).
        </summary>
    </member>
    <member name="P:VO.ScrollBar.Range">
      <summary>
            A range object representing the minimum and maximum values currently in use for the thumb of a scroll bar.
        </summary>
      <value>A range object representing the minimum and maximum values currently in use for the thumb of a scroll bar.</value>
    </member>
    <member name="M:VO.ScrollBar.SetInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set all scrollbar properties with one method call.
        </summary>
      <param name="oScrollRange">Specifies the minimum and maximum scrolling position.</param>
      <param name="nThumbPosition">Specifies the position of the scroll box.</param>
      <param name="nPageSize">Specifies the page size. A scroll bar uses this value to determine the appropriate size of the proportional scroll box. </param>
      <param name="lDisableNoScroll">Disables the scroll bar instead of removing it, if the scroll bar's new parameters make the scroll bar unnecessary.</param>
    </member>
    <member name="M:VO.ScrollBar.SetThumbPosition(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the thumb position of the scrollbar
        </summary>
      <param name="nPosition">New position of the thumb.</param>
      <param name="lNotifyOwner">Should the owner be notified? When TRUE then the owner receives a WM_HSCROLL or WM_VSCROLL with a wParam SB_THUMBTRACK and lParam contains the scrollbar handle.</param>
    </member>
    <member name="M:VO.ScrollBar.Show">
      <summary>
            Display a control so it is visible.
        </summary>
    </member>
    <member name="P:VO.ScrollBar.TextValue">
      <summary>
            A string representing the thumb position of the scroll bar.
        </summary>
      <value>A string representing the thumb position of the scroll bar.</value>
    </member>
    <member name="P:VO.ScrollBar.ThumbPosition">
      <summary>
            A numeric value (short integer) representing the current thumb position of the scroll bar.
        </summary>
      <value>A numeric value (short integer) representing the current thumb position of the scroll bar.</value>
    </member>
    <member name="P:VO.ScrollBar.UnitSize">
      <summary>
            A numeric value representing the unit size currently associated with the scroll bar.
        </summary>
      <value>A numeric value representing the unit size currently associated with the scroll bar.</value>
    </member>
    <member name="P:VO.ScrollBar.Value">
      <summary>
            The value held in the control, in whatever data type the control holds.
        </summary>
      <value>The value held in the control, in whatever data type the control holds.</value>
    </member>
    <member name="T:VO.ScrollEvent">
      <summary>
            Provide information about a ScrollEvent, generated when a scroll bar is manipulated.
        </summary>
    </member>
    <member name="M:VO.ScrollEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.ScrollEvent.IsWindowScroll">
      <summary>
            A logical value indicating whether the scroll bar which generated this ScrollEvent was a window scroll bar or a free-standing scroll bar.
        </summary>
      <value>A logical value indicating whether the scroll bar which generated this ScrollEvent was a window scroll bar or a free-standing scroll bar.</value>
    </member>
    <member name="P:VO.ScrollEvent.OldPosition">
      <summary>
            A numeric value representing the old position of the thumb in a scroll bar when this ScrollEvent occurred (that is, where the thumb was located before being manipulated by the user).
        </summary>
      <value>A numeric value representing the old position of the thumb in a scroll bar when this ScrollEvent occurred (that is, where the thumb was located before being manipulated by the user).</value>
    </member>
    <member name="P:VO.ScrollEvent.Position">
      <summary>
            A numeric value representing the desired position of the thumb in a scroll bar when this ScrollEvent occurred (that is, where the user has newly positioned the thumb).
        </summary>
      <value>A numeric value representing the desired position of the thumb in a scroll bar when this ScrollEvent occurred (that is, where the user has newly positioned the thumb).</value>
    </member>
    <member name="P:VO.ScrollEvent.ScrollBar">
      <summary>
            The scroll bar that generated this ScrollEvent.
        </summary>
      <value>The scroll bar that generated this ScrollEvent.</value>
    </member>
    <member name="P:VO.ScrollEvent.ScrollBarID">
      <summary>
            The ID of the scroll bar that generated this ScrollEvent.
        </summary>
      <value>The ID of the scroll bar that generated this ScrollEvent.</value>
    </member>
    <member name="P:VO.ScrollEvent.TYPE">
      <summary>
            A string representing the type of scrolling action that took place when this ScrollEvent occurred.
        </summary>
      <value>A string representing the type of scrolling action that took place when this ScrollEvent occurred.</value>
    </member>
    <member name="T:VO.SelectDialog">
      <summary>
            Present the user with a standard color palette dialog box.
        </summary>
    </member>
    <member name="M:VO.SelectDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a standard color selection dialog.
        </summary>
      <param name="uOwner">The window that owns the SelectDialog object.</param>
      <param name="oColor">The color initially selected for the SelectDialog object. The default is the color currently being used. (Refer to the Color:Init() method for details on specifying a color.)</param>
    </member>
    <member name="T:VO.Selection">
      <summary>
            Create a selection, which represents the start and end of a text selection in an edit control as an ordered pair.
        </summary>
    </member>
    <member name="M:VO.Selection.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a selection.
        </summary>
      <param name="nStart">The selection's start. If omitted, the default is {0,0}.</param>
      <param name="nFinish">The selection's end. If omitted, the default is {0,0}.</param>
    </member>
    <member name="P:VO.Selection.Finish">
      <summary>
            A numeric value representing the finish value in a selection.
        </summary>
      <value>A numeric value representing the finish value in a selection.</value>
    </member>
    <member name="P:VO.Selection.Start">
      <summary>
            A numeric value representing the start value in a selection.
        </summary>
      <value>A numeric value representing the start value in a selection.</value>
    </member>
    <member name="T:VO.SelectionSlider">
      <summary>
            Create a selection slider.
        </summary>
    </member>
    <member name="M:VO.SelectionSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a selection slider.
        </summary>
      <param name="oOwner">The window that owns the selection slider.</param>
      <param name="xID">The unique ID between 1 and 8000 of the selection slider.</param>
      <param name="nResourceID">The resource ID of selection slider.</param>
      <param name="oPoint">The origin of the selection slider in canvas coordinates.</param>
      <param name="oDimension">The dimension of the selection slider in canvas coordinates.</param>
    </member>
    <member name="M:VO.SelectionSlider.ClearSelection">
      <summary>
            Clear the selection bar of the selection slider.
        </summary>
    </member>
    <member name="P:VO.SelectionSlider.SelectionRange">
      <summary>
            A Range object representing the minimum and maximum values currently in use for the selection bar of the slider.
        </summary>
      <value>A Range object representing the minimum and maximum values currently in use for the selection bar of the slider.</value>
    </member>
    <member name="T:VO.ShapeObject">
      <summary>
            Provide an intermediate class from which all X# two-dimensional objects are subclassed.
        </summary>
    </member>
    <member name="M:VO.ShapeObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a ShapeObject object.
        </summary>
      <param name="oPoint">The origin of the ShapeObject object, in canvas coordinates.</param>
      <param name="oDimension">The dimension of the ShapeObject object, in canvas coordinates.</param>
      <param name="oPen">The pen to be used in Draw(). If omitted, the currently selected pen is used.</param>
      <param name="oBrush">The brush to be used in Draw(). If omitted, the currently selected brush is used.</param>
    </member>
    <member name="P:VO.ShapeObject.BoundingBox">
      <summary>
            A bounding box representing the smallest rectangle that fully encloses the ShapeObject object.
        </summary>
      <value>A bounding box representing the smallest rectangle that fully encloses the ShapeObject object.</value>
    </member>
    <member name="P:VO.ShapeObject.Brush">
      <summary>
            A brush currently in use by the ShapeObject object to draw itself.
        </summary>
      <value>A brush currently in use by the ShapeObject object to draw itself.</value>
    </member>
    <member name="P:VO.ShapeObject.Pen">
      <summary>
            A pen currently in use by the ShapeObject object to draw itself.
        </summary>
      <value>A pen currently in use by the ShapeObject object to draw itself.</value>
    </member>
    <member name="P:VO.ShapeObject.Size">
      <summary>
            A dimension representing the current size of the ShapeObject object, in canvas coordinates.
        </summary>
      <value>A dimension representing the current size of the ShapeObject object, in canvas coordinates.</value>
    </member>
    <member name="T:VO.ShellWindow">
      <summary>
            Create a shell window, which provides MDI support for your applications.
        </summary>
    </member>
    <member name="M:VO.ShellWindow.#ctor(XSharp.__Usual)">
      <summary>
            Construct a shell window.
        </summary>
      <param name="oOwner">The window that owns the shell window.</param>
    </member>
    <member name="M:VO.ShellWindow.Arrange(XSharp.__Usual)">
      <summary>
            Tile, iconize, or cascade all the child windows that are currently open in this shell window.
        </summary>
      <param name="kArrangeStyle">** missing parameter documentation **</param>
    </member>
    <member name="P:VO.ShellWindow.ChildToolBarLocation">
      <summary>
            Specifies the position of a child window's toolbar.
        </summary>
      <value>Specifies the position of a child window's toolbar.</value>
    </member>
    <member name="M:VO.ShellWindow.CloseAllChildren">
      <summary>
            Send a close message to all open MDI child windows.
        </summary>
    </member>
    <member name="M:VO.ShellWindow.Default(XSharp.__Usual)">
      <summary>Call the default windows procedure for a window and set the EventReturnValue for the object.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.ShellWindow.Destroy">
      <summary>
            Provide a method to free memory resources allocated for a ShellWindow object and its derived objects.
        </summary>
    </member>
    <member name="M:VO.ShellWindow.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the dispatcher for events within the system when the window has focus;
            routing various events to their appropriate event handlers.
        </summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event. This is usually the value of the EventReturnValue field.
        </returns>
    </member>
    <member name="M:VO.ShellWindow.EnableOleStatusMessages(XSharp.__Usual)">
      <summary>
            Control the status message display of an in-place active OLE object.
        </summary>
      <param name="lEnable">A logical value specifying whether to enable (TRUE) or disable (FALSE) the status message display.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ShellWindow.GetActiveChild">
      <summary>
            Return the window object for the currently active MDI child window.
        </summary>
    </member>
    <member name="M:VO.ShellWindow.Handle(XSharp.__Usual)">
      <summary>
            Return the handle for a shell window.
        </summary>
      <param name="nHandleType">The type of handle required. Specify 0 for the window handle and 2 for the window device context. If omitted, 0 is the default.</param>
      <returns>
            A handle to the window, describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.ShellWindow.HelpRequest(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the user requests help from the application using one of the available context-sensitive help mechanisms.
        </summary>
      <param name="oHelpRequestEvent">The HelpRequestEvent object that describes which item help is being requested for.</param>
    </member>
    <member name="P:VO.ShellWindow.Menu"></member>
    <member name="M:VO.ShellWindow.OnOleStatusMessage(XSharp.__Usual)">
      <summary>
            Provide a handler routine called with an OLE object's status message.
        </summary>
      <param name="cMsgString">The status string to be displayed.</param>
    </member>
    <member name="M:VO.ShellWindow.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the window changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the window canvas area.</param>
    </member>
    <member name="P:VO.ShellWindow.StatusBar"></member>
    <member name="P:VO.ShellWindow.ToolBar"></member>
    <member name="M:VO.ShellWindow.ToolBarHeightChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the height of the window's toolbar is changed.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes the changes to the toolbar height.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="T:VO.SingleLineEdit">
      <summary>
            Create a single-line edit control for displaying and entering information to a variable or field in a server.
            Single-line edit controls may be bound to a data server field of any type (character, date, logical, numeric, or memo).
        </summary>
    </member>
    <member name="M:VO.SingleLineEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a single-line edit control.
        </summary>
      <param name="oOwner">The window that owns the single-line edit control.</param>
      <param name="xID">The unique ID of the single-line edit control (between 1 and 8000).</param>
      <param name="oPoint">The origin of the single-line edit control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the single-line edit control in canvas coordinates.</param>
      <param name="kStyle">The style of the single-line edit control, specified as one of the following constants:</param>
      <param name="nResourceID">The resource ID of the single-line edit control.</param>
    </member>
    <member name="P:VO.SingleLineEdit.AutoFocusChange">
      <summary>
            A logical value controlling whether the cursor should skip to the next control in the tab order if it reaches the end of the edit control. The default is FALSE.
        </summary>
      <value>A logical value controlling whether the cursor should skip to the next control in the tab order if it reaches the end of the edit control. The default is FALSE.</value>
    </member>
    <member name="M:VO.SingleLineEdit.CreateFormattedString(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create formatted text according to the parameters provided.
        </summary>
      <param name="cPicture">The picture clause as a string.</param>
      <param name="cType">The unique ID of the single-line edit control (between 1 and 8000).</param>
      <param name="cDefTempl">The origin of the single-line edit control in canvas coordinates.</param>
    </member>
    <member name="M:VO.SingleLineEdit.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="P:VO.SingleLineEdit.FieldSpec"></member>
    <member name="P:VO.SingleLineEdit.FocusSelect">
      <summary>
            Controls the selection when the edit control gets focus.
        </summary>
      <value>Controls the selection when the edit control gets focus.</value>
    </member>
    <member name="P:VO.SingleLineEdit.OverWrite">
      <summary>
            A constant representing the overwrite mode for a single-line edit control.
        </summary>
      <value>A constant representing the overwrite mode for a single-line edit control.</value>
    </member>
    <member name="P:VO.SingleLineEdit.Picture">
      <summary>
            A picture string for a single-line edit control.
        </summary>
      <value>A picture string for a single-line edit control.</value>
    </member>
    <member name="P:VO.SingleLineEdit.ScrollMode">
      <summary>
            Specifies the scrolling behavior (e.g., when the Delete key is pressed).
        </summary>
      <value>Specifies the scrolling behavior (e.g., when the Delete key is pressed).</value>
    </member>
    <member name="M:VO.SingleLineEdit.Undo">
      <summary>
            Undo the last modification to the text in this edit control.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.Slider">
      <summary>
            Create a slider control.
        </summary>
    </member>
    <member name="M:VO.Slider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a slider.
        </summary>
      <param name="oOwner">The window that owns the slider.</param>
      <param name="xID">The unique ID between 1 and 8000 of the slider.</param>
      <param name="nResourceID">The resource ID of slider.</param>
      <param name="oPoint">The origin of the slider in canvas coordinates.</param>
      <param name="oDimension">The dimension of the slider in canvas coordinates.</param>
    </member>
    <member name="P:VO.Slider.BlockSize">
      <summary>
            A numeric value determining the block size (or page size) of the slider control.
        </summary>
      <value>A numeric value determining the block size (or page size) of the slider control.</value>
    </member>
    <member name="P:VO.Slider.ChannelBoundingBox">
      <summary>
            A BoundingBox object determining the size and position of the bounding rectangle for a slider control's channel.
        </summary>
      <value>A BoundingBox object determining the size and position of the bounding rectangle for a slider control's channel.</value>
    </member>
    <member name="M:VO.Slider.ClearTicks">
      <summary>
            Clear the slider of all ticks.
        </summary>
    </member>
    <member name="M:VO.Slider.Create">
      <summary>
            Creates the underlying window control for a X# slider object.
        </summary>
      <returns>
            The window handle of the control, if successful. A null handle (NULL_PTR) is returned if the control creation failed.
        </returns>
    </member>
    <member name="M:VO.Slider.GetTickPos(XSharp.__Usual)">
      <summary>
            Retrieves the position of a tick mark in a slider control.
        </summary>
      <param name="nIndex">Zero-based index identifying the tick mark.</param>
      <returns>
            The position of the specified tick mark or -1 if <paramref name="nIndex" /> does not specify a valid index.
        </returns>
    </member>
    <member name="P:VO.Slider.Range">
      <summary>
            A Range object representing the minimum and maximum values currently in use for the thumb of the slider.
        </summary>
      <value>A Range object representing the minimum and maximum values currently in use for the thumb of the slider.</value>
    </member>
    <member name="M:VO.Slider.SetTickPos(XSharp.__Usual)">
      <summary>
            Sets the position of a tick mark in a slider control.
        </summary>
      <param name="nPosition">** missing parameter documentation **</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.Slider.ThumbBoundingBox">
      <summary>
            A BoundingBox object determining the size and position of the bounding rectangle for the thumb in a slider control.
        </summary>
      <value>A BoundingBox object determining the size and position of the bounding rectangle for the thumb in a slider control.</value>
    </member>
    <member name="P:VO.Slider.ThumbLength">
      <summary>
            A numeric value determining the length of the thumb in a slider control
        </summary>
      <value>A numeric value determining the length of the thumb in a slider control</value>
    </member>
    <member name="P:VO.Slider.ThumbPosition">
      <summary>
            A numeric value determining the current position of the thumb in a slider control.
        </summary>
      <value>A numeric value determining the current position of the thumb in a slider control.</value>
    </member>
    <member name="P:VO.Slider.TickAlignment">
      <summary>
        <para>A symbol that describes the alignment of ticks on the slider.</para>
        <para>Valid values for a horizontal slider are</para>
        <list type="bullet">
          <item>#Top</item>
          <item>#Bottom</item>
          <item>#Both</item>
        </list>
        <para>Valid values for a vertical slider are</para>
        <list type="bullet">
          <item>#Left</item>
          <item>#Right</item>
          <item>#Both</item>
        </list>
      </summary>
      <value>A symbol that describes the alignment of ticks on the slider.Valid values for a horizontal slider are#Top#Bottom#BothValid values for a vertical slider are#Left#Right#Both</value>
    </member>
    <member name="P:VO.Slider.TickCount">
      <summary>
            A numeric value representing the number of ticks on the slider.
        </summary>
      <value>A numeric value representing the number of ticks on the slider.</value>
    </member>
    <member name="P:VO.Slider.UnitSize">
      <summary>
            A numeric value determining the unit size (or line size) of the slider control.
        </summary>
      <value>A numeric value determining the unit size (or line size) of the slider control.</value>
    </member>
    <member name="T:VO.SliderEvent">
      <summary>
            Provide information about a slider event, which is generated when the thumb of a slider is dragged with the mouse or moved by pressing the Direction keys.
        </summary>
    </member>
    <member name="M:VO.SliderEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.SliderEvent.Slider">
      <summary>
            The slider control object that generated this event.
        </summary>
      <value>The slider control object that generated this event.</value>
    </member>
    <member name="T:VO.Spinner">
      <summary>
            Create a spinner.
        </summary>
    </member>
    <member name="M:VO.Spinner.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a spinner.
        </summary>
      <param name="oOwner">The window that owns the spinner.</param>
      <param name="xID">The unique ID of the spinner (between 1 and 8000).</param>
      <param name="oPoint">The origin of the spinner in canvas coordinates.</param>
      <param name="oDimension">The dimension of the spinner in canvas coordinates.</param>
      <param name="kStyle">The style of the spinner.</param>
      <param name="lDataAware">A logical value specifying whether the spinner is data aware.</param>
      <param name="nResourceID">The resource ID of the spinner.</param>
    </member>
    <member name="P:VO.Spinner.Client">
      <summary>
            The client control of the spinner.
        </summary>
      <value>The client control of the spinner.</value>
    </member>
    <member name="P:VO.Spinner.Position">
      <summary>
            The numeric value of the spinner.
        </summary>
      <value>The numeric value of the spinner.</value>
    </member>
    <member name="T:VO.SpinnerEvent">
      <summary>
            Provide information about a spinner event, which is generated when either of the spinner's arrow buttons is clicked.
        </summary>
    </member>
    <member name="M:VO.SpinnerEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.SpinnerEvent.OldPosition">
      <summary>
            A numeric value representing the position of the spinner associated with this event immediately before the event occurred.
        </summary>
      <value>A numeric value representing the position of the spinner associated with this event immediately before the event occurred.</value>
    </member>
    <member name="P:VO.SpinnerEvent.OldValue">
      <summary>
            The value of the spinner associated with this event immediately before the event occurred.
        </summary>
      <value>The value of the spinner associated with this event immediately before the event occurred.</value>
    </member>
    <member name="P:VO.SpinnerEvent.Position">
      <summary>
            A numeric value representing the new position of the spinner associated with this event.
        </summary>
      <value>A numeric value representing the new position of the spinner associated with this event.</value>
    </member>
    <member name="P:VO.SpinnerEvent.Spinner">
      <summary>
            The spinner control object that generated this event.
        </summary>
      <value>The spinner control object that generated this event.</value>
    </member>
    <member name="P:VO.SpinnerEvent.SpinnerID">
      <summary>
            The numeric ID of the spinner control object that generated this event.
        </summary>
      <value>The numeric ID of the spinner control object that generated this event.</value>
    </member>
    <member name="P:VO.SpinnerEvent.Type">
      <summary>
            One of the following constants representing the type of action that took place when this event occurred:
        </summary>
      <value>One of the following constants representing the type of action that took place when this event occurred:</value>
    </member>
    <member name="P:VO.SpinnerEvent.Value">
      <summary>
            The new value of the spinner associated with this event.
        </summary>
      <value>The new value of the spinner associated with this event.</value>
    </member>
    <member name="T:VO.SplitWindow">
      <summary>
            Create a split window.
        </summary>
    </member>
    <member name="M:VO.SplitWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a SplitWindow object.
        </summary>
      <param name="oOwner">The window that owns the split window.</param>
      <param name="lHorizontalDrag">A logical value that is TRUE if horizontal split bars can be dragged. If omitted, the default is FALSE, which indicates that horizontal split bar dragging is disabled.</param>
      <param name="lVerticalDrag">A logical value that is TRUE if vertical split bars can be dragged. If omitted, the default is FALSE, which indicates that vertical split bar dragging is disabled.</param>
      <param name="kAlignment">
            One of the following constants specifying how to align split bars in the split window:
        </param>
    </member>
    <member name="P:VO.SplitWindow.Background">
      <summary>
            The background brush currently in use by the split window.
        </summary>
      <value>The background brush currently in use by the split window.</value>
    </member>
    <member name="M:VO.SplitWindow.ChangeBackground(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change the background brush of a particular component of the split window.
        </summary>
      <param name="oBrush">The new Brush object to apply.</param>
      <param name="kWhere">One of the following constants specifying the portion of the split window where the new brush will be applied:</param>
    </member>
    <member name="M:VO.SplitWindow.Destroy">
      <summary>
            Provide a method to free memory resources allocated for a ChildAppWindow object and its derived objects.
        </summary>
      <returns>
            NIL
        </returns>
    </member>
    <member name="M:VO.SplitWindow.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the dispatcher for events within the system when the window has focus;
            routing various events to their appropriate event handlers.
        </summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event. This is usually the value of the EventReturnValue field.
        </returns>
    </member>
    <member name="M:VO.SplitWindow.EnableStatusBar(XSharp.__Usual)">
      <summary>
            Enable/disable a status bar in an application window.
        </summary>
      <param name="lEnable">TRUE enables the status bar; FALSE disables it. The default is TRUE.</param>
      <returns>
            The status bar object.
        </returns>
    </member>
    <member name="M:VO.SplitWindow.GetAllChildren">
      <summary>
            Obtain an array of all X# children objects of the window.
        </summary>
      <returns>
            An array of all X# children objects of the window. This array may contain window objects as well as control objects. Note that controls which do not have a corresponding X# object, like a FixedText control where the Generate Code property was set to "No", are not included in the returned array.
        </returns>
    </member>
    <member name="M:VO.SplitWindow.GetPaneClient(XSharp.__Usual)">
      <summary>
            Get the client window or control associated with a split window pane index.
        </summary>
      <param name="nPane">The index of the split window pane.</param>
      <returns>
            An object representing the split window pane's client window.
        </returns>
    </member>
    <member name="M:VO.SplitWindow.GetPaneSize(XSharp.__Usual)">
      <summary>
            Get a Dimension object that represents the current size of a pane.
        </summary>
      <param name="nPane">The index of the split window pane.</param>
      <returns>
            A Dimension object representing the split window pane's size.
        </returns>
    </member>
    <member name="M:VO.SplitWindow.HidePane(XSharp.__Usual)">
      <summary>
            Hide a particular pane or all panes of a split window.
        </summary>
      <param name="nPane">The index of the split window pane to hide. If omitted, all panes are hidden.</param>
    </member>
    <member name="P:VO.SplitWindow.HorizontalAlign">
      <summary>
            A logical value that is TRUE if horizontal split bars are aligned in the split window.
        </summary>
      <value>A logical value that is TRUE if horizontal split bars are aligned in the split window.</value>
    </member>
    <member name="P:VO.SplitWindow.HorizontalDrag">
      <summary>
            A logical value that is TRUE if dragging of horizontal split bars is enabled in the split window.
        </summary>
      <value>A logical value that is TRUE if dragging of horizontal split bars is enabled in the split window.</value>
    </member>
    <member name="P:VO.SplitWindow.Layout">
      <summary>
            A Dimension object that represents the number and visual layout of the panes in the split window.
        </summary>
      <value>A Dimension object that represents the number and visual layout of the panes in the split window.</value>
    </member>
    <member name="M:VO.SplitWindow.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the window changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the window canvas area.</param>
    </member>
    <member name="M:VO.SplitWindow.RestoreUpdate">
      <summary>
            Decrement the buffered paint count maintained by the split window.
        </summary>
    </member>
    <member name="M:VO.SplitWindow.SetPaneClient(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the client window or control associated with a split window pane index.
        </summary>
      <param name="oWindow">The client window or control to be associated with the specified pane.</param>
      <param name="nPane">The index of the split window pane.</param>
    </member>
    <member name="M:VO.SplitWindow.SetPaneSize(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a Dimension object representing the current size of a pane.
        </summary>
      <param name="oDimension">A Dimension object representing the new size of the specified split window pane.</param>
      <param name="nPane">The index of the split window pane.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.SplitWindow.Show(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display this window.
        </summary>
      <param name="kShowState">The constant that represents how the window is shown. Valid values are:</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.SplitWindow.ShowPane(XSharp.__Usual)">
      <summary>
            Show a particular pane or all panes of a split window.
        </summary>
      <param name="nPane">The index of the split window pane to show. If omitted, all panes are shown.</param>
    </member>
    <member name="P:VO.SplitWindow.SplitBarBackground">
      <summary>
            The background brush currently in use by split bars in the split window.
        </summary>
      <value>The background brush currently in use by split bars in the split window.</value>
    </member>
    <member name="P:VO.SplitWindow.SplitBarFrameBackground">
      <summary>
            The background brush currently in use by split bar frames in the split window.
        </summary>
      <value>The background brush currently in use by split bar frames in the split window.</value>
    </member>
    <member name="M:VO.SplitWindow.SuspendUpdate">
      <summary>
            Increment the buffered paint count maintained by the split window.
        </summary>
    </member>
    <member name="P:VO.SplitWindow.ToolBar"></member>
    <member name="M:VO.SplitWindow.ToolBarHeightChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the height of the window's toolbar is changed.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes the changes to the toolbar height.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="P:VO.SplitWindow.VerticalAlign">
      <summary>
            A logical value that is TRUE if vertical split bars are aligned in the split window.
        </summary>
      <value>A logical value that is TRUE if vertical split bars are aligned in the split window.</value>
    </member>
    <member name="P:VO.SplitWindow.VerticalDrag">
      <summary>
            A logical value that is TRUE if dragging of vertical split bars is enabled in the split window.
        </summary>
      <value>A logical value that is TRUE if dragging of vertical split bars is enabled in the split window.</value>
    </member>
    <member name="T:VO.StandardColorDialog">
      <summary>
            Provide the base class from which all X# color dialog boxes are subclassed.
        </summary>
    </member>
    <member name="M:VO.StandardColorDialog.#ctor(XSharp.__Usual)">
      <summary>
            Construct a standard color dialog.
        </summary>
      <param name="oColor">Color object representing the default color to be displayed in the standard color dialog. If omitted, the default color is black.</param>
    </member>
    <member name="M:VO.StandardColorDialog.Color">
      <summary>
            Return the color that the user selected.
        </summary>
    </member>
    <member name="M:VO.StandardColorDialog.Destroy">
      <summary>
            Provide a method to free memory resources allocated for a StandardColorDialog object and its derived objects.
        </summary>
    </member>
    <member name="M:VO.StandardColorDialog.Show">
      <summary>
            Display a standard color dialog box. To retrieve the value that the user selected, use the StandardColorDialog:Color() method.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.StandardDialog">
      <summary>
            Provide the base class from which all X# standard dialog boxes are subclassed.
        </summary>
    </member>
    <member name="M:VO.StandardDialog.#ctor">
      <summary>
            Construct a standard dialog.
        </summary>
    </member>
    <member name="T:VO.StandardFileDialog">
      <summary>
            Provide the base class from which all X# standard file-oriented dialog boxes are subclassed.
        </summary>
    </member>
    <member name="M:VO.StandardFileDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a standard file dialog.
        </summary>
      <param name="uOwner">The window object that owns the standard file dialog. If omitted, the dialog is not owned by any window.</param>
      <param name="cInitPath">String representing the initial file or directory to display in the dialog. Use this, for example, to prompt the user with the current name of the file. You can also specify wildcards, such as '*.TXT'. The default is '*.*'.</param>
    </member>
    <member name="P:VO.StandardFileDialog.Caption">
      <summary>
            Return or update the title displayed in the dialog window.
        </summary>
      <value>Return or update the title displayed in the dialog window.</value>
    </member>
    <member name="P:VO.StandardFileDialog.DefExt">
      <summary>
            Return or update the default file extension displayed in the dialog window.
        </summary>
      <value>Return or update the default file extension displayed in the dialog window.</value>
    </member>
    <member name="M:VO.StandardFileDialog.Destroy">
      <summary>Free memory resources allocated for a VObject object and its derived objects.</summary>
    </member>
    <member name="M:VO.StandardFileDialog.Dispatch(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Intercept messages normally handled by the dialog box procedure in COMMDLG.DLL. Override this method to add your own custom processing.
        </summary>
      <param name="oEvt">An Event object.</param>
      <param name="hDlg">Handle of the dialog box.</param>
      <returns>
            A long integer indicating if the message is to be handled by the dialog box procedure in COMMDLG.DLL. Returns a non zero value to indicate that no further processing of the message is required. Returns a zero to continue processing for this message.
        </returns>
    </member>
    <member name="P:VO.StandardFileDialog.DlgStyle"></member>
    <member name="P:VO.StandardFileDialog.FileName">
      <summary>
            A string representing the name of the file which the user selected. If the user cancels, the file name is NULL_STRING.
        </summary>
      <value>A string representing the name of the file which the user selected. If the user cancels, the file name is NULL_STRING.</value>
    </member>
    <member name="P:VO.StandardFileDialog.FilterIndex">
      <summary>
            A string representing the index of the effective filter.
        </summary>
      <value>A string representing the index of the effective filter.</value>
    </member>
    <member name="M:VO.StandardFileDialog.help">
      <summary>
            Provide a means of displaying help when the HELP button is pressed. The HELP push button will be displayed if the SetStyle(OFN_SHOWHELP) message has been sent to the dialog object.
        </summary>
      <returns>
            A long integer indicating if the message is to be handled by the dialog box procedure in COMMDLG.DLL. The method returns a non zero value to indicate that no further processing of the message is required. It returns a zero to continue processing for this message.
        </returns>
    </member>
    <member name="P:VO.StandardFileDialog.HideReadOnly"></member>
    <member name="P:VO.StandardFileDialog.InitialDirectory">
      <summary>
            Set the initial directory for the dialog window. The tree control will be initially positioned accordingly.
        </summary>
      <value>Set the initial directory for the dialog window. The tree control will be initially positioned accordingly.</value>
    </member>
    <member name="P:VO.StandardFileDialog.ReadOnly">
      <summary>
            A logical value indicating that the file's read-only attribute is set.
        </summary>
      <value>A logical value indicating that the file's read-only attribute is set.</value>
    </member>
    <member name="M:VO.StandardFileDialog.SetFilter(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set single or multiple filters and descriptions for the standard dialogs. If multiple filters are specified, a filter index may also be specified.
        </summary>
      <param name="uFilter">
            An array of filter strings. Grouped filters within a string must be delimited by semicolons or
            a single filter string. Grouped filters within a string must be delimited by semicolons..
        </param>
      <param name="uFilterDesc">An array of filter descriptions.</param>
      <param name="nIndex">A number specifying the initial filter in use if multiple filters are in effect.</param>
    </member>
    <member name="M:VO.StandardFileDialog.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the style for the dialog window.
        </summary>
      <param name="kStyle">The capability to be queried, specified by a Windows API OpenFileName flag constant (for example, OFN_ALLOWMULTISELECT).</param>
      <param name="lOnOff">A logical value that specifies whether the style setting is turned on or off. A value of TRUE means that the style setting is turned on; a value of FALSE means that it is set off. The default is TRUE.</param>
    </member>
    <member name="M:VO.StandardFileDialog.SetStyleEx(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the Exstyle for the dialog window.
        </summary>
      <param name="kStyle">The capability to be queried, specified by a Windows API OpenFileName flag constant (for example, OFN_ALLOWMULTISELECT).</param>
      <param name="lOnOff">A logical value that specifies whether the style setting is turned on or off. A value of TRUE means that the style setting is turned on; a value of FALSE means that it is set off. The default is TRUE.</param>
    </member>
    <member name="M:VO.StandardFileDialog.Show">
      <summary>
            Display a standard file dialog box. To retrieve the value that the user selected, use the StandardFileDialog:FileName property.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.StandardFolderDialog">
      <summary>
            Encapsulate a standard folder dialog.
        </summary>
    </member>
    <member name="M:VO.StandardFolderDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a standard folder dialog.
        </summary>
      <param name="oOwner">The window that owns the standard folder dialog.</param>
      <param name="sCaption">The caption of the standard folder dialog. The default is 'Browser Folder'.</param>
      <param name="sStartFolder">The starting folder for the browse.</param>
      <param name="kType">
            Any _ORed combination of the following constants:
            Returns only file system directories (default).
            Does not include network folders below the domain level.
            Returns only computers.
            Returns only printers.
            The browse dialog includes files and folders.
        </param>
    </member>
    <member name="P:VO.StandardFolderDialog.FolderName">
      <summary>
            The name of the selected folder or directory (same as StandardFolderDialog:Result).
        </summary>
      <value>The name of the selected folder or directory (same as StandardFolderDialog:Result).</value>
    </member>
    <member name="P:VO.StandardFolderDialog.Result">
      <summary>
            The name of the selected folder or directory (same as StandardFolderDialog:FolderName).
        </summary>
      <value>The name of the selected folder or directory (same as StandardFolderDialog:FolderName).</value>
    </member>
    <member name="M:VO.StandardFolderDialog.Show">
      <summary>
            Display a standard folder dialog box. To retrieve the value that the user selected, use the relevant method of the specific subclass.
        </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.StandardFontDialog">
      <summary>
            Provide standard font dialog facilities.
        </summary>
    </member>
    <member name="M:VO.StandardFontDialog.#ctor(XSharp.__Usual)">
      <summary>
            Construct a standard font dialog.
        </summary>
      <param name="uOwner">A Window object which identifies the device (i.e., monitor) for which to create the font list.</param>
      <param name="oPrinter">A Printer object which identifies the device (i.e., printer) for which to create the font list.</param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableANSI(XSharp.__Usual)">
      <summary>
            Allow ANSI fonts to appear in the list of fonts in the standard font dialog.
        </summary>
      <param name="bOnOff">The logical value indicating whether ANSI fonts appear in the list of fonts. TRUE is the default, if omitted or if the method is not called.</param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableEffects(XSharp.__Usual)">
      <summary>
            Allow the ability to change font effects, such as underline, strikethrough, and color.
        </summary>
      <param name="bOnOff">The logical value indicating whether font effects can be modified through the standard font dialog. TRUE is the default, if omitted or if the method is not called.</param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableFixedPitch(XSharp.__Usual)">
      <summary>
            Determine whether only fixed pitch fonts will be displayed in the list of fonts for the standard font dialog.
        </summary>
      <param name="bOnOff">Logical value indicating whether only fixed pitch fonts appear in the list of fonts.</param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableTrueType(XSharp.__Usual)">
      <summary>
            Determine whether only true type fonts will be displayed in the list of fonts for the standard font dialog.
        </summary>
      <param name="bOnOff">Logical value indicating whether only true type fonts appear in the list of fonts.</param>
    </member>
    <member name="P:VO.StandardFontDialog.Flags">
      <summary>
            A Windows API style constant to be set for the standard font dialog window.
        </summary>
      <value>A Windows API style constant to be set for the standard font dialog window.</value>
    </member>
    <member name="P:VO.StandardFontDialog.Font">
      <summary>
            The font that was last selected in the standard font dialog window.
        </summary>
      <value>The font that was last selected in the standard font dialog window.</value>
    </member>
    <member name="P:VO.StandardFontDialog.FontColor">
      <summary>
            The font color that was last selected in the standard font dialog window. This is only evident after EnableEffects(TRUE) has been called.
        </summary>
      <value>The font color that was last selected in the standard font dialog window. This is only evident after EnableEffects(TRUE) has been called.</value>
    </member>
    <member name="M:VO.StandardFontDialog.Show">
      <summary>
            Display a standard font dialog. To retrieve the value that the user selected, use the StandardFontDialog:Font access.
        </summary>
      <returns>
            TRUE if user chooses a font, FALSE if the user presses CANCEL.
        </returns>
    </member>
    <member name="T:VO.StatusBar">
      <summary>
            Create a status bar for use in a window.
        </summary>
    </member>
    <member name="M:VO.StatusBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a status bar.
        </summary>
      <param name="oOwner">The window that owns the status bar.</param>
      <param name="xID">The unique ID of the control (between 1 and 8000).</param>
      <param name="oPoint">The origin of the control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the control in canvas coordinates.</param>
    </member>
    <member name="M:VO.StatusBar.AddItem(XSharp.__Usual)">
      <summary>
            Add a new item to the status bar.
        </summary>
      <param name="oStatusBarItem">The new item to add to the status bar.</param>
    </member>
    <member name="P:VO.StatusBar.AsString"></member>
    <member name="M:VO.StatusBar.ClearItems">
      <summary>
            Remove all of the status bar items.
        </summary>
    </member>
    <member name="P:VO.StatusBar.ControlText">
      <summary>
            A string representing a message associated with a control to be displayed on the status bar. This message takes priority over the StatusBar:PermanentText message.
        </summary>
      <value>A string representing a message associated with a control to be displayed on the status bar. This message takes priority over the StatusBar:PermanentText message.</value>
    </member>
    <member name="M:VO.StatusBar.Destroy">
      <summary>
            Provide a method to de-instantiate a StatusBar object.
        </summary>
    </member>
    <member name="P:VO.StatusBar.DisabledKeyIndicatorColor">
      <summary>
            The Color object that the status bar uses to indicate that a key is disabled. The default is gray.
        </summary>
      <value>The Color object that the status bar uses to indicate that a key is disabled. The default is gray.</value>
    </member>
    <member name="M:VO.StatusBar.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.<br /><br /></summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event.
        </returns>
    </member>
    <member name="M:VO.StatusBar.DisplayKeyboard">
      <summary>
            Enable the display of the keyboard state on the status bar.
        </summary>
    </member>
    <member name="M:VO.StatusBar.DisplayMemory">
      <summary>
            Enable the display of the virtual memory available, on the status bar. You must keep the display refreshed as necessary by calling StatusBar:RefreshMemoryDisplay().
        </summary>
    </member>
    <member name="M:VO.StatusBar.DisplayMessage">
      <summary>
            Enable the display of messages on the status bar.
        </summary>
    </member>
    <member name="M:VO.StatusBar.DisplayPosition">
      <summary>
            Enable the display of a coordinate pair on the status bar.
        </summary>
    </member>
    <member name="M:VO.StatusBar.DisplayTime">
      <summary>
            Enable the digital clock display on the status bar.
        </summary>
    </member>
    <member name="P:VO.StatusBar.ErrorMessageBeep">
      <summary>
            A logical value determining whether a beep is sounded by the error system when an error occurs. TRUE turns beeping on; FALSE turns it off.
        </summary>
      <value>A logical value determining whether a beep is sounded by the error system when an error occurs. TRUE turns beeping on; FALSE turns it off.</value>
    </member>
    <member name="P:VO.StatusBar.ErrorText">
      <summary>
            A string representing an error message to be displayed on the status bar. This message takes priority over the StatusBar:ControlText and StatusBar:PermanentText messages.
        </summary>
      <value>A string representing an error message to be displayed on the status bar. This message takes priority over the StatusBar:ControlText and StatusBar:PermanentText messages.</value>
    </member>
    <member name="M:VO.StatusBar.GetItemBoundingBox(XSharp.__Usual)">
      <summary>
            Get the bounding box that describes the area of a status bar item.
        </summary>
      <param name="symItemName">The symbolic name of the status bar item whose bounding box will be returned. If omitted, the bounding box of the main message area will be returned.</param>
      <returns>
            The bounding box for the specified item.
        </returns>
    </member>
    <member name="M:VO.StatusBar.Hide">
      <summary>
            Hide a status bar so it is not visible (until a subsequent call to StatusBar:Show()).
        </summary>
    </member>
    <member name="P:VO.StatusBar.HorizontalBorder">
      <summary>
            A numeric value representing the width of the horizontal border between the top or bottom edge of the status bar and its items.
        </summary>
      <value>A numeric value representing the width of the horizontal border between the top or bottom edge of the status bar and its items.</value>
    </member>
    <member name="P:VO.StatusBar.InsertMode">
      <summary>
            A logical value indicating whether the program is in insert mode.
        </summary>
      <value>A logical value indicating whether the program is in insert mode.</value>
    </member>
    <member name="P:VO.StatusBar.ItemBorder">
      <summary>
            A numeric value representing the width of the borders between the status bar items.
        </summary>
      <value>A numeric value representing the width of the borders between the status bar items.</value>
    </member>
    <member name="P:VO.StatusBar.KeyIndicatorColor">
      <summary>
            The Color object that the status bar uses to indicate to the user that a key is in the on state.
        </summary>
      <value>The Color object that the status bar uses to indicate to the user that a key is in the on state.</value>
    </member>
    <member name="P:VO.StatusBar.Length">
      <summary>
            A numeric value representing the number of characters in the message to be displayed on the status bar.
        </summary>
      <value>A numeric value representing the number of characters in the message to be displayed on the status bar.</value>
    </member>
    <member name="P:VO.StatusBar.MenuText">
      <summary>
            A string representing a message associated with a menu selection to be displayed on the status bar.
        </summary>
      <value>A string representing a message associated with a menu selection to be displayed on the status bar.</value>
    </member>
    <member name="P:VO.StatusBar.PermanentText">
      <summary>
            A string representing the default message to be displayed on the status bar
        </summary>
      <value>A string representing the default message to be displayed on the status bar</value>
    </member>
    <member name="P:VO.StatusBar.Position">
      <summary>
            A pair representing the coordinates to be shown in the status bar. The units you choose for coordinates are arbitrary.
        </summary>
      <value>A pair representing the coordinates to be shown in the status bar. The units you choose for coordinates are arbitrary.</value>
    </member>
    <member name="M:VO.StatusBar.RefreshMemoryDisplay(XSharp.__Usual)">
      <summary>
            Cause the status bar to bring the display of virtual memory up-to-date.
        </summary>
      <param name="kMemoryType">** missing parameter documentation **</param>
    </member>
    <member name="M:VO.StatusBar.setmessage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display a string in the main message area of the status bar.
        </summary>
      <param name="cMessage">The message to be displayed in the status bar.</param>
      <param name="nMode">The type of message to be displayed in the status bar.</param>
    </member>
    <member name="M:VO.StatusBar.SetPair(XSharp.__Usual)">
      <summary>
            Set a pair representing the coordinates to be shown in the status bar.
        </summary>
      <param name="oPoint">The point to set.</param>
    </member>
    <member name="M:VO.StatusBar.SetText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set text for a status bar item.
        </summary>
      <param name="cText">The text to set.</param>
      <param name="symItemName">The name of the status bar item.</param>
    </member>
    <member name="M:VO.StatusBar.Show">
      <summary>
            Display a status bar so it is visible.
        </summary>
    </member>
    <member name="P:VO.StatusBar.TextValue">
      <summary>
            A string representing the value held in the status bar.
        </summary>
      <value>A string representing the value held in the status bar.</value>
    </member>
    <member name="P:VO.StatusBar.TimeOut">
      <summary>
            A numeric value indicating the number of seconds a nonpermanent message is displayed on the status bar.
        </summary>
      <value>A numeric value indicating the number of seconds a nonpermanent message is displayed on the status bar.</value>
    </member>
    <member name="P:VO.StatusBar.Transient">
      <summary>
            A string representing an error message to be displayed on the status bar. This message takes priority over the StatusBar:ControlText and StatusBar:PermanentText messages.
        </summary>
      <value>A string representing an error message to be displayed on the status bar. This message takes priority over the StatusBar:ControlText and StatusBar:PermanentText messages.</value>
    </member>
    <member name="P:VO.StatusBar.VerticalBorder">
      <summary>
            A numeric value representing the height of the vertical border between the left or right edge of the status bar and its items.
        </summary>
      <value>A numeric value representing the height of the vertical border between the left or right edge of the status bar and its items.</value>
    </member>
    <member name="T:VO.StatusBarItem">
      <summary>
            Create a status bar item.
        </summary>
    </member>
    <member name="M:VO.StatusBarItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a status bar item.
        </summary>
      <param name="symName">Name of the StatusbarItem</param>
      <param name="nWidth">Width of the StatusbarItem in pixels</param>
      <param name="kStyle">
            Style of the StatusbarItem
            One of:
            SBITEMFLAT
            SBITEMRAISED
            SBITEMSUNKEN
        </param>
      <param name="oIcon">Optional Icon object to display</param>
    </member>
    <member name="P:VO.StatusBarItem.Icon">
      <summary>
            The icon of the status bar item.
        </summary>
      <value>The icon of the status bar item.</value>
    </member>
    <member name="P:VO.StatusBarItem.NameSym">
      <summary>
            The symbolic name of the status bar item.
        </summary>
      <value>The symbolic name of the status bar item.</value>
    </member>
    <member name="P:VO.StatusBarItem.Style">
      <summary>
            A constant determining the three-dimensional appearance of the status bar item:
        </summary>
      <value>A constant determining the three-dimensional appearance of the status bar item:</value>
    </member>
    <member name="P:VO.StatusBarItem.Width">
      <summary>
            A numeric value that represents the width of the status bar item.
        </summary>
      <value>A numeric value that represents the width of the status bar item.</value>
    </member>
    <member name="T:VO.StatusBarKeyItem">
      <summary>
            Create a status bar item to display CapsLock, Numlock and Insert keys
        </summary>
    </member>
    <member name="M:VO.StatusBarKeyItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a status bar item.
        </summary>
      <param name="symName">Name of the StatusbarItem</param>
      <param name="nWidth">Width of the StatusbarItem in pixels</param>
      <param name="kStyle">
            Style of the StatusbarItem
            One of:
            SBITEMFLAT
            SBITEMRAISED
            SBITEMSUNKEN
        </param>
      <param name="oIcon">Optional Icon object to display</param>
    </member>
    <member name="P:VO.StatusBarKeyItem.KeyText"></member>
    <member name="T:VO.SysLink">
      <summary>
            Create a SysLink control.
        </summary>
    </member>
    <member name="M:VO.SysLink.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a SysLink control.
            <br />Important! This method is used internally by X#. Normally, it should not be called in your application code.
        </summary>
      <param name="oOwner">The window that owns the SysLink control.</param>
      <param name="xID">The unique ID between 1 and 8000 of the SysLink control.</param>
      <param name="oPoint">The Point object that locates the control.</param>
      <param name="oDimension">The Dimension that sets the size of the control.</param>
      <param name="cText">The text (including HTML tags) to be displayed.</param>
      <param name="lDataAware">TRUE sets the control to be Data-Aware, FALSE sets this off. The Default is TRUE.</param>
    </member>
    <member name="T:VO.SysLinkSelectEvent">
      <summary>
            Provide information about an event that gets generated when a SysLink control is selected
        </summary>
    </member>
    <member name="M:VO.SysLinkSelectEvent.#ctor(XSharp.__Usual)">
      <summary>Construct a ListViewMouseEvent object.</summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent that occurred when the event happened.</param>
    </member>
    <member name="T:VO.SystemMenu">
      <summary>
            Create a system menu.
        </summary>
    </member>
    <member name="M:VO.SystemMenu.#ctor(XSharp.__Usual)">
      <summary>
            Construct a system menu.
            <br />Important! This method is used internally by X#. Normally, it should not be called in your application code. To create a system menu object, store the return value of the AppWindow:EnableSystemMenu() method.
        </summary>
      <param name="oOwner">
            The window that owns the system menu.
            The resource ID of the system menu. If not specified, the system creates an empty menu.
        </param>
    </member>
    <member name="T:VO.TabControl">
      <summary>
            Create a tab control.
        </summary>
    </member>
    <member name="M:VO.TabControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a tab control.
        </summary>
      <param name="oOwner">The window that owns the tab control.</param>
      <param name="xID">The unique ID between 1 and 8000 of the tab control.</param>
      <param name="nResourceID">The resource ID of the tab control.</param>
      <param name="oPoint">The origin of the tab control, in canvas coordinates.</param>
      <param name="oDimension">The dimension of the tab control, in canvas coordinates.</param>
      <param name="kStyle">The style of the tab control.</param>
    </member>
    <member name="M:VO.TabControl.AddTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a string to be displayed as tip text for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab to which you want to add the text.</param>
      <param name="cText">The text to add.</param>
    </member>
    <member name="M:VO.TabControl.AppendTab(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a new tab and tab page at the end of a tab control.
        </summary>
      <param name="symTabName">The symbolic name of the new tab.</param>
      <param name="cCaption">The caption of the new tab.</param>
      <param name="xPage">The modeless dialog window to act as the page for this tab or the symbolic name of the class to use for the tab.</param>
      <param name="nImage">The index of the image in the tab control's image list to display in the new tab.</param>
      <returns>
            TRUE if the tab was added successfully; otherwise FALSE.
        </returns>
    </member>
    <member name="P:VO.TabControl.AutoSize">
      <summary>
            A logical value which lets the tab control automatically resize itself to accommodate the size of largest tab page. The default is FALSE.
        </summary>
      <value>A logical value which lets the tab control automatically resize itself to accommodate the size of largest tab page. The default is FALSE.</value>
    </member>
    <member name="M:VO.TabControl.ChangeTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change the current tip text for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose tip text you want to change.</param>
      <param name="cText">The text to replace the current tip text.</param>
      <returns>
            TRUE if the text could be changed; otherwise FALSE.
        </returns>
    </member>
    <member name="M:VO.TabControl.CreatePageInstance(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Dynamically create a tab page.
        </summary>
      <param name="symPageClass">Classname of the page to create</param>
      <param name="symTabName">Symbolic Name of the tab to create</param>
      <returns>
            New Page Object
        </returns>
    </member>
    <member name="P:VO.TabControl.CurrentPage">
      <summary>
            The currently displayed tab control page.
        </summary>
      <value>The currently displayed tab control page.</value>
    </member>
    <member name="M:VO.TabControl.DeleteAllTabs">
      <summary>
            Remove all the tabs and their corresponding pages in the tab control.
        </summary>
      <returns>
            TRUE if all tabs could be deleted; otherwise FALSE.
        </returns>
    </member>
    <member name="M:VO.TabControl.DeleteTab(XSharp.__Usual)">
      <summary>
            Remove a tab and page from the tab control.
        </summary>
      <param name="symTabName">The symbolic name of the tab to delete.</param>
      <returns>
            TRUE if the tab could be deleted; otherwise FALSE.
        </returns>
    </member>
    <member name="M:VO.TabControl.Destroy">
      <summary>
            Provide a method to de-instantiate a Tab Control object.
        </summary>
    </member>
    <member name="M:VO.TabControl.GetCaption(XSharp.__Usual)">
      <summary>
            Return the current caption for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose caption you want to obtain.</param>
      <returns>
            The current caption of the specified tab.
        </returns>
    </member>
    <member name="M:VO.TabControl.GetTabBoundingBox(XSharp.__Usual)">
      <summary>
            Get the bounding box representing the area that a tab occupies.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose bounding box you want to obtain.</param>
      <returns>
            The bounding box that the specified tab occupies.
        </returns>
    </member>
    <member name="M:VO.TabControl.GetTabImage(XSharp.__Usual)">
      <summary>
            Return the current image for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose image you want to obtain.</param>
      <returns>
            The current image number of the specified tab.
        </returns>
    </member>
    <member name="M:VO.TabControl.GetTabPage(XSharp.__Usual)">
      <summary>
            Retrieve a specified tab page.
        </summary>
      <param name="xSymbolOrPosition">Specifies the tab page's symbol or the numeric position of the tab page.</param>
      <returns>
            The modeless dialog window object that represents the specified tab page.
        </returns>
    </member>
    <member name="M:VO.TabControl.GetTipText(XSharp.__Usual)">
      <summary>
            Return the current tip text for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose tip text you want to obtain.</param>
      <returns>
            The current tip text of the specified tab.
        </returns>
    </member>
    <member name="M:VO.TabControl.Hide">
      <summary>
            To hide the current tab page.
        </summary>
    </member>
    <member name="P:VO.TabControl.ImageList">
      <summary>
            The image list for the tab control.
        </summary>
      <value>The image list for the tab control.</value>
    </member>
    <member name="M:VO.TabControl.InsertTab(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Insert a new tab and tab page at a particular position in the tab control.
        </summary>
      <param name="nPosition">The numeric position of the new tab.</param>
      <param name="symTabName">The symbolic name of the new tab.</param>
      <param name="cCaption">The caption of the new tab.</param>
      <param name="xPage">The modeless dialog window to act as the page for this tab or the symbolic name of the class to use for the tab.</param>
      <param name="nImage">The index of the image in the tab control's image list to display in the new tab.</param>
      <returns>
            TRUE if the tab was added successfully; otherwise FALSE.
        </returns>
    </member>
    <member name="M:VO.TabControl.Move(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and the control is moved (either by the user or by the application).
        </summary>
      <param name="oMoveEvent">The MoveEvent object that describes the window movement.</param>
    </member>
    <member name="M:VO.TabControl.PadTabs(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Pad a tab's label and icon with empty space.
        </summary>
      <param name="dwWidth">The amount of horizontal padding (in pixels).</param>
      <param name="dwHeight">The amount of vertical padding (in pixels).</param>
    </member>
    <member name="M:VO.TabControl.RemoveTabImage(XSharp.__Usual)">
      <summary>
            Remove an image from the tab control's image list.
        </summary>
      <param name="nImageIndex">The index in the tab control's image list of the image you want to remove.</param>
      <returns>
            TRUE if the image was removed; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TabControl.RemoveTipText(XSharp.__Usual)">
      <summary>
            Remove the current tip text for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose tip text you want to remove.</param>
      <returns>
            TRUE if the text could be removed; otherwise FALSE.
        </returns>
    </member>
    <member name="M:VO.TabControl.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the control has focus and the control changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the control.</param>
    </member>
    <member name="P:VO.TabControl.RowCount">
      <summary>
            A numeric value representing the number of rows of tabs currently displayed in the tab control.
        </summary>
      <value>A numeric value representing the number of rows of tabs currently displayed in the tab control.</value>
    </member>
    <member name="P:VO.TabControl.SelectedTab">
      <summary>
            A symbolic name representing the currently selected tab in the tab control.
        </summary>
      <value>A symbolic name representing the currently selected tab in the tab control.</value>
    </member>
    <member name="P:VO.TabControl.SelectedTabPage">
      <summary>
            The modeless dialog window object representing the currently selected tab page in the tab control.
        </summary>
      <value>The modeless dialog window object representing the currently selected tab page in the tab control.</value>
    </member>
    <member name="M:VO.TabControl.SelectTab(XSharp.__Usual)">
      <summary>
            Select a tab and display its page.
        </summary>
      <param name="symTabName">The symbolic name of the tab you want to select.</param>
    </member>
    <member name="M:VO.TabControl.SetCaption(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set a new caption for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose caption you want to obtain.</param>
      <param name="cCaption">The new caption for the Tab</param>
      <returns>
            TRUE if the caption could be changed; otherwise FALSE
        </returns>
    </member>
    <member name="M:VO.TabControl.SetTabImage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Dynamically change the image (index) of a tab page.
        </summary>
      <param name="symTabName">The symbol of the page on which the image index will be changed.</param>
      <param name="nImageIndex">The index into the image list.</param>
      <returns>
            The new index into the image list.
        </returns>
    </member>
    <member name="M:VO.TabControl.SetTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change the current tip text for a tab.
        </summary>
      <param name="symTabName">The symbolic name of the tab whose tip text you want to change.</param>
      <param name="cText">The text to replace the current tip text.</param>
      <returns>
            TRUE if the text could be changed; otherwise FALSE.
        </returns>
    </member>
    <member name="P:VO.TabControl.TabCount">
      <summary>
            A numeric value representing the total number of tabs in the tab control.
        </summary>
      <value>A numeric value representing the total number of tabs in the tab control.</value>
    </member>
    <member name="T:VO.TextBox">
      <summary>
            Present the user with a text message box.
        </summary>
    </member>
    <member name="M:VO.TextBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a message box.
        </summary>
      <param name="uParent">The window that owns the message box. If omitted, the text box is application modal (that is, the application is suspended until the user acknowledges the text box).</param>
      <param name="uCaption">The text to be displayed in the title bar of the message boxor the hyperlabel containing a caption and description for the text box. If omitted, the default is NULL_STRING.</param>
      <param name="uText">
            The information to be printed in the message box. . If omitted, the default is NULL_STRING.
        </param>
      <param name="nType">
            The text box type. Valid types include the following button combinations and/or icons:
            Group 1: buttons
            <list type="table"><listheader><term>Constant</term><description>Button(s)</description></listheader><item><term>
                        BOXABORTRETRYIGNORE
                    </term><description>
                        Abort, Retry, and Ignore
                    </description></item><item><term>
                        BUTTONOKAY
                    </term><description>OK (This is the default.)</description></item><item><term>
                        BUTTONOKAYCANCEL
                    </term><description>OK and Cancel</description></item><item><term>
                        BUTTONRETRYCANCEL
                    </term><description>Retry and Cancel</description></item><item><term>
                        BUTTONYESNO
                    </term><description>Yes and No</description></item><item><term>BUTTONYESNOCANCEL   </term><description>Yes, No, and Cancel</description></item></list>

            Group 2: Standard Icons
            <list type="table"><listheader><term>Constant</term><description>Icon</description></listheader><item><term>
                        BOXICONASTERISK
                    </term><description>An icon consisting of a lowercase 'i' within a circle</description></item><item><term>
                        BOXICONEXCLAMATION
                    </term><description>An exclamation mark</description></item><item><term>BOXICONHAND         </term><description>A warning icon</description></item><item><term>BOXICONQUESTIONMARK </term><description>A question mark</description></item></list></param>
    </member>
    <member name="P:VO.TextBox.Beep">
      <summary>
            A logical value indicating whether to use a system default beep when displaying the text box. TRUE indicates that there will be a beep; FALSE indicates that there will be no beep.
        </summary>
      <value>A logical value indicating whether to use a system default beep when displaying the text box. TRUE indicates that there will be a beep; FALSE indicates that there will be no beep.</value>
    </member>
    <member name="P:VO.TextBox.Caption">
      <summary>
            A string value representing the TextBox caption.
        </summary>
      <value>A string value representing the TextBox caption.</value>
    </member>
    <member name="P:VO.TextBox.Message">
      <summary>
            A string value representing the TextBox message.
        </summary>
      <value>A string value representing the TextBox message.</value>
    </member>
    <member name="M:VO.TextBox.Show">
      <summary>
            Display this message box and return a value indicating how it was closed.
        </summary>
      <returns>
            The button selected by the user.
            <para>The possible values are:</para><list type="table"><listheader><term>Constant</term><description>Button</description></listheader><item><term>BOXREPLYABORT</term><description>Abort</description></item><item><term>BOXREPLYCANCEL</term><description>Cancel</description></item><item><term>BOXREPLYIGNORE</term><description>Ignore</description></item><item><term>BOXREPLYNO</term><description>No</description></item><item><term>BOXREPLYOKAY</term><description>OK</description></item><item><term>BOXREPLYRETRY</term><description>Retry</description></item><item><term>BOXREPLYYES</term><description>Yes</description></item></list></returns>
    </member>
    <member name="P:VO.TextBox.Type">
      <summary>
            A constant or combination of constants that indicates which push buttons and/or icons are displayed in the message box
        </summary>
      <value>A constant or combination of constants that indicates which push buttons and/or icons are displayed in the message box</value>
    </member>
    <member name="T:VO.TextControl">
      <summary>
            Provide the base class from which all X# controls are subclassed.
        </summary>
    </member>
    <member name="M:VO.TextControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a text control.
        </summary>
      <param name="oOwner">The window that owns the text control.</param>
      <param name="xId">The unique ID between 1 and 8000 of the text control.</param>
      <param name="oPoint">The origin of the text control in canvas coordinates.</param>
      <param name="oDimension">The dimension of the text control in canvas coordinates.</param>
      <param name="cRegclass">The window class name (e.g., 'ListBox') of the control.</param>
      <param name="kStyle">
            Constant representing the window style of the control, specified either by a X# style constant or a Windows API style constant. Styles can be combined using the _Or() operator.
        </param>
      <param name="lDataAware">
            A logical value specifying whether the text control is data aware.
            For detailed information, see TextControl:Init() and the corresponding Init() method topics for the Button, CheckBox, ComboBox, DateTimePicker, Edit, FixedText, GroupBox, HotKeyEdit, IPAddress, ListBox, ListView, MonthCalendar, MultiLineEdit, PushButton, RadioButton, RadioButtonGroup, RichEdit, and SingleLineEdit subclasses in the online help.
        </param>
      <param name="nResourceID">The resource ID of the text control.</param>
    </member>
    <member name="P:VO.TextControl.Caption">
      <summary>
            The string representing the caption of the text control.
        </summary>
      <value>The string representing the caption of the text control.</value>
    </member>
    <member name="P:VO.TextControl.ControlFont">
      <summary>
            The font used to draw the text in the control.
        </summary>
      <value>The font used to draw the text in the control.</value>
    </member>
    <member name="M:VO.TextControl.Create">
      <summary>
            Creates the underlying Win32 control
        </summary>
    </member>
    <member name="P:VO.TextControl.CurrentText">
      <summary>
            A string representing the text currently displayed in a text control.  For edit controls, including the edit box associated with simple and drop-down combo boxes, it contains the text currently appearing in the edit box. For fixed icon and group box controls, TextControl:CurrentText contains NULL_STRING.
        </summary>
      <value>A string representing the text currently displayed in a text control.  For edit controls, including the edit box associated with simple and drop-down combo boxes, it contains the text currently appearing in the edit box. For fixed icon and group box controls, TextControl:CurrentText contains NULL_STRING.</value>
    </member>
    <member name="M:VO.TextControl.Destroy">
      <summary>
            Provide a method to de-instantiate any TextControl.Destroy object.
        </summary>
    </member>
    <member name="M:VO.TextControl.Font(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change the current font of the text control.
        </summary>
      <param name="oNewFont">The font used to draw the text control.</param>
      <param name="lRescal">TRUE rescales the control according to the new font size. FALSE does not allow rescaling. If omitted, the default is FALSE.</param>
      <returns>
            The previous font used by the text control.
        </returns>
      <value>
            The font used to draw the text in the control.

            This Access/Assign was called Font (without the underscore) in previous versions of X#. it has been renamed to avoid name collision with the TextControl:Font() method
        </value>
    </member>
    <member name="M:VO.TextControl.Ime(XSharp.__Usual)">
      <summary>
            Return and optionally set whether Input Method Editor is enabled for this text control.
        </summary>
      <param name="symIme">TRUE enables the Input Method Editor for this text control; FALSE disables it.</param>
      <returns>
            If &lt;symIme&gt; is not specified, TextControl:IME() returns the current setting. If &lt;lEnable&gt; is specified, the previous setting is returned.
        </returns>
    </member>
    <member name="P:VO.TextControl.Length">
      <summary>
            A numeric value representing the number of characters in the control.
        </summary>
      <value>A numeric value representing the number of characters in the control.</value>
    </member>
    <member name="M:VO.TextControl.RemoveEditBalloonTip(XSharp.__Usual)">
      <summary>
            Removes the current BallonTip from the Edit control that has inherited from this class.
        </summary>
      <param name="hControl">The optional handle of the edit control to remove the BalloonTip from. The default is the control that the method is called against.</param>
    </member>
    <member name="M:VO.TextControl.SetCueBanner(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a cue banner to the Edit control that has inherited from this class.
        </summary>
      <param name="cText">The text displayed as the cue.</param>
      <param name="hControl">The optional handle of the edit control to add the cue too. The default is the control that the method is called against.</param>
    </member>
    <member name="M:VO.TextControl.ShowEditBalloonTip(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a BallonTip to the Edit control that has inherited from this class.
        </summary>
      <param name="cTitle">The title displayed in the tip.</param>
      <param name="cText">The text displayed in the tip.</param>
      <param name="dwIcon">The icon to use in the tip.</param>
      <param name="hControl">The optional handle of the edit control to add the BalloonTip too. The default is the control that the method is called against.</param>
    </member>
    <member name="P:VO.TextControl.TextColor">
      <summary>
            The color used to draw the text in the control. (Refer to the Color:Init() method for details on specifying a color object.)
        </summary>
      <value>The color used to draw the text in the control. (Refer to the Color:Init() method for details on specifying a color object.)</value>
    </member>
    <member name="P:VO.TextControl.TextValue">
      <summary>
            A string representing the value held in the control.
        </summary>
      <value>A string representing the value held in the control.</value>
    </member>
    <member name="T:VO.TextObject">
      <summary>
            Create a text-drawing object.
        </summary>
    </member>
    <member name="M:VO.TextObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a TextObject object.
        </summary>
      <param name="oPoint">The origin of the TextObject object in canvas coordinates. If omitted, the default is (10,10).</param>
      <param name="cText">The text to be displayed. If omitted, the default is NULL_STRING.</param>
      <param name="oFont">The font to be used by the TextObject object. The default is the system font.</param>
      <param name="oColor">The color to be used by the TextObject object. The default is the color currently being used. (Refer to the Color:Init() method for details on specifying a color.)</param>
    </member>
    <member name="P:VO.TextObject.BoundingBox">
      <summary>
            A bounding box representing the smallest rectangle (in the owner window's canvas coordinates) which encloses this TextObject object.
        </summary>
      <value>A bounding box representing the smallest rectangle (in the owner window's canvas coordinates) which encloses this TextObject object.</value>
    </member>
    <member name="M:VO.TextObject.Draw">
      <summary>
            Draw the TextObject object on the window.
            <br />Important! This method is called by X# when the text requires redrawing. Do not call this method from your application code—use Window:Draw() instead.
        </summary>
    </member>
    <member name="T:VO.ToolBar">
      <summary>
            Create a toolbar.
        </summary>
    </member>
    <member name="M:VO.ToolBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a toolbar.
        </summary>
      <param name="oOwner">The window that owns the toolbar.</param>
      <param name="xID">The unique ID of the toolbar (between 1 and 8000).</param>
      <param name="oPoint">The origin of the toolbar in canvas coordinates.</param>
      <param name="oDimension">The dimension of the toolbar in canvas coordinates.</param>
      <param name="lEnableBands">A flag specifying whether the toolbar supports bands. Band support is disabled if the flag is set to FALSE or if the application is running on a system with an old version of the Common Controls library. In this case, the band-related methods (AddBand(), AddSubToolBarBand(), etc.) are not available. The default is TRUE.</param>
    </member>
    <member name="M:VO.ToolBar.AddBand(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Use this method to add a band to the ToolBar.
        </summary>
      <param name="sBandName">A symbol naming the band.</param>
      <param name="oControl">A window or control descendant to be included in the new band.</param>
      <param name="iPos">Position of the band. The default is the last position (-1).</param>
      <param name="iMinWidth">Minimum width of the band.</param>
      <param name="iMinHeight">Minimum height of the band.</param>
      <param name="sText">Text to be displayed on the band.</param>
      <param name="oForeColor">A Color object specifying the foreground color of the band.</param>
      <param name="oBackColor">A Color object specifying the background color of the band.</param>
      <param name="iImageIndex">An index into the image list specifying an image to be displayed.</param>
      <param name="oBackBitmap">A Bitmap object specifying a bitmap to be displayed as the band's background.</param>
      <returns>
            TRUE, if the operation was successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.AddSubToolBarBand(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a new band to the toolbar as a sub-toolbar.
        </summary>
      <param name="symToolBar">A symbol naming the main toolbar.</param>
      <param name="iPos">Position of the sub-toolbar band. The default is -1 (the last position).</param>
      <param name="iMinWidth">Minimum width of the sub-toolbar band. The default is 100.</param>
      <param name="lFlat_dwStyle">
            You are now able to pass a DWORD value to this parameter which allows you to create ToolBars with different styles inside a ReBar control.
            <list type="table"><listheader><term>Style</term><description>Value</description></listheader><item><term>
                        BSTYLE_TOOLTIPS
                    </term><description>0x0100</description></item><item><term>
                        TBSTYLE_WRAPABLE
                    </term><description>0x0200</description></item><item><term>
                        TBSTYLE_ALTDRAG
                    </term><description>0x0400</description></item><item><term>
                        TBSTYLE_FLAT
                    </term><description> 0x0800</description></item><item><term>
                        TBSTYLE_LIST
                    </term><description>0x1000</description></item><item><term>
                        TBSTYLE_CUSTOMERASE
                    </term><description> 0x2000</description></item><item><term>
                        TBSTYLE_REGISTERDROP
                    </term><description>0x4000</description></item><item><term>
                        TBSTYLE_TRANSPARENT
                    </term><description>0x8000</description></item></list></param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.AddTipText(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a string to be displayed as tip text for a button.
        </summary>
      <param name="nButtonID">The button ID of the button to which to add the text.</param>
      <param name="nMenuItemID">The menu item ID of the button to which to add the text.</param>
      <param name="cText">The text to add.</param>
    </member>
    <member name="M:VO.ToolBar.AppendItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a new toolbar button item to the end of the toolbar from the list of buttons available.
        </summary>
      <param name="nButtonID">
            The ID of the new toolbar button item. To add a gap between groups of buttons, append an item labeled IDT_SEPARATOR. To see the standard button items available, bring up the list in the Menu Editor.
            For custom toolbar buttons, append an item labeled IDT_CUSTOMBITMAP. (For example, for the first button, the &lt;nButtonID&gt; is IDT_CUSTOMBITMAP + 1; the second is IDT_CUSTOMBITMAP + 2, and so on.)
        </param>
      <param name="nMenuItemID">The ID of the menu item corresponding to the new toolbar button item.</param>
      <param name="oBmp">
            A bitmap object that contains one or more custom bitmaps. Each button in the bitmap must be a 16-color, 20 x 16 pixel bitmap. The first button in the bitmap must be drawn in pixel positions 1 and 20, the second in positions 21 and 40, the third in positions 41 and 60, and so on. (Effectively, this is a ribbon of buttons.)
            It is possible to have the custom buttons in individual bitmap resource files, and create a Bitmap object for each button. &lt;nPosition&gt; is set to 1 if you use this method. It is recommended to use a ribbon of buttons in one bitmap file, as this only uses one handle. The latter method will use a handle for each object created.
        </param>
      <param name="nPosition">
            The position of a custom toolbar button in the bitmap. If a ribbon of buttons is used for &lt;oBitmap&gt;, then the first button is 1, the second is 2, and so on. If an individual bitmap is used or if not specified, &lt;nPosition&gt; is 1.
            The following figure illustrates a ribbon of buttons contained in one bitmap, showing the pixel positions and the &lt;nPosition&gt; for each:
        </param>
      <param name="cTitle">The title of the toolbar button that is used if the button is displayed on the toolbar, in either of the TB_TEXTANDICON or TB_TEXTONLY styles. If not specified, the default is NULL_STRING.</param>
      <param name="nImgCount">The number of buttons in the image passed in &lt;oBmp&gt;. The default is 1.</param>
      <param name="bState">The initial state of the button—enabled or disabled. If enabled, the button can be selected by the user. If disabled, the button appears dimmed (grayed) and cannot be selected; it remains unavailable until it is enabled by the application. The default is enabled (TBSTATE_ENABLED).</param>
      <param name="bStyle">
            An optional style flag for the toolbar item. By default the style is automatically derived from the other parameters. Passing a Windows API constant can, however, enforce a specific style. The default is TBSTYLE_BUTTON.
        </param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ToolBar.BandCount">
      <summary>
            The number of bands in the toolbar.
        </summary>
      <value>The number of bands in the toolbar.</value>
    </member>
    <member name="P:VO.ToolBar.BandImageList">
      <summary>
            An Image List object used for the bands.
        </summary>
      <value>An Image List object used for the bands.</value>
    </member>
    <member name="P:VO.ToolBar.Bitmap">
      <summary>
            The Bitmap object (containing a bitmap ribbon with one or more button images) that will be used to display buttons on the toolbar. If not assigned, the default bitmap is used.
        </summary>
      <value>The Bitmap object (containing a bitmap ribbon with one or more button images) that will be used to display buttons on the toolbar. If not assigned, the default bitmap is used.</value>
    </member>
    <member name="P:VO.ToolBar.BorderStyle">
      <summary>
            This property is no longer supported. It is included only for compatibility with existing X#1.0 code.
        </summary>
      <value>This property is no longer supported. It is included only for compatibility with existing X#1.0 code.</value>
    </member>
    <member name="P:VO.ToolBar.BoundingBox">
      <summary>
            The bounding box, in canvas coordinates, representing the minimal area that encloses the toolbar.
        </summary>
      <value>The bounding box, in canvas coordinates, representing the minimal area that encloses the toolbar.</value>
    </member>
    <member name="P:VO.ToolBar.ButtonCount">
      <summary>
            A numeric value representing the number of buttons currently on the toolbar.
        </summary>
      <value>A numeric value representing the number of buttons currently on the toolbar.</value>
    </member>
    <member name="P:VO.ToolBar.ButtonSize">
      <summary>
            A Dimension object representing the size of buttons on the toolbar. If not assigned, the default is a 16 by 16 button.
        </summary>
      <value>A Dimension object representing the size of buttons on the toolbar. If not assigned, the default is a 16 by 16 button.</value>
    </member>
    <member name="P:VO.ToolBar.ButtonStyle">
      <summary>
            A constant that represents how the buttons are displayed:
        </summary>
      <value>A constant that represents how the buttons are displayed:</value>
    </member>
    <member name="M:VO.ToolBar.ChangeTipText(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Change the current tip text for a button.
        </summary>
      <param name="nID">The ID of the button whose tip text you want to change. This is either the button ID or the menu item ID, depending on the value of &lt;symLookup&gt;.</param>
      <param name="cText">The text that will replace the current tip text.</param>
      <param name="symLookUp">A symbol that describes how to interpret &lt;nID&gt;. If the value is #ButtonID, &lt;nID&gt; is the button ID of the button; otherwise, if the value is #MenuItemID, &lt;nID&gt; is the menu item ID of the button. If omitted, &lt;nID&gt; is interpreted as the button ID.</param>
      <returns>
            TRUE if the text could be changed; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.ClickItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Make a button look like it is has been clicked, indicating that it has been selected.
        </summary>
      <param name="nMenuItemID">
            The menu item ID corresponding to the button that is clicked. This is not the original button ID that defines the look of the button; rather, it is the menu item ID which defines the meaning of the button.
        </param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="P:VO.ToolBar.ClientArea">
      <summary>
            A bounding box (group or character box) representing the area of its parent window that remains available given the placement of the toolbar.
        </summary>
      <value>A bounding box (group or character box) representing the area of its parent window that remains available given the placement of the toolbar.</value>
    </member>
    <member name="M:VO.ToolBar.Configure">
      <summary>
            This method is no longer supported. It is included only for compatibility with existing X#1.0 code.
        </summary>
    </member>
    <member name="M:VO.ToolBar.DeleteItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Remove a button from the toolbar.
        </summary>
      <param name="nMenuItemID">
            The menu item ID corresponding to the button that is to be removed.
            This is not the original button ID that defines the look of the button; rather it is the menu item ID which defines the meaning of the button.
        </param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="M:VO.ToolBar.Destroy">
      <summary>
            Provide a method to de-instantiate a ToolBar object.
        </summary>
    </member>
    <member name="M:VO.ToolBar.DimItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Dim a button.
        </summary>
      <param name="nMenuItemID">The menu item ID of the button you want to dim.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="M:VO.ToolBar.DisableItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Disable a button.
        </summary>
      <param name="nMenuItemID">
            The menu item ID corresponding to the button that is to be disabled.
            This is not the original button ID that defines the look of the button; rather it is the menu item ID which defines the meaning of the button.
        </param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="F:VO.ToolBar.Divider"></member>
    <member name="M:VO.ToolBar.EnableBands(XSharp.__Usual)">
      <summary>
            Enable toolbar band support.
        </summary>
      <param name="lEnable">A logical value specifying whether or not toolbar separator bands are supported. The default is TRUE.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.EnableDrag(XSharp.__Usual)">
      <summary>
            Allow the user to move the toolbar around with the mouse.
        </summary>
      <param name="lEnable">The logical value indicating whether dragging is allowed. TRUE is the default if omitted or if the method is not called.</param>
    </member>
    <member name="M:VO.ToolBar.EnableItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Enable a button that has been disabled.
        </summary>
      <param name="nMenuItemID">
            The menu item ID corresponding to the button that is to be removed.
            This is not the original button ID that defines the look of the button, reference is based on the menu item ID which defines the meaning of the button.
        </param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="P:VO.ToolBar.GapSize">
      <summary>
            This property is no longer supported. It is included only for compatibility with existing X#1.0 code.
        </summary>
      <value>This property is no longer supported. It is included only for compatibility with existing X#1.0 code.</value>
    </member>
    <member name="M:VO.ToolBar.GetButtonDescription(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Retrieve the description of a toolbar button.
        </summary>
      <param name="nButtonID">The ID of the toolbar button.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            The description of the toolbar button taken from the hyperlabel connected to the toolbar button.
        </returns>
    </member>
    <member name="M:VO.ToolBar.GetImageList(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Gets the ImageList that is specified by the parameters passed.
        </summary>
      <param name="symType">
            an be #IMAGELIST, #HOTIMAGELIST or #DISABLEDIMAGELIST,
            The default value is #IMAGELIST
        </param>
      <param name="symTB">
            Is the name of the toolbar (subtoolbar)
            The default is #Maintoolbar
        </param>
    </member>
    <member name="M:VO.ToolBar.GetTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the current tip text for a button.
        </summary>
      <param name="nButtonID">The ID of the button whose tip text you want to obtain. This is either the button ID or the menu item ID, depending on the value of &lt;symLookup&gt;.</param>
      <param name="symLookUp">A symbol that describes how to interpret &lt;nID&gt;. If the value is #ButtonID, &lt;nID&gt; is the button ID of the button; otherwise, if the value is #MenuItemID, &lt;nID&gt; is the menu item ID of the button. If omitted, &lt;nID&gt; is interpreted as the button ID.</param>
      <returns>
            The current tip text of the specified button.
        </returns>
    </member>
    <member name="M:VO.ToolBar.Hide">
      <summary>
            Hide a toolbar so it is not visible.
        </summary>
    </member>
    <member name="M:VO.ToolBar.HideItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Hide a button.
        </summary>
      <param name="nMenuItemID">The menu item ID of the button to hide.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="P:VO.ToolBar.ImageCount">
      <summary>
            A numeric value representing the number of images in the toolbar bitmap. If a custom bitmap has been assigned to the toolbar, this value must be assigned as the number of images in that bitmap.
        </summary>
      <value>A numeric value representing the number of images in the toolbar bitmap. If a custom bitmap has been assigned to the toolbar, this value must be assigned as the number of images in that bitmap.</value>
    </member>
    <member name="M:VO.ToolBar.InsertItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Insert a new toolbar button item before a specified toolbar button item, from the list of buttons available.
        </summary>
      <param name="nButtonID">The ID of the new toolbar button item. To add a gap between groups of buttons, append an item labeled IDT_SEPARATOR. To see the button items available, see Appendix A or bring up a list in the Menu Editor.</param>
      <param name="nMenuItemID">The ID of the menu item corresponding to the new toolbar button item.</param>
      <param name="nBeforeID">The ID of the toolbar button item before which the new toolbar button item should be inserted. If omitted, the new toolbar button item is inserted after the last toolbar button item.</param>
      <param name="bState">** missing parameter documentation **</param>
      <param name="bStyle">** missing parameter documentation **</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.IsClicked(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return a logical value indicating whether the specified button is currently clicked or selected.
        </summary>
      <param name="nID">The ID of the desired toolbar button item.</param>
      <param name="symIDType">Symbol indicating the type of data &lt;nButtonID&gt; represents. Valid values are #ButtonID and #MenuItemID. Defaults to #ButtonID.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            TRUE if clicked (or selected); otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.IsDimmed(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Determine whether a button is dimmed.
        </summary>
      <param name="nID">The ID of the button whose state you want to determine. This is either the button ID or the menu item ID, depending on the value of &lt;symLookup&gt;.</param>
      <param name="symLookup">A symbol that describes how to interpret &lt;nID&gt;. If the value is #ButtonID, &lt;nID&gt; is the button ID of the button; otherwise, if the value is #MenuItemID, &lt;nID&gt; is the menu item ID of the button. If omitted, &lt;nID&gt; is interpreted as the button ID.</param>
      <param name="symIDType">Symbol indicating the type of data &lt;nButtonID&gt; represents. Valid values are #ButtonID and #MenuItemID. Defaults to #ButtonID.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            TRUE if the button is dimmed; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.IsEnabled(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return a logical value indicating whether the specified button is currently enabled.
        </summary>
      <param name="nID">The ID of the desired toolbar button item. This can be either the numeric position of the button in the toolbar (the button ID) or the menu item ID.</param>
      <param name="symIDType">Symbol indicating the type of data &lt;nButtonID&gt; represents. Valid values are #ButtonID and #MenuItemID. Defaults to #ButtonID.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            TRUE if enabled; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.IsHidden(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Determine whether a button is hidden.
        </summary>
      <param name="nID">The ID of the button whose state you want to determine. This is either the button ID or the menu item ID, depending on the value of &lt;symLookup&gt;.</param>
      <param name="symIDType">A symbol that describes how to interpret &lt;nID&gt;. If the value is #ButtonID, &lt;nID&gt; is the button ID of the button; otherwise, if the value is #MenuItemID, &lt;nID&gt; is the menu item ID of the button. If omitted, &lt;nID&gt; is interpreted as the button ID.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            TRUE if the button is hidden; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.ToolBar.IsPressed(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Determine whether a button is pressed.
        </summary>
      <param name="nID">The ID of the button whose state you want to determine. This is either the button ID or the menu item ID, depending on the value of &lt;symLookup&gt;.</param>
      <param name="symIDType">A symbol that describes how to interpret &lt;nID&gt;. If the value is #ButtonID, &lt;nID&gt; is the button ID of the button; otherwise, if the value is #MenuItemID, &lt;nID&gt; is the menu item ID of the button. If omitted, &lt;nID&gt; is interpreted as the button ID.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
      <returns>
            TRUE if the button is pressed; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ToolBar.Location">
      <summary>
            This property is no longer supported. It is included only for compatibility with existing X#1.0 code.
        </summary>
      <value>This property is no longer supported. It is included only for compatibility with existing X#1.0 code.</value>
    </member>
    <member name="M:VO.ToolBar.PressItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Press a button.
        </summary>
      <param name="nMenuItemID">The menu item ID of the button to press.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="M:VO.ToolBar.RemoveTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Remove the current tip text for a button.
        </summary>
      <param name="nButtonID">The ID of the button whose tip text you want to remove. This is either the button ID or the menu item ID, depending on the value of &lt;symLookup&gt;.</param>
      <param name="symLookUp">A symbol that describes how to interpret &lt;nID&gt;. If the value is #ButtonID, &lt;nID&gt; is the button ID of the button; otherwise, if the value is #MenuItemID, &lt;nID&gt; is the menu item ID of the button. If omitted, &lt;nID&gt; is interpreted as the button ID.</param>
      <returns>
            TRUE if the text could be removed; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.ToolBar.Rows">
      <summary>
            A numeric value representing the number of rows of buttons on the toolbar.
            Note that Rows now has an optional parameter, &lt;symTB&gt;, to indicate which toolbar, or sub-toolbar, to query. If not specified, #MAINTOOLBAR is assumed.
        </summary>
      <value>
            A numeric value representing the number of rows of buttons on the toolbar.
            Note that Rows now has an optional parameter, &lt;symTB&gt;, to indicate which toolbar, or sub-toolbar, to query. If not specified, #MAINTOOLBAR is assumed.
        </value>
    </member>
    <member name="P:VO.ToolBar.SeparatorSize">
      <summary>
            This property is no longer supported. It is included only for compatibility with existing X#1.0 code.
        </summary>
      <value>This property is no longer supported. It is included only for compatibility with existing X#1.0 code.</value>
    </member>
    <member name="M:VO.ToolBar.SetImageList(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Sets the ImageList to be used by the ToolBar.
        </summary>
      <param name="uImageList">Can be an Imagelist or a bitmap loaded with LR_CREATEDIBSECTION and the background Color{192, 192, 192}.</param>
      <param name="symType">
            Can be #IMAGELIST, #HOTIMAGELIST or #DISABLEDIMAGELIST,
            The default value is #IMAGELIST
        </param>
      <param name="symTB">
            Is the name of the toolbar (subtoolbar)
            The default is #Maintoolbar
        </param>
    </member>
    <member name="M:VO.ToolBar.Show">
      <summary>
            Display a toolbar so it is visible.
        </summary>
    </member>
    <member name="M:VO.ToolBar.ShowItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Show a button.
        </summary>
      <param name="nMenuItemID">The menu item ID of the button to show.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="M:VO.ToolBar.UnClickItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Make a button look like it is "clicked-out" (returned to its normal state) after it has been "clicked-in" to indicate that it has been selected.
        </summary>
      <param name="nMenuItemID">
            The menu item ID corresponding to the button that is unclicked.
            This is not the original button ID that defines the look of the button; rather it is the menu item ID which defines the meaning of the button.
        </param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="M:VO.ToolBar.UnDimItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Undim a button.
        </summary>
      <param name="nMenuItemID">The menu item ID of the button to undim.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="M:VO.ToolBar.UnPressItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Unpress a button.
        </summary>
      <param name="nMenuItemID">The menu item ID of the button to unpress.</param>
      <param name="symTB">Symbolic name representing the toolbar to be used. Defaults to the main toolbar.</param>
    </member>
    <member name="M:VO.ToolBar.Update">
      <summary>
            This method is no longer supported. It is included only for compatibility with existing X#1.0 code.
        </summary>
    </member>
    <member name="T:VO.TopAppWindow">
      <summary>
            Create a top-level application window.
        </summary>
    </member>
    <member name="M:VO.TopAppWindow.#ctor(XSharp.__Usual)">
      <summary>
            Create a top-level application window.
        </summary>
      <param name="oOwner">The window that owns the top-level application window, which is the application itself. If not specified, SELF is used.</param>
    </member>
    <member name="M:VO.TopAppWindow.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the window changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the window canvas area.</param>
    </member>
    <member name="M:VO.TopAppWindow.ToolBarHeightChanged"></member>
    <member name="T:VO.TreeView">
      <summary>
            Create a tree view control.
        </summary>
    </member>
    <member name="M:VO.TreeView.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a tree view.
        </summary>
      <param name="oOwner">The window that owns the tree view.</param>
      <param name="xID">The unique ID of the tree view (between 1 and 8000).</param>
      <param name="nResourceID">The resource ID of the tree view.</param>
      <param name="oPoint">The origin of the tree view in canvas coordinates.</param>
      <param name="oDimension">The dimension of the tree view in canvas coordinates.</param>
      <param name="kStyle">The style of the tree view.</param>
    </member>
    <member name="M:VO.TreeView.AddItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Add a new tree view item as the last child item of a specified parent.
        </summary>
      <param name="symParentName">The symbolic name of the parent tree view item. This can be the symbolic name of any tree view item or one of the following items: #Root, #First, #Last, and, if the tree view style is sorted, #Sort.</param>
      <param name="oTreeViewItem">The tree view item to add.</param>
      <returns>
            TRUE if the item was added successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeView.Collapse(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Collapse a tree view item, hiding its child items.
        </summary>
      <param name="symName">The symbolic name of the tree view item to be collapsed.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item to be collapsed.</param>
      <param name="lRemoveChildItems">A logical value indicating whether child tree view items of the specified item will be removed when the item is collapsed. If omitted, the default is FALSE.</param>
      <param name="lAll">If lAll is TRUE(default = FALSE), the operation is done for the complete subtree of the specified item.</param>
      <param name="lForceNotify">
            If lForceNotify is TRUE(default = FALSE), a notify message Window:TreeViewItemExpanding() and Window:TreeViewItemExpanded() is sent for each item whose expand state is changed.
            Generally windows will only send these messages when an item is first expanded. It depends on the TVIS_EXPANDEDONCE state. (see in Platform SDK the TVM_EXPAND Message for more details.)
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeView.DeleteAll">
      <summary>
            Delete all items of the tree view.
        </summary>
      <returns>
            TRUE if all items were deleted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeView.DeleteItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Delete a tree view item.
        </summary>
      <param name="symName">The symbolic name of the tree view item to be deleted.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item to be deleted.</param>
      <param name="lChildsOnly">New logic parameter lChildsOnly which defaults to FALSE. If lChildsOnly is TRUE only the child items are deleted</param>
      <returns>
            TRUE if the item was deleted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.TreeView.DragDropEnabled">
      <summary>
            A logical value that is TRUE if drag-and-drop is enabled for the tree view. If drag-and-drop is enabled, items can be dragged within, as well as outside, the control.
        </summary>
      <value>A logical value that is TRUE if drag-and-drop is enabled for the tree view. If drag-and-drop is enabled, items can be dragged within, as well as outside, the control.</value>
    </member>
    <member name="P:VO.TreeView.DragImageList">
      <summary>
            An image list containing a single image displayed during a drag-and-drop operation for the tree view.
        </summary>
      <value>An image list containing a single image displayed during a drag-and-drop operation for the tree view.</value>
    </member>
    <member name="M:VO.TreeView.EditItemLabel(XSharp.__Usual)">
      <summary>
            Begins in-place label editing of an item in the tree view.
        </summary>
      <param name="symName">The symbolic name of the tree view item whose label you want to edit or the TreeViewItem object representing the tree view item whose label you want to edit.</param>
    </member>
    <member name="M:VO.TreeView.EnableDragDrop(XSharp.__Usual)">
      <summary>
            Enable or disable drag-and-drop of items for the tree view.
        </summary>
      <param name="lEnable">A logical value that determines whether drag-and-drop is enabled or disabled.</param>
      <returns>
            TRUE if drag-and-drop could be enabled or disabled; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeView.EnableSort(XSharp.__Usual)">
      <summary>
            Register a user-defined method to use for sorting items in the tree view.
        </summary>
      <param name="symMethodName">The symbolic name of the user-defined method that will be used to sort items in the tree view. When called, this method receives two TreeViewItem objects as arguments. The method should determine which of the two tree view items should come first in the tree view. If the first item precedes the second, this method should return -1; if the second item precedes the first, this method should return 1; if the items are equivalent, this method should return 0.</param>
      <returns>
            The symbolic name of the user-defined method that will be used to perform the sort.
        </returns>
    </member>
    <member name="M:VO.TreeView.EnsureVisible(XSharp.__Usual)">
      <summary>
            Ensure that an item is visible in the tree view, expanding its parent item or scrolling the tree view if necessary.
        </summary>
      <param name="symName">The symbolic name of the tree view item which should be made visible or the TreeViewItem object representing the tree view item which should be made visible.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeView.Expand(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Expand a tree view item, showing its child items.
        </summary>
      <param name="symName">The symbolic name of the tree view item to be expanded or the TreeViewItem object representing the tree view item to be expanded.</param>
      <param name="lAll">If lAll is TRUE(default = FALSE), the operation is done for the complete subtree of the specified item.</param>
      <param name="lForceNotify">
            If lForceNotify is TRUE(default = FALSE), a notify message Window:TreeViewItemExpanding() and Window:TreeViewItemExpanded() is sent for each item whose expand state is changed.
            Generally windows will only send these messages when an item is first expanded. It depends on the TVIS_EXPANDEDONCE state. (see in Platform SDK the TVM_EXPAND Message for more details.)
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetDropHighlight">
      <summary>
            Return the first tree view item that is the target of a drag-and-drop operation.
        </summary>
      <returns>
            The first tree view item that is the target of a drag-and-drop operation.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetFirstChildItem(XSharp.__Usual)">
      <summary>
            Return the first child tree view item.
        </summary>
      <param name="symItem">
            The symbolic name of the tree view item from which to start the search. If omitted, the search starts from the root item.
            Or the TreeViewItem object representing the tree view item from which to start the search.
        </param>
      <returns>
            The first tree view item from the starting item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetFirstVisibleItem">
      <summary>
            Return the first visible tree view item.
        </summary>
      <returns>
            The first visible tree view item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetItemAtPosition(XSharp.__Usual)">
      <summary>
            Return the tree view item at a particular position, if one exists.
        </summary>
      <param name="oPoint">The point at which to find a tree view item.</param>
      <returns>
            The tree view item at the specified point.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetItemAttributes(XSharp.__Usual)">
      <summary>
            Return a tree view item given its symbolic name.
        </summary>
      <param name="symItem">The symbolic name of the tree view item to be returned.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item to be returned.</param>
      <returns>
            The tree view item specified by the symbolic name.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetItemBoundingBox(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Return the bounding box of a tree view item.
        </summary>
      <param name="symItem">The symbolic name of the tree view item whose bounding box you want to obtain.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item whose bounding box you want to obtain.</param>
      <param name="lTextOnly">Logical value determining whether the returned bounding box encloses just the portion of the list view item that the text takes up (TRUE), or the entire length of the list view item (FALSE). If omitted, defaults to FALSE.</param>
      <returns>
            The bounding box of the tree view item specified by the symbolic name or TreeViewItem object.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetNextSiblingItem(XSharp.__Usual)">
      <summary>
            Return a tree view item's next sibling item.
        </summary>
      <param name="symItem">The symbolic name of the tree view item whose next sibling you want to obtain.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item whose next sibling you want to obtain.</param>
      <returns>
            The next sibling tree view item of the specified item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetNextVisibleItem(XSharp.__Usual)">
      <summary>
            Return a tree view item's next visible item.
        </summary>
      <param name="symItem">The symbolic name of the tree view item whose next visible item you want to obtain.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item whose next visible item you want to obtain.</param>
      <returns>
            The next visible tree view item of the specified item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetParentItem(XSharp.__Usual)">
      <summary>
            Return a tree view item's parent item.
        </summary>
      <param name="symItem">The symbolic name of the tree view item whose parent item you want to obtain.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item whose parent item you want to obtain.</param>
      <returns>
            The parent tree view item of the specified item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetPreviousSiblingItem(XSharp.__Usual)">
      <summary>
            Return a tree view item's previous sibling item.
        </summary>
      <param name="symItem">The symbolic name of the tree view item whose previous sibling item you want to obtain.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item whose previous sibling item you want to obtain.</param>
      <returns>
            The previous sibling tree view item of the specified item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetPreviousVisibleItem(XSharp.__Usual)">
      <summary>
            Return a tree view item's previous visible item.
        </summary>
      <param name="symItem">The symbolic name of the tree view item whose previous visible item you want to obtain.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item whose previous visible item you want to obtain.</param>
      <returns>
            The previous visible tree view item of the specified item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetRootItem">
      <summary>
            Return the root tree view item.
        </summary>
      <returns>
            The root tree view item.
        </returns>
    </member>
    <member name="M:VO.TreeView.GetSelectedItem">
      <summary>
            Return the currently selected tree view item.
        </summary>
      <returns>
            The currently selected tree view item.
        </returns>
    </member>
    <member name="P:VO.TreeView.ImageList">
      <summary>
            An image list containing images to display for each item in the tree view.
        </summary>
      <value>An image list containing images to display for each item in the tree view.</value>
    </member>
    <member name="P:VO.TreeView.Indent">
      <summary>
            A numeric value representing the number of pixels that child items are indented from parent items.
        </summary>
      <value>A numeric value representing the number of pixels that child items are indented from parent items.</value>
    </member>
    <member name="M:VO.TreeView.InsertItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Insert a new tree view item as a child of a specified item and after a specified item in the tree view.
        </summary>
      <param name="symParentName">The symbolic name of the parent tree view item of the new item. This can be the symbolic name of any tree view item or one of the following items: #Root, #First, #Last, and, if the tree view style is sorted, #Sort.</param>
      <param name="symInsertAfter">The symbolic name of the tree view item after which the new item should be inserted. This can be the symbolic name of any tree view item or one of the following items: #Root, #First, #Last, and, if the tree view style is sorted, #Sort.</param>
      <param name="oTreeViewItem">The tree view item to insert.</param>
      <returns>
            TRUE if the item was inserted successfully; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.TreeView.ItemCount">
      <summary>
            A numeric value representing the number of items in the tree view.
        </summary>
      <value>A numeric value representing the number of items in the tree view.</value>
    </member>
    <member name="P:VO.TreeView.SearchString">
      <summary>
            The incremental search string associated with the tree view.
        </summary>
      <value>The incremental search string associated with the tree view.</value>
    </member>
    <member name="M:VO.TreeView.SelectItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Cause a tree view to select a tree view item, scroll the item into view, or redraw it as the target of a drag-and-drop operation.
        </summary>
      <param name="symItem">The symbolic name of the tree view item to be selected.</param>
      <param name="oItem">The TreeViewItem object representing the tree view item to be selected.</param>
      <param name="symCode">The symbolic name of the type of selection. It can be one of the following values: #FirstVisible to scroll the item into view, or #DropHighlight to redraw the item. If omitted, the item is simply selected.</param>
      <param name="lSelect">The optional logical value to determine whether the specified tree view item is selected (TRUE) or deselected (FALSE). If omitted, defaults to TRUE.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeView.SetItemAttributes(XSharp.__Usual)">
      <summary>
            Update a tree view item within the tree view.
        </summary>
      <param name="oTreeViewItem">The tree view item to update.</param>
    </member>
    <member name="M:VO.TreeView.SortChildren(XSharp.__Usual)">
      <summary>
            Sort the child tree view items of an item using the user-defined sort method specified by EnableSort().
        </summary>
      <param name="symParentName">The symbolic name of the tree view item whose children will be sorted.</param>
      <param name="oParentItem">TreeViewItem object representing the tree view item whose children will be sorted.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.TreeView.StateImageList">
      <summary>
            An image list containing state images to display for each item in the tree view.
        </summary>
      <value>An image list containing state images to display for each item in the tree view.</value>
    </member>
    <member name="M:VO.TreeView.Toggle(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Toggle the expanded or collapsed state of a tree view item, showing or hiding its child items appropriately.
        </summary>
      <param name="symName">The symbolic name of the tree view item to be toggled or the TreeViewItem object representing the tree view item to be toggled.</param>
      <param name="lAll">If lAll is TRUE(default = FALSE), the operation is done for the complete subtree of the specified item.</param>
      <param name="lForceNotify">
            If lForceNotify is TRUE(default = FALSE), a notify message Window:TreeViewItemExpanding() and Window:TreeViewItemExpanded() is sent for each item whose expand state is changed.
            Generally windows will only send these messages when an item is first expanded. It depends on the TVIS_EXPANDEDONCE state. (see in Platform SDK the TVM_EXPAND Message for more details.)
        </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.TreeView.VisibleCount">
      <summary>
            A numeric value representing the number of tree view items that are fully visible in the tree view.
        </summary>
      <value>A numeric value representing the number of tree view items that are fully visible in the tree view.</value>
    </member>
    <member name="T:VO.TreeViewDeleteEvent">
      <summary>
            Provide information about a tree view delete event, which is generated when an item in a tree view control is deleted.
        </summary>
    </member>
    <member name="M:VO.TreeViewDeleteEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.TreeViewDeleteEvent.TreeViewItem">
      <summary>
            The TreeViewItem object which was deleted.
        </summary>
      <value>The TreeViewItem object which was deleted.</value>
    </member>
    <member name="T:VO.TreeViewDragEvent">
      <summary>
            Provide information about a tree view drag event, which is generated when an item in a tree view control is dragged.
        </summary>
    </member>
    <member name="M:VO.TreeViewDragEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.TreeViewDragEvent.IsLeftButton">
      <summary>
            A logical value that is TRUE if this is a left-button drag.
        </summary>
      <value>A logical value that is TRUE if this is a left-button drag.</value>
    </member>
    <member name="P:VO.TreeViewDragEvent.IsRightButton">
      <summary>
            A logical value that is TRUE if this is a right-button drag.
        </summary>
      <value>A logical value that is TRUE if this is a right-button drag.</value>
    </member>
    <member name="P:VO.TreeViewDragEvent.Position">
      <summary>
            A Point object that describes the initial position of the drag in tree view control coordinates.
        </summary>
      <value>A Point object that describes the initial position of the drag in tree view control coordinates.</value>
    </member>
    <member name="P:VO.TreeViewDragEvent.TreeViewItem">
      <summary>
            The TreeViewItem object which was dragged.
        </summary>
      <value>The TreeViewItem object which was dragged.</value>
    </member>
    <member name="T:VO.TreeViewEditEvent">
      <summary>
            Provide information about a tree view edit event, which is generated when the label of an item in a tree view control is edited.
        </summary>
    </member>
    <member name="M:VO.TreeViewEditEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.TreeViewEditEvent.EditBeginning">
      <summary>
            A logical value that is TRUE if the edit is beginning.
        </summary>
      <value>A logical value that is TRUE if the edit is beginning.</value>
    </member>
    <member name="P:VO.TreeViewEditEvent.EditEnding">
      <summary>
            A logical value that is TRUE if the edit is ending.
        </summary>
      <value>A logical value that is TRUE if the edit is ending.</value>
    </member>
    <member name="P:VO.TreeViewEditEvent.EditText">
      <summary>
            The Changed label of the TreeViewItem object.
        </summary>
      <value>The Changed label of the TreeViewItem object.</value>
    </member>
    <member name="P:VO.TreeViewEditEvent.TreeViewItem">
      <summary>
            The TreeViewItem object which is being edited.
        </summary>
      <value>The TreeViewItem object which is being edited.</value>
    </member>
    <member name="T:VO.TreeViewExpandedEvent">
      <summary>
            Provide information about a tree view expanded event, which is generated when an item in a tree view is expanded or collapsed, exposing or hiding its children.
        </summary>
    </member>
    <member name="M:VO.TreeViewExpandedEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.TreeViewExpandedEvent.Collapsed">
      <summary>
            A logical value that is TRUE if the item is collapsed.
        </summary>
      <value>A logical value that is TRUE if the item is collapsed.</value>
    </member>
    <member name="P:VO.TreeViewExpandedEvent.Expanded">
      <summary>
            A logical value that is TRUE if the item is expanded.
        </summary>
      <value>A logical value that is TRUE if the item is expanded.</value>
    </member>
    <member name="P:VO.TreeViewExpandedEvent.TreeViewItem">
      <summary>
            The TreeViewItem object which is being modified.
        </summary>
      <value>The TreeViewItem object which is being modified.</value>
    </member>
    <member name="T:VO.TreeViewExpandingEvent">
      <summary>
            Provide information about a tree view expanding event, which is generated when an item in a tree view is about to be expanded or collapsed, exposing or hiding its children.
        </summary>
    </member>
    <member name="M:VO.TreeViewExpandingEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.TreeViewExpandingEvent.TreeViewItem">
      <summary>
            The TreeViewItem object which is being modified.
        </summary>
      <value>The TreeViewItem object which is being modified.</value>
    </member>
    <member name="T:VO.TreeViewItem">
      <summary>
            Create a tree view item.
        </summary>
    </member>
    <member name="M:VO.TreeViewItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a tree view item.
        </summary>
      <param name="sName">The symbolic name for the tree view item.</param>
      <param name="cTextVal">The text value of the tree view item.</param>
      <param name="uVal">The usual value associated with the tree view item.</param>
      <param name="iImage">A numeric value that represents the index of the tree view item's image in the image list.</param>
      <param name="iSelImage">A numeric value that represents the index of the tree view item's selected image in the image list.</param>
    </member>
    <member name="P:VO.TreeViewItem.Bold">
      <summary>
            A logical value that is TRUE if the text of the tree view item is bold.
        </summary>
      <value>A logical value that is TRUE if the text of the tree view item is bold.</value>
    </member>
    <member name="M:VO.TreeViewItem.Collapse(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Collapse the tree view item, hiding its child items.
        </summary>
      <param name="lAll">** missing parameter documentation **</param>
      <param name="lForceNotify">** missing parameter documentation **</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.TreeViewItem.Delete(XSharp.__Usual)">
      <summary>
            Delete the tree view item.
        </summary>
      <param name="lChildsOnly">** missing parameter documentation **</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.TreeViewItem.Disabled">
      <summary>
            A logical value that is TRUE if the image of the tree view item is disabled.
        </summary>
      <value>A logical value that is TRUE if the image of the tree view item is disabled.</value>
    </member>
    <member name="P:VO.TreeViewItem.DropTarget">
      <summary>
            A logical value that is TRUE if the tree view item is highlighted as the target of a drag-and-drop operation.
        </summary>
      <value>A logical value that is TRUE if the tree view item is highlighted as the target of a drag-and-drop operation.</value>
    </member>
    <member name="M:VO.TreeViewItem.Expand(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Expand the tree view item, showing its child items.
        </summary>
      <param name="lAll">** missing parameter documentation **</param>
      <param name="lForceNotify">** missing parameter documentation **</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.TreeViewItem.Expanded">
      <summary>
            A logical value that determines if the tree view item is expanded or collapsed.
        </summary>
      <value>A logical value that determines if the tree view item is expanded or collapsed.</value>
    </member>
    <member name="P:VO.TreeViewItem.FirstChild">
      <summary>
            The first child item of the tree view item.
        </summary>
      <value>The first child item of the tree view item.</value>
    </member>
    <member name="P:VO.TreeViewItem.Focused">
      <summary>
            A logical value that is TRUE if the tree view item is focused.
        </summary>
      <value>A logical value that is TRUE if the tree view item is focused.</value>
    </member>
    <member name="P:VO.TreeViewItem.ImageIndex">
      <summary>
            A numeric value that represents the index of the tree view item's image in the image list.
        </summary>
      <value>A numeric value that represents the index of the tree view item's image in the image list.</value>
    </member>
    <member name="P:VO.TreeViewItem.NameSym">
      <summary>
            The symbolic name for the tree view item.
        </summary>
      <value>The symbolic name for the tree view item.</value>
    </member>
    <member name="P:VO.TreeViewItem.NextSibling">
      <summary>
            The next sibling item of the tree view item.
        </summary>
      <value>The next sibling item of the tree view item.</value>
    </member>
    <member name="P:VO.TreeViewItem.OverlayImageIndex">
      <summary>
            A numeric value that represents the index of the tree view item's overlay image in the image list. Overlay images are images that are drawn over the item's main image. A tree view can have up to four overlay images, so this value can be in the range of 1 to 4.
        </summary>
      <value>A numeric value that represents the index of the tree view item's overlay image in the image list. Overlay images are images that are drawn over the item's main image. A tree view can have up to four overlay images, so this value can be in the range of 1 to 4.</value>
    </member>
    <member name="P:VO.TreeViewItem.Parent">
      <summary>
            The parent TreeView object of the tree view item.
        </summary>
      <value>The parent TreeView object of the tree view item.</value>
    </member>
    <member name="P:VO.TreeViewItem.PreviousSibling">
      <summary>
            The previous sibling item of the tree view item.
        </summary>
      <value>The previous sibling item of the tree view item.</value>
    </member>
    <member name="P:VO.TreeViewItem.Selected">
      <summary>
            A logical value that is TRUE if the tree view item is selected.
        </summary>
      <value>A logical value that is TRUE if the tree view item is selected.</value>
    </member>
    <member name="P:VO.TreeViewItem.SelectedImageIndex">
      <summary>
            A numeric value that represents the index of the tree view item's selected image in the image list. Selected images are displayed in place of an item's normal image when the item is selected.
        </summary>
      <value>A numeric value that represents the index of the tree view item's selected image in the image list. Selected images are displayed in place of an item's normal image when the item is selected.</value>
    </member>
    <member name="P:VO.TreeViewItem.StateImageIndex">
      <summary>
            A numeric value that represents the index of the tree view item's state image in the state image list. State images are images that are drawn next to the item's main image.
        </summary>
      <value>A numeric value that represents the index of the tree view item's state image in the state image list. State images are images that are drawn next to the item's main image.</value>
    </member>
    <member name="P:VO.TreeViewItem.TextValue">
      <summary>
            The text value of the tree view item.
        </summary>
      <value>The text value of the tree view item.</value>
    </member>
    <member name="P:VO.TreeViewItem.TreeViewControl">
      <summary>
            The TreeView object identifying the TreeView control to which the current tree view item is linked.
        </summary>
      <value>The TreeView object identifying the TreeView control to which the current tree view item is linked.</value>
    </member>
    <member name="P:VO.TreeViewItem.Value">
      <summary>
            The usual value associated with the tree view item.
        </summary>
      <value>The usual value associated with the tree view item.</value>
    </member>
    <member name="T:VO.TreeViewKeyEvent">
      <summary>
            Provide information about a tree view key event, which is generated when a key is pressed while the tree view control has the input focus.
        </summary>
    </member>
    <member name="M:VO.TreeViewKeyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.TreeViewKeyEvent.KeyCode">
      <summary>
            The virtual key code of the key that was pressed.
        </summary>
      <value>The virtual key code of the key that was pressed.</value>
    </member>
    <member name="T:VO.TreeViewMouseEvent">
      <summary>
            Provide information about a tree view mouse event, which is generated when a mouse button in a tree view control is clicked or double-clicked.
        </summary>
    </member>
    <member name="M:VO.TreeViewMouseEvent.#ctor(XSharp.__Usual)">
      <summary>Construct a TreeViewMouseEvent object.</summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent that occurred when the event happened.</param>
    </member>
    <member name="P:VO.TreeViewMouseEvent.ButtonID">
      <summary>
            A constant representing which mouse button was clicked. The value can be either BUTTONLEFT or BUTTONRIGHT.
        </summary>
      <value>A constant representing which mouse button was clicked. The value can be either BUTTONLEFT or BUTTONRIGHT.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.IsLeftButton">
      <summary>
            A logical value that is TRUE if this is a left-button event.
        </summary>
      <value>A logical value that is TRUE if this is a left-button event.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.IsRightButton">
      <summary>
            A logical value that is TRUE if this is a right-button event.
        </summary>
      <value>A logical value that is TRUE if this is a right-button event.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointAboveClientArea">
      <summary>
            A logical value that is TRUE if the click occurred above the tree view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred above the tree view control's client area.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointBelowClientArea">
      <summary>
            A logical value that is TRUE if the click occurred below the tree view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred below the tree view control's client area.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointLeftOfClientArea">
      <summary>
            A logical value that is TRUE if the click occurred to the left of the tree view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred to the left of the tree view control's client area.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointNowhere">
      <summary>
            A logical value that is TRUE if the click occurred inside the tree view control but not on an item.
        </summary>
      <value>A logical value that is TRUE if the click occurred inside the tree view control but not on an item.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItem">
      <summary>
            A logical value that is TRUE if the click occurred on a tree view item in the tree view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a tree view item in the tree view control.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemButton">
      <summary>
            A logical value that is TRUE if the click occurred on a tree view item's button in the tree view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a tree view item's button in the tree view control.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemImage">
      <summary>
            A logical value that is TRUE if the click occurred on a tree view item's image in the tree view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a tree view item's image in the tree view control.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemIndent">
      <summary>
            A logical value that is TRUE if the click occurred on a tree view item's indented area in the tree view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a tree view item's indented area in the tree view control.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemLabel">
      <summary>
            A logical value that is TRUE if the click occurred on a tree view item's label in the tree view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a tree view item's label in the tree view control.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemRight">
      <summary>
            A logical value that is TRUE if the click occurred to the right of a tree view item in the tree view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred to the right of a tree view item in the tree view control.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemStateImage">
      <summary>
            A logical value that is TRUE if the click occurred on a tree view item's state image in the tree view control.
        </summary>
      <value>A logical value that is TRUE if the click occurred on a tree view item's state image in the tree view control.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointRightOfClientArea">
      <summary>
            A logical value that is TRUE if the click occurred to the right of the tree view control's client area.
        </summary>
      <value>A logical value that is TRUE if the click occurred to the right of the tree view control's client area.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.Position">
      <summary>
            A Point object that describes the position where the click occurred in tree view control coordinates.
        </summary>
      <value>A Point object that describes the position where the click occurred in tree view control coordinates.</value>
    </member>
    <member name="P:VO.TreeViewMouseEvent.TreeViewItem">
      <summary>
            The TreeViewItem object which was clicked, if the mouse click occurred on an item; otherwise, a null object.
        </summary>
      <value>The TreeViewItem object which was clicked, if the mouse click occurred on an item; otherwise, a null object.</value>
    </member>
    <member name="T:VO.TreeViewSelectionEvent">
      <summary>
            Provide information about a tree view selection event, which is generated when the current selection in a tree view control has changed or is about to change.
        </summary>
    </member>
    <member name="M:VO.TreeViewSelectionEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct an event.
        </summary>
      <param name="_hWnd">The handle of the window for which the event occurred, or an Event Object. The runtime checks to see if _hWnd is a pointer. When not then it assumes it is an event object and it clones the values from this object.</param>
      <param name="_uMsg">The message (WM_..) that occurred</param>
      <param name="_wParam">The WPARAM of the message</param>
      <param name="_lParam">The LPARAM of the message</param>
      <param name="_oWindow">The Window object that was associated with the event.</param>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.KeyBoardAction">
      <summary>
            A logical value indicating whether the selection change was caused by a key press.
        </summary>
      <value>A logical value indicating whether the selection change was caused by a key press.</value>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.MouseAction">
      <summary>
            A logical value indicating whether the selection change was caused by a mouse click.
        </summary>
      <value>A logical value indicating whether the selection change was caused by a mouse click.</value>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.NewTreeViewItem">
      <summary>
            The TreeViewItem object that is selected as a result of this event.
        </summary>
      <value>The TreeViewItem object that is selected as a result of this event.</value>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.OldTreeViewItem">
      <summary>
            The TreeViewItem object that was selected before this event occurred.
        </summary>
      <value>The TreeViewItem object that was selected before this event occurred.</value>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.SelectionChanged">
      <summary>
            A logical value indicating whether the selection has changed.
        </summary>
      <value>A logical value indicating whether the selection has changed.</value>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.SelectionChanging">
      <summary>
            A logical value indicating whether the selection is about to change.
        </summary>
      <value>A logical value indicating whether the selection is about to change.</value>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.UnknownAction">
      <summary>
            A logical value indicating whether the selection change was caused by an unknown source.
        </summary>
      <value>A logical value indicating whether the selection change was caused by an unknown source.</value>
    </member>
    <member name="T:VO.VerticalScrollBar">
      <summary>
            Create a vertical scroll bar.
        </summary>
    </member>
    <member name="M:VO.VerticalScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a vertical scroll bar.
        </summary>
      <param name="oOwner">The window that owns the vertical scroll bar.</param>
      <param name="xID">The unique ID between 1 and 8000 of the vertical scroll bar.</param>
      <param name="oPoint">The origin of the vertical scroll bar in canvas coordinates.</param>
      <param name="oDimension">The dimension of the vertical scroll bar in canvas coordinates.</param>
      <param name="oResourceID">The resource ID of the vertical scroll bar.</param>
    </member>
    <member name="T:VO.VerticalSelectionSlider">
      <summary>
            Create a vertical selection slider control.
        </summary>
    </member>
    <member name="M:VO.VerticalSelectionSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a vertical selection slider.
        </summary>
      <param name="oOwner">The window that owns the vertical selection slider.</param>
      <param name="xID">The unique ID between 1 and 8000 of the vertical selection slider.</param>
      <param name="nResourceID">The resource ID of vertical selection slider.</param>
      <param name="oPoint">The origin of the vertical selection slider in canvas coordinates.</param>
      <param name="oDimension">The dimension of the vertical selection slider in canvas coordinates.</param>
    </member>
    <member name="T:VO.VerticalSlider">
      <summary>
            Create a vertical slider control.
        </summary>
    </member>
    <member name="M:VO.VerticalSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a vertical slider.
        </summary>
      <param name="oOwner">The window that owns the vertical slider.</param>
      <param name="xID">The unique ID between 1 and 8000 of the vertical slider.</param>
      <param name="nResourceID">The resource ID of vertical slider.</param>
      <param name="oPoint">The origin of the vertical slider in canvas coordinates.</param>
      <param name="oDimension">The dimension of the vertical slider in canvas coordinates.</param>
    </member>
    <member name="T:VO.VerticalSpinner">
      <summary>
            Create a spinner with vertical arrow buttons.
        </summary>
    </member>
    <member name="M:VO.VerticalSpinner.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a vertical spinner.
        </summary>
      <param name="oOwner">The window that owns the vertical spinner.</param>
      <param name="xID">The unique ID between 1 and 8000 of the vertical spinner.</param>
      <param name="nResourceID">The resource ID of the vertical spinner.</param>
      <param name="oPoint">The origin of the vertical spinner in canvas coordinates.</param>
      <param name="oDimension">The dimension of the vertical spinner in canvas coordinates.</param>
      <param name="kStyle">The style of the vertical spinner.</param>
    </member>
    <member name="T:VO.WarningBox">
      <summary>
            Create a warning message box.
        </summary>
    </member>
    <member name="M:VO.WarningBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Create a warning box.
        </summary>
      <param name="uParent">The window that owns the warning box. If omitted, the owner is the desktop, and the warning box is application modal (that is, the application is suspended until the user acknowledges the warning box).</param>
      <param name="uCaption">
            The text to be displayed in the title bar of the warning box or
            the hyperlabel containing a caption and description for the warning box. If omitted, the default caption is 'Warning' and the default description is 'Warning...'.
        </param>
      <param name="uText">The information to be printed in the warning box when it is shown. If omitted, the default is NULL_STRING.</param>
    </member>
    <member name="T:VO.Window">
      <summary>
            Provide the base class from which all X# windows are subclassed.
        </summary>
    </member>
    <member name="M:VO.Window.#ctor(XSharp.__Usual)">
      <summary>
            Construct a Window object.
        </summary>
      <param name="oOwner">The window that owns this window.</param>
    </member>
    <member name="P:VO.Window.Accelerator">
      <summary>
            The accelerator table associated with this window.
        </summary>
      <value>The accelerator table associated with this window.</value>
    </member>
    <member name="M:VO.Window.Activate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is activated.
        </summary>
      <param name="oEvent">The event that describes which window was activated.</param>
    </member>
    <member name="M:VO.Window.AddTrayIcon(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Adds a tray icon associated with the window.
        </summary>
      <param name="oTrayIcon">The icon object to add to the tray.</param>
      <param name="dwID">The unique ID of the icon (between 1 and 8000).</param>
      <param name="sToolTip">The tool tip string to be displayed for this icon.</param>
    </member>
    <member name="M:VO.Window.AnimationStart(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an animation control begins playback.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which animation control started playback.</param>
    </member>
    <member name="M:VO.Window.AnimationStop(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an animation control ends playback.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which animation control ended playback.</param>
    </member>
    <member name="M:VO.Window.AppCommand(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an AppCommand event takes place.
        </summary>
      <param name="oACEvent">The AppCommandEvent object that describes the event which was initiated.</param>
    </member>
    <member name="P:VO.Window.Automated">
      <summary>
            A logical value determining whether the window object is to be exposed as an OLE automation server. This is a convenient shortcut for the RegisterOLEAutomationObject() function. When the window is destroyed, the UnRegisterOLEAutomationObject() is automatically called.
        </summary>
      <value>A logical value determining whether the window object is to be exposed as an OLE automation server. This is a convenient shortcut for the RegisterOLEAutomationObject() function. When the window is destroyed, the UnRegisterOLEAutomationObject() is automatically called.</value>
    </member>
    <member name="P:VO.Window.Background">
      <summary>
            The background brush currently in use by this window.
        </summary>
      <value>
            The background brush currently in use by this window.
        </value>
    </member>
    <member name="M:VO.Window.ButtonClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a check box, push button, or radio button is clicked with the mouse.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which button was clicked.</param>
    </member>
    <member name="M:VO.Window.ButtonDoubleClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a check box, push button, or radio button is double-clicked.
        </summary>
      <param name="oControlEvent">
            The <seealso cref="T:VO.ControlEvent">ControlEvent</seealso> that describes which button was double-clicked.
        </param>
    </member>
    <member name="P:VO.Window.CanvasArea">
      <summary>
            The bounding box representing the current size of this window's canvas area.
        </summary>
      <value>The bounding box representing the current size of this window's canvas area.</value>
    </member>
    <member name="M:VO.Window.CanvasErase">
      <summary>
            Erase the current canvas area of this window and repaint it using either the background brush or the system's default background color.
        </summary>
    </member>
    <member name="P:VO.Window.Caption">
      <summary>
            The string representing the caption (the text in the title bar of this window). This method can also be used to change the title of this window.
        </summary>
      <value>The string representing the caption (the text in the title bar of this window). This method can also be used to change the title of this window.</value>
    </member>
    <member name="M:VO.Window.Center">
      <summary>Center the window on its owner, or if the owner is the dektop, then center the window on the desktop.</summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.Close(XSharp.__Usual)">
      <summary>
            Invoked just as the window is about to close.
        </summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
    </member>
    <member name="M:VO.Window.ComboBoxExEndEdit(XSharp.__Usual)">
      <summary>
            A callback method that is invoked when a ComboBoxEx control sends an 'EndEdit' notification message
        </summary>
      <param name="oComboBoxExEndEditEvent">An object that has the information about the event</param>
    </member>
    <member name="M:VO.Window.ComboBoxExNotify(XSharp.__Usual)">
      <summary>
            A callback method that is invoked when a ComboBoxEx control sends a notification message
        </summary>
      <param name="oControlNotifyEvent">An event that has the information about the notify event</param>
    </member>
    <member name="P:VO.Window.ContextMenu">
      <summary>
            A menu object representing the local pop-up menu for a window or window control.
        </summary>
      <value>A menu object representing the local pop-up menu for a window or window control.</value>
    </member>
    <member name="M:VO.Window.ControlNotify(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a control sends a notification to its parent window.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes which control sent the notification.</param>
    </member>
    <member name="M:VO.Window.DateTimeSelectionChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a DateTimePicker selection is changed.
        </summary>
      <param name="oDateTimeSelectionEvent">The DateTimeSelectionEvent object that describes which control sent the notification.</param>
    </member>
    <member name="M:VO.Window.DeActivate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is deactivated.
        </summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
    </member>
    <member name="M:VO.Window.Default(XSharp.__Usual)">
      <summary>Call the default windows procedure for a window and set the EventReturnValue for the object.</summary>
      <param name="oEvent">The event that occurred for the control.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.Destroy">
      <summary>
            Free memory resources allocated for a window and its derived objects.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.Disable">
      <summary>
            Disable this window (until a subsequent call to Enable()).
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.Dispatch(XSharp.__Usual)">
      <summary>
            Provide the dispatcher for events within the system when the window has focus;
            routing various events to their appropriate event handlers.
        </summary>
      <param name="oEvent">The event to be handled.</param>
      <returns>
            A numeric value representing the event handler to handle the event. This is usually the value of the EventReturnValue field.
        </returns>
    </member>
    <member name="P:VO.Window.DragDropClient">
      <summary>
            The DragDropClient object created when Window:EnableDragDropClient(TRUE) is called.
        </summary>
      <value>The DragDropClient object created when Window:EnableDragDropClient(TRUE) is called.</value>
    </member>
    <member name="P:VO.Window.DragDropServer">
      <summary>
            The DragDropServer object created when Window:EnableDragDropServer(TRUE) is called.
        </summary>
      <value>The DragDropServer object created when Window:EnableDragDropServer(TRUE) is called.</value>
    </member>
    <member name="P:VO.Window.DragImageList">
      <summary>
            The ImageList object used for a drag-and-drop operation.
        </summary>
      <value>The ImageList object used for a drag-and-drop operation.</value>
    </member>
    <member name="M:VO.Window.Draw(XSharp.__Usual)">
      <summary>
            Display a Draw object on this window.
        </summary>
      <param name="oDrawObject">The object to be drawn, or the array of objects to be drawn.</param>
    </member>
    <member name="M:VO.Window.DrawBackground(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Draw the background of a window.
        </summary>
      <param name="hdc">The handle of the device context.</param>
      <param name="oWindow">
            The window to be drawn.
            The oWindow object is normally identical with SELF except when SELF is a DataWindow. In this case oWindow should be the oSurface (__FormDialogWindow) object. In a DataWindow you should draw the background only if oWindow == oSurface, otherwise it is superfluous.
        </param>
    </member>
    <member name="M:VO.Window.Drop">
      <summary>
            Retrieve information about a load from the drag event and act on each file in the selection.
        </summary>
      <param name="oDragEvent">The DragEvent that determines the position of the mouse (in canvas coordinates), as well as the number and names of files, in the drag-and-drop load.</param>
    </member>
    <member name="M:VO.Window.EditChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the text in an edit control is changed.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which edit control was changed.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.EditFocusChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the input focus changes to or from an edit control.
        </summary>
      <param name="oEditFocusChangeEvent">The EditFocusChangeEvent object that identifies which edit control generated the EditFocusChangeEvent object and whether it has just gained or lost the keyboard focus.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.EditScroll(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked for this window when an edit control is scrolled.
        </summary>
      <param name="oControlEvent">The ControlEvent object that identifies which edit control invoked the event handler.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.Enable">
      <summary>
            Enable a previously disabled window.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.EnableCloseBox(XSharp.__Usual)">
      <summary>
            Enable or Disable the close button on a window (the X )
        </summary>
      <param name="uValue">A logic value indicating if the close box should be enabled (TRUE) or disabled (FALSE).</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.EnableDragDropClient(XSharp.__Usual)">
      <summary>
            Allow "draggable" windows to be dropped on this window.
        </summary>
      <param name="lEnable">TRUE enables the window as a drop client. FALSE does not allow this behavior. If omitted, the default is TRUE.</param>
      <param name="lSurfaceOnly">When a logical value of TRUE is passed then only the surface of the DataWindow is activated.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.EnableDragDropServer(XSharp.__Usual)">
      <summary>
            Allow this window to be dropped on windows with drag and drop capabilities.
        </summary>
      <param name="lEnable">TRUE enables the window as a drag server. FALSE does not allow this behavior. If omitted, the default is TRUE.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.EnableHelp(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Enable or disable help for a window and its child windows.
        </summary>
      <param name="lEnable">TRUE enables help; FALSE disables help. If not specified, the default is TRUE.</param>
      <param name="oHelpDisplay">A HelpDisplay object specifying the help file to use.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.EnableHelpButton">
      <summary>
            Enables the help button in the window caption bar.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.EnableHelpCursor">
      <summary>
            Changes the cursor to a question mark with a pointer.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.EnableThemeDialogTexture(XSharp.__Usual)">
      <summary>
            Enables or disables the visual style of a dialog window's background.
        </summary>
      <param name="dwStyle">
            The style to be set.
            <list type="table"><listheader><term>Style</term><description>Description</description></listheader><item><term>
                        ETDT_ENABLE
                    </term><description>Enables dialog window background texturing. The texturing is defined by a visual style.</description></item><item><term>
                        ETDT_ENABLETAB
                    </term><description>
                        Enables dialog window background texturing. The texture is the Tab control texture defined
                        by the visual style. This flag is equivalent to (ETDT_ENABLE | ETDT_USETABTEXTURE).
                    </description></item><item><term>
                        ETDT_DISABLE
                    </term><description>Disables background texturing.</description></item><item><term>
                        ETDT_USETABTEXTURE
                    </term><description>Uses the Tab control texture for the background texture of a dialog window.</description></item></list></param>
    </member>
    <member name="M:VO.Window.EnableToolTips(XSharp.__Usual)">
      <summary>
            Enable or disable the tooltips for a window. Note that assigning a value to Control:ToolTipText automatically enables the tooltip's display on the parent window.
        </summary>
      <param name="lEnable">Logical value indicating whether the tool tips should be enabled (TRUE) or disabled (FALSE). If omitted, the default is TRUE.</param>
      <returns>
            TRUE, if tooltips were enabled; FALSE, if tooltips were disabled.
        </returns>
    </member>
    <member name="F:VO.Window.EventReturnValue"></member>
    <member name="M:VO.Window.Expose(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked whenever part of the window needs repainting.
        </summary>
      <param name="oExposeEvent">The ExposeEvent object that describes which area of the window needs repainting.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.FocusChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the input focus changes from the current window to another (or vice versa).
        </summary>
      <param name="oFocusChangeEvent">The FocusChangeEvent object that identifies whether the focus is being gained or lost.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="P:VO.Window.Font">
      <summary>
            The font currently used by this window. This font is used by the TextObject:TextPrint() method.
        </summary>
      <value>The font currently used by this window. This font is used by the TextObject:TextPrint() method.</value>
    </member>
    <member name="P:VO.Window.Foreground">
      <summary>
            The foreground brush currently in use by this window.
        </summary>
      <value>The foreground brush currently in use by this window.</value>
    </member>
    <member name="M:VO.Window.GetAllChildren">
      <summary>
            Obtain an array of all X# children objects of the window.
        </summary>
      <returns>
            An array of all X# children objects of the window. This array may contain window objects as well as control objects. Note that controls which do not have a corresponding X# object, like a FixedText control where the Generate Code property was set to "No", are not included in the returned array.
        </returns>
    </member>
    <member name="M:VO.Window.GetExStyle">
      <summary>
            Retrieve the Ex styles for the window.
        </summary>
      <returns>
            Numeric value representing the X# style constants or Windows API style constants enabled for the window.
        </returns>
    </member>
    <member name="M:VO.Window.GetStyle">
      <summary>
            Retrieve the styles for the window.
        </summary>
      <returns>
            Numeric value representing the X# style constants or Windows API style constants enabled for the window.
        </returns>
    </member>
    <member name="M:VO.Window.Handle">
      <summary>
            Return the handle for a window.
        </summary>
      <param name="nHandleType">
            The type of handle required. 0 is the only supported option and is the default if <paramref name="nHandle" /> is omitted.
        </param>
      <returns>
            A handle to the window, describing the underlying system object.
        </returns>
    </member>
    <member name="M:VO.Window.HasExStyle(System.Int32)">
      <summary>Check if an exstyle value has been set for the window</summary>
      <param name="kStyle">The style to check for</param>
      <returns>TRUE when the exstyle is set. Otherwise FALSE.</returns>
    </member>
    <member name="M:VO.Window.HasStyle(System.Int32)">
      <summary>Check if a style value has been set for the window</summary>
      <param name="kStyle">The style to check for</param>
      <returns>TRUE when the style is set. Otherwise FALSE.</returns>
    </member>
    <member name="P:VO.Window.HelpDisplay">
      <summary>
            The help display object currently used by this window. This help display object provides a connection between the help file to be displayed and this window.
        </summary>
      <value>The help display object currently used by this window. This help display object provides a connection between the help file to be displayed and this window.</value>
    </member>
    <member name="M:VO.Window.HelpRequest(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the user requests help from the application using one of the available context-sensitive help mechanisms.
        </summary>
      <param name="oHelpRequestEvent">The HelpRequestEvent object that describes which item help is being requested for.</param>
    </member>
    <member name="M:VO.Window.Hide">
      <summary>
            Hide this window so it is not visible.
        </summary>
    </member>
    <member name="M:VO.Window.HorizontalScroll(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a horizontal scroll bar is scrolled.
        </summary>
      <param name="oScrollEvent">The ScrollEvent object that describes the scroll type and new position.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.HorizontalSlide(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a horizontal slider's thumb is dragged either by the mouse or the keyboard.
        </summary>
      <param name="oSliderEvent">The SliderEvent object that describes which horizontal slider's thumb was dragged.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.HorizontalSpin(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a horizontal spinner is spun.
        </summary>
      <param name="oSpinnerEvent">The SpinnerEvent object that describes which horizontal spinner was spun.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="P:VO.Window.HyperLabel">
      <summary>
            The hyperlabel connected to this window.
        </summary>
      <value>The hyperlabel connected to this window.</value>
    </member>
    <member name="P:VO.Window.Icon">
      <summary>
            The large icon object used for this window.
        </summary>
      <value>The large icon object used for this window.</value>
    </member>
    <member name="P:VO.Window.IconSm">
      <summary>
            The small icon object used for this window.
        </summary>
      <value>The small icon object used for this window.</value>
    </member>
    <member name="M:VO.Window.IsEnabled">
      <summary>
            Report if this window is currently enabled.
        </summary>
      <returns>
            TRUE if the window is enabled; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Window.IsIconic">
      <summary>
            Report if this window is currently iconized.
        </summary>
      <returns>
            TRUE if the window is iconized; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Window.IsVisible">
      <summary>
            Report if this window is visible (completely or partially) or hidden.
        </summary>
      <returns>
            TRUE if the window is visible; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Window.IsZoomed">
      <summary>
            Report if this window is maximized (fills the entire screen).
        </summary>
      <returns>
            TRUE if the window is maximized; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Window.KeyDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a key on the keyboard is pressed.
        </summary>
      <param name="oKeyEvent">The KeyEvent object that describes what key was pressed.</param>
    </member>
    <member name="M:VO.Window.KeyUp(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a key on the keyboard is released.
        </summary>
      <param name="oKeyEvent">The KeyEvent object that describes what key was released.</param>
    </member>
    <member name="M:VO.Window.LineTo(XSharp.__Usual)">
      <summary>
            Draw a line on this window (using the current pen) from the current pen position to a specified point.
        </summary>
      <param name="oPoint">
            The position where the line should end, in canvas coordinates. or an array of points,
            in canvas coordinates, where the line should end, in which case Window:LineTo() acts like a polyline method.
        </param>
    </member>
    <member name="M:VO.Window.ListBoxClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item in a list box owned by this window is double-clicked.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which list box contained the item that is double-clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListBoxSelect(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item in a list box owned by this window is clicked.
        </summary>
      <param name="oControlEvent">The ControlEvent object that describes which list box contained the item that was clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewColumnClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a list view column header is clicked in a list view control.
        </summary>
      <param name="oListViewColumnClickEvent">The ListViewColumnClickEvent object that describes which list view column of which list view control was clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewItemChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a list view item has changed.
        </summary>
      <param name="oListViewItemEvent">The ListViewItemEvent object that describes which list view item has changed.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewItemChanging(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the state of a list view item is about to change.
        </summary>
      <param name="oListViewItemEvent">The ListViewItemEvent object that describes which list view item is about to change.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewItemDelete(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a list view item is deleted in a list view control.
        </summary>
      <param name="oListViewDeleteEvent">The ListViewDeleteEvent object that describes which list view item of which list view control was deleted.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewItemDrag(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a list view item is dragged in a list view control.
        </summary>
      <param name="oListViewDragEvent">The ListViewDragEvent object that describes which list view item of which list view control was dragged.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewItemEdit(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a list view item is edited in a list view control.
        </summary>
      <param name="oListViewEditEvent">The ListViewEditEvent object that describes which list view item of which list view control was edited.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewKeyDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a key is pressed in a list view control.
        </summary>
      <param name="oListViewKeyEvent">The ListViewKeyEvent object that describes which list view control received a key press.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewMouseButtonDoubleClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a mouse button is double-clicked in a list view control. This could be used to invoke an "edit screen" for the selected item, print a report, etc. See the ListViewMouseButtonDown() method for sample syntax.
        </summary>
      <param name="oListViewMouseEvent">The ListViewMouseEvent object that describes which list control received a mouse button double-click.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ListViewMouseButtonDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a mouse button is clicked in a list view control.
        </summary>
      <param name="oListViewMouseEvent">The ListViewMouseEvent object that describes which list control received a mouse button click.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="P:VO.Window.Menu">
      <summary>
            The menu currently in use by this window.
        </summary>
      <value>The menu currently in use by this window.</value>
    </member>
    <member name="M:VO.Window.MenuCommand(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item on a menu owned by this window is selected.
        </summary>
      <param name="oMenuCommandEvent">The MenuCommandEvent object that describes which menu and menu command (via the item's ID) generated the event.</param>
    </member>
    <member name="M:VO.Window.MenuInit(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a pop-up menu owned by this window is about to "pop up."
        </summary>
      <param name="oMenuInitEvent">The MenuInitEvent object that describes which menu is about to pop up.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.MenuSelect(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an item on a menu owned by this window is selected.
        </summary>
      <param name="oMenuSelectEvent">The MenuSelectEvent object that describes which menu and menu command (via the item's ID) generated the event.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.MinMaxInfo(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the size or position of a window is about to change (cf WM_GETMINMAXINFO in Win API).
        </summary>
      <param name="oMinMaxInfoEvent">The MinMaxInfoEvent object that describes the maximised width, height and position of the maximised window in addition to the minimum and maximum height and width of the window.</param>
    </member>
    <member name="P:VO.Window.MinSize">
      <summary>The minimum size for the window</summary>
      <value>The minimum size for the window</value>
    </member>
    <member name="M:VO.Window.ModifyTrayIcon(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Modify the tray icon associated with the window.
        </summary>
      <param name="oTrayIcon">The icon object to add to the tray.</param>
      <param name="dwID">The unique ID of the icon (between 1 and 8000).</param>
      <param name="sToolTip">The tool tip string to be displayed for this icon.</param>
    </member>
    <member name="M:VO.Window.MonthCalSelectionChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the selection of a MonthCalendar control is changed.
        </summary>
      <param name="_oMonthCalSelectionEvent">The MonthCalSelectionEvent object that describes the changed selection.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.MouseButtonDoubleClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the mouse pointer is positioned over the window and a mouse button is double-clicked.
        </summary>
      <param name="oMouseEvent">The MouseEvent object that contains information about the state of the mouse when the button was double-clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.MouseButtonDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the mouse pointer is positioned over the window and a mouse button is clicked.
        </summary>
      <param name="oMouseEvent">The MouseEvent object that contains information about the state of the mouse when the button was clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.MouseButtonUp(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the mouse pointer is positioned over the window and a mouse button is released.
        </summary>
      <param name="oMouseEvent">The MouseEvent object that contains information about the state of the mouse when the button was released.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.MouseDrag(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a mouse with one or more buttons clicked is moved in the window.
        </summary>
      <param name="oMouseEvent">The MouseEvent object containing information on the location and state of the buttons when the mouse was dragged.</param>
    </member>
    <member name="M:VO.Window.MouseMove(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the mouse is moved in the window.
        </summary>
      <param name="oMouseEvent">The MouseEvent object containing information on the location of the mouse when it was moved.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.MouseTrapOff">
      <summary>
            Disable the window from trapping MouseEvents generated outside itself.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.MouseTrapOn">
      <summary>
            Enable this window to trap MouseEvents generated outside itself.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.Move(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the window is moved (either by the user or by the application).
        </summary>
      <param name="oMoveEvent">The MoveEvent object that describes the window movement.</param>
    </member>
    <member name="M:VO.Window.MoveTo(XSharp.__Usual)">
      <summary>
            Move the current pen to a point on the window's canvas area.
        </summary>
      <param name="oPoint">The position of the pen, in canvas coordinates.</param>
      <returns>
            A point representing the previous location of the pen, in canvas coordinates.
        </returns>
    </member>
    <member name="P:VO.Window.Origin">
      <summary>
            The point representing the new location of this window, in the canvas coordinates of its owner.
        </summary>
      <value>The point representing the new location of this window, in the canvas coordinates of its owner.</value>
    </member>
    <member name="P:VO.Window.Owner">
      <summary>
            The owner of the window, either a Window or App object.
        </summary>
      <value>The owner of the window, either a Window or App object.</value>
    </member>
    <member name="P:VO.Window.OwnerAlignment">
      <summary>The Owner Alignment value for the window, which is used when the window is a subwindow on another window.</summary>
      <value>The Owner Alignment value for the window</value>
    </member>
    <member name="M:VO.Window.PaintBackground(XSharp.__Usual)">
      <summary>
            Paint the background for a window with the brush or background object that was specified by the user.
        </summary>
      <param name="hDC">The device context of the window on which the background must be painted.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.PaintBoundingBox(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Paint a rectangular area in the window using a specified painting method.
        </summary>
      <param name="oBoundingBox">The bounding box (group or character box) representing the window area to be painted, in canvas coordinates.</param>
      <param name="kPaintMode">
            The constant that represents how the window area is painted:
            <list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>
                        PAINTFILL
                    </term><description>Fills the entire rectangle using the currently selected brush. This is the default.</description></item><item><term>
                        PAINTFRAME
                    </term><description>Frames the entire rectangle using the currently selected pen</description></item><item><term>PAINTINVERT   </term><description>Inverts the entire rectangle</description></item></list></param>
      <returns>NIL</returns>
    </member>
    <member name="P:VO.Window.Pen">
      <summary>
            The pen assigned to the window and used in subsequent line and rectangle drawing operations; it should not be deleted while it is the current selection.
        </summary>
      <value>The pen assigned to the window and used in subsequent line and rectangle drawing operations; it should not be deleted while it is the current selection.</value>
    </member>
    <member name="P:VO.Window.Pointer">
      <summary>
            The pointer used by the window to represent the mouse when it enters the window.
        </summary>
      <value>The pointer used by the window to represent the mouse when it enters the window.</value>
    </member>
    <member name="M:VO.Window.PostInit">
      <summary>
            Implement customized initialization code for the window.
        </summary>
    </member>
    <member name="M:VO.Window.PreInit">
      <summary>
            Implement customized initialization code for the window.
        </summary>
    </member>
    <member name="M:VO.Window.Print(XSharp.__Usual)">
      <summary>
            Print the contents of the window.
        </summary>
      <param name="oDevice">The PrintingDevice object that will receive the output. If omitted, the default printer driver is used.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.Window.QueryClose(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked just before the window closes to confirm if the application really wants to close the window.
        </summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
      <returns>
            The method inside the window class always returns TRUE.
            If you override this method in your subclass then you must return TRUE if the window is to be closed; otherwise, return FALSE.
        </returns>
    </member>
    <member name="M:VO.Window.RegisterTimer(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Register a timer method to be invoked for the window.
        </summary>
      <param name="nInterval">Time interval, in seconds, between calls to the Timer() method of the window.</param>
      <param name="lOneTime">Logical value indicating if the timer is called just once (TRUE), or multiple times (FALSE). If omitted, the default is FALSE.</param>
    </member>
    <member name="M:VO.Window.RePaint">
      <summary>
            Send an ExposeEvent to repaint the window's canvas area.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.RepaintBoundingBox(XSharp.__Usual)">
      <summary>
            Repaint a rectangular area in the window.
        </summary>
      <param name="oBoundingBox">The bounding box (group or character box) representing the window area to be repainted, in canvas coordinates.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the window changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the window canvas area.</param>
    </member>
    <member name="M:VO.Window.RichEditProtected(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when an attempt is made to modify text that is protected in a rich edit control.
        </summary>
      <param name="oRichEditProtectEvent">The RichEditProtectEvent object that describes which rich edit control received a protect event.</param>
      <returns>This method always sets the EventReturnValue to 1 and returns 0</returns>
    </member>
    <member name="M:VO.Window.RichEditSelectionChange(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the current selection in a rich edit control is changed.
        </summary>
      <param name="oRichEditSelectionEvent">The RichEditSelectionEvent object that describes which rich edit had its current selection change.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.RichEditUndoLost(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the undo state in a rich edit control can no longer be maintained.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes which rich edit has lost its undo state.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.Scroll(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Scroll a rectangular area in the window a specified amount, in a specified direction, and optionally clip the area when scrolled.
        </summary>
      <param name="oDimension">The dimension representing the amount to move the rectangular scroll area (relative to its origin). Positive width values scroll to the right while negative width values scroll to the left. In addition, positive height values scroll upwards while negative height values scroll downwards.</param>
      <param name="oBoundingBox">The bounding box representing the rectangular window area, in canvas coordinates. If omitted, the default is the canvas area of the screen.</param>
      <param name="lClip">Indicates whether to clip the rectangular area when scrolled. TRUE clips the area; FALSE does not. If omitted, the default is TRUE.</param>
    </member>
    <member name="M:VO.Window.SetAlignStartSize(XSharp.__Usual)">
      <summary>This method is used to register the start size of a window which is used later to resize controls that have their OwnerAlignment property set.</summary>
      <param name="oSize">The dimenstion object that contains the size that should be stored. If this object is not passed then the method will calculate the size of the window and store that for future reference.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.SetBackgroundBrush(XSharp.__Usual)">
      <summary>
            Set the background brush used to paint the window.
        </summary>
      <param name="dwNew">The new brush to use. The default is COLOR_3DSHADOW.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.SetExStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the extended style of a window.
        </summary>
      <param name="dwSetStyle">The extended style to set.</param>
      <param name="lEnable">A logical value. TRUE turns the style on, FALSE turns it off.</param>
      <returns>The new ExStyle of the window (calculated by taking the existing style and enableing or disabling the passed style value).</returns>
    </member>
    <member name="M:VO.Window.SetFocus">
      <summary>
            Set the keyboard focus to this window.
        </summary>
    </member>
    <member name="M:VO.Window.SetHandle(XSharp.__Usual)">
      <summary>This methdod allows to set or change the handle of the window. This is normally done right after the window is created.</summary>
      <param name="hNewWnd">The new window handle for the window.</param>
      <returns>The windows handle.</returns>
    </member>
    <member name="M:VO.Window.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Set the styles for the window.
        </summary>
      <param name="dwSetStyle">The X# style constant or Windows API style constant to set.</param>
      <param name="lEnable">Logical value indicating whether the style should be enabled (TRUE) or disabled(FALSE). If omitted, the default is TRUE.</param>
      <returns>
        <returns>The new Style of the window (calculated by taking the existing style and enableing or disabling the passed style value).</returns>
      </returns>
    </member>
    <member name="M:VO.Window.Show(XSharp.__Usual)">
      <summary>
            Display this window.
        </summary>
      <param name="kShowState">The constant that represents how the window is shown. Valid values are:</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.ShowBalloonTrayTip(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display a balloon tip for an icon in the tray that is associated with this window.
        </summary>
      <param name="oTrayIcon">The icon to be displayed in the tray.</param>
      <param name="dwID">The unique ID of the icon (between 1 and 8000).</param>
      <param name="sHeading">The heading to be displayed in the balloon. This title appears in boldface above the text. It can have a maximum of 63 characters.</param>
      <param name="sToolTip">The text to be displayed in the balloon. In Shell version 5 and above, the maximum size is 128 charecters. Below Shell version 5, the maximum is 64 charecters.</param>
      <param name="dwTimeOut">
            The length of time to display the balloon before it is removed if it is not dismissed by the user.
            The system enforces minimum and maximum timeout values. dwTimeout values that are too large are set to the maximum value and values that are too small default to the minimum value.
            This is set in milliseconds.
        </param>
      <param name="dwInfo">
            Flags that can be set to add an icon to a balloon ToolTip.
            Valid values are:
            <list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>
                        NIIF_ERROR
                    </term><description>An error icon.</description></item><item><term>
                        NIIF_INFO
                    </term><description>An information icon.</description></item><item><term>
                        NIIF_NONE
                    </term><description>No icon.</description></item><item><term>
                        NIIF_WARNING
                    </term><description>A warning icon.</description></item><item><term>
                        NIIF_NOSOUND
                    </term><description>Do not play the associated sound.</description></item></list></param>
      <returns>The result of the call to Shell_NotifyIcon() (see the WIN32 API)</returns>
    </member>
    <member name="P:VO.Window.Size">
      <summary>
            The dimension representing the size of this window.
        </summary>
      <value>The dimension representing the size of this window.</value>
    </member>
    <member name="M:VO.Window.SizeText(XSharp.__Usual)">
      <summary>
            Determine the space needed to print a string on the window in the current font.
        </summary>
      <param name="cTextToSize">The string to be printed.</param>
      <returns>
            A dimension representing the space required to print the string on this window using the current font.
        </returns>
    </member>
    <member name="M:VO.Window.StatusMessage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            This is an empty method, since the Window class does not have a statusbar.
        </summary>
      <param name="oHL">The hyperlabel containing a description (HyperLabel:Description) for the status message or the status message as a string.</param>
      <param name="ntype">
            The constant value indicating the type and priority of the message to be displayed on the status bar.
            The highest priority message (MESSAGEMENU) always takes precedence over and replaces lower priority messages. See table in the remarks section for more info.
        </param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.SysLinkSelect(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a a user clicks on a SysLink control.
        </summary>
      <param name="oSysLinkSelectEvent">The SysLinkSelectEvent object that describes the control on which the user clicked.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TabKeyDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a key press occurs in a tab control.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes which tab control received a key press.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TabSelect(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tab is selected in a tab control.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes which tab control's tab has been selected.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TabSelectionChanging(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tab selection is changing in a tab control.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes which tab control's selected tab is changing.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="P:VO.Window.TextColor">
      <summary>
            Uses a pen object and builds a pen in this window.
        </summary>
      <value>Uses a pen object and builds a pen in this window.</value>
    </member>
    <member name="M:VO.Window.TextPrint(XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Display a given string on the window at a specified location using the current font and the current pen color.
        </summary>
      <param name="cText">The string to be printed.</param>
      <param name="oPoint">The position of the string's origin, in canvas coordinates.</param>
    </member>
    <member name="M:VO.Window.Timer">
      <summary>
            Provide a method to be invoked at specific intervals defined when the timer is registered though the RegisterTimer() method.
        </summary>
    </member>
    <member name="P:VO.Window.ToolBar">
      <summary>
            The toolbar in use by the window.
        </summary>
      <value>The toolbar in use by the window.</value>
    </member>
    <member name="M:VO.Window.ToolBarHeightChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the height of the window's toolbar is changed.
        </summary>
      <param name="oControlNotifyEvent">The ControlNotifyEvent object that describes the changes to the toolbar height.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.ToTop">
      <summary>
            Move this window "to the front" of the windows lying on the desktop, giving it the input focus.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.TrayIconBalloonClicked(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tray icon balloon is clicked.
        </summary>
      <param name="dwID">The ID that was associated with the tray icon balloon.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.TrayIconBalloonShown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tray icon balloon is shown.
        </summary>
      <param name="dwID">The ID that was associated with the tray icon balloon.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.TrayIconBalloonTimeOut(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tray icon balloon times out.
        </summary>
      <param name="dwID">The ID that was associated with the tray icon balloon.</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.TrayIconClicked(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a user clicks on a tray Icon
        </summary>
      <param name="dwID">The ID that was associated with the tray icon balloon.</param>
      <param name="lRightButton">TRUE when the user clicked with the Right Mouse button</param>
      <param name="lDoubleClick">TRUE when the user double clicked</param>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.TreeViewItemDelete(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tree view item is deleted in a tree view control.
        </summary>
      <param name="oTreeViewDeleteEvent">The TreeViewDeleteEvent object that describes which tree view item of which tree view control was deleted.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewItemDrag(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tree view item is dragged in a tree view control.
        </summary>
      <param name="oTreeViewDragEvent">The TreeViewDragEvent object that describes which tree view item of which tree view control was dragged.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewItemEdit(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tree view item is edited in a tree view control.
        </summary>
      <param name="oTreeViewEditEvent">The TreeViewEditEvent object that describes which tree view item of which tree view control was edited.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewItemExpanded(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tree view item is expanded in a tree view control.
        </summary>
      <param name="oTreeViewExpandedEvent">The TreeViewExpandedEvent object that describes which tree view item of which tree view control was expanded.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewItemExpanding(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a tree view item is expanding in a tree view control.
        </summary>
      <param name="oTreeViewExpandingEvent">The TreeViewExpandingEvent object that describes which tree view item of which tree view control is expanding.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewKeyDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a key is pressed in a tree view control.
        </summary>
      <param name="oTreeViewKeyEvent">The TreeViewKeyEvent object that describes which tree view control received a key press.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewMouseButtonDoubleClick(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a mouse button is double-clicked in a tree view control.
        </summary>
      <param name="oTreeViewMouseEvent">The TreeViewMouseEvent object that describes which tree view control received a mouse button double-click.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewMouseButtonDown(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a mouse button is clicked in a tree view control.
        </summary>
      <param name="oTreeViewMouseEvent">The TreeViewMouseEvent object that describes which tree view control received a mouse button click.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewSelectionChanged(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the selection has changed from one tree view item to another in a tree view control.
        </summary>
      <param name="oTreeViewSelectionEvent">The TreeViewSelectionEvent object that describes which tree view control's selected item was changed.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.TreeViewSelectionChanging(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the selection is changing from one tree view item to another in a tree view control.
        </summary>
      <param name="oTreeViewSelectionEvent">The TreeViewSelectionEvent object that describes which tree view control's selected item is changing.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.Update">
      <summary>
            Update the client area of the specified window.
        </summary>
      <returns>NIL</returns>
    </member>
    <member name="M:VO.Window.VerticalScroll(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a vertical scroll bar is scrolled.
        </summary>
      <param name="oScrollEvent">The ScrollEvent object that describes the scroll type and new position.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.VerticalSlide(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a vertical slider's thumb is dragged either by the mouse or the keyboard.
        </summary>
      <param name="oSliderEvent">The SliderEvent object that describes which vertical slider's thumb was dragged.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="M:VO.Window.VerticalSpin(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when a vertical spinner is spun.
        </summary>
      <param name="oSpinnerEvent">The SpinnerEvent object that describes which vertical spinner was spun.</param>
      <returns>This method calls Window.Default() and returns the result of Window.Default()</returns>
    </member>
    <member name="P:VO.Window.WindowArea">
      <summary>
            The bounding box representing the minimal area which encloses the entire window (canvas area and non-canvas area), in canvas coordinates.
        </summary>
      <value>The bounding box representing the minimal area which encloses the entire window (canvas area and non-canvas area), in canvas coordinates.</value>
    </member>
    <member name="T:VO.WindowHorizontalScrollBar">
      <summary>
            Create a window horizontal scroll bar.
        </summary>
    </member>
    <member name="M:VO.WindowHorizontalScrollBar.#ctor(XSharp.__Usual)">
      <summary>
            Construct a window horizontal scroll bar.
        </summary>
      <param name="oOwner">The window that owns the window horizontal scroll bar.</param>
    </member>
    <member name="M:VO.WindowHorizontalScrollBar.Destroy">
      <summary>
            Provide a method to de-instantiate a WindowHorizontalScrollBar object.
        </summary>
    </member>
    <member name="T:VO.WindowScrollBar">
      <summary>
            Abstract class for Windows Scrollbars
        </summary>
    </member>
    <member name="M:VO.WindowScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
            Construct a scroll bar.
        </summary>
      <param name="oOwner">The window that owns the scroll bar.</param>
      <param name="xID">The unique ID between 1 and 8000 of the scroll bar.</param>
      <param name="oPoint">The origin of the scroll bar, in canvas coordinates.</param>
      <param name="oDimension">The dimension of the scroll bar, in canvas coordinates.</param>
      <param name="oResourceID">The resource ID of the scroll bar.</param>
      <param name="lDataAware">A logical value specifying whether the list box is data aware.</param>
    </member>
    <member name="T:VO.WindowVerticalScrollBar">
      <summary>
            Create a window vertical scroll bar.
        </summary>
    </member>
    <member name="M:VO.WindowVerticalScrollBar.#ctor(XSharp.__Usual)">
      <summary>
            Construct a window vertical scroll bar.
        </summary>
      <param name="oOwner">The window that owns the window vertical scroll bar.</param>
    </member>
    <member name="M:VO.WindowVerticalScrollBar.Destroy">
      <summary>
            Provide a method to de-instantiate a WindowVerticalScrollBar object.
        </summary>
    </member>
    <member name="T:VOGUIClasses.Functions">
      <summary>This compiler generated class contains all the functions, globals and defines that are defined in the VOGUIClasses.dll assembly. </summary>
    </member>
    <member name="M:VOGUIClasses.Functions.CAPaintIsLoaded"></member>
    <member name="M:VOGUIClasses.Functions.CAPaintLastError"></member>
    <member name="M:VOGUIClasses.Functions.CAPaintLastErrorMsg"></member>
    <member name="M:VOGUIClasses.Functions.CAPaintShowErrors(System.Boolean)"></member>
    <member name="F:VOGUIClasses.Functions.DefaultDDImpClassName"></member>
    <member name="F:VOGUIClasses.Functions.DefaultDocAppClassName"></member>
    <member name="F:VOGUIClasses.Functions.DefaultFormDialogClassName"></member>
    <member name="F:VOGUIClasses.Functions.DefaultFormFrameClassName"></member>
    <member name="F:VOGUIClasses.Functions.DefaultSplitViewClassName"></member>
    <member name="F:VOGUIClasses.Functions.DefaultWindAppClassName"></member>
    <member name="M:VOGUIClasses.Functions.DIBCreateFromFile(XSharp.__Psz)">
      <summary>
            Create a device independent bitmap (DIB) from an image file.
        </summary>
      <param name="pszFName">Name of the new DIB file.</param>
      <returns>
            Pointer to DIB data which can be displayed; otherwise, NULL_PTR.
        </returns>
    </member>
    <member name="M:VOGUIClasses.Functions.DIBCreateFromPTR(System.Byte*,System.Int32)">
      <summary>
            Convert an image file to a device independent bitmap (DIB).
        </summary>
      <param name="pbImage">Pointer to the first byte of image data.</param>
      <param name="nSize">Size (number of bytes) of image data.</param>
      <returns>
            Pointer to DIB data which can be displayed; otherwise, NULL_PTR.
        </returns>
    </member>
    <member name="M:VOGUIClasses.Functions.DIBDelete(System.Void*)">
      <summary>
            Destroy a DIB created either by DIBCreateFromFile() or DIBCreateFromPtr().
        </summary>
      <param name="pWinBmp">Pointer to DIB data.</param>
      <returns />
    </member>
    <member name="M:VOGUIClasses.Functions.DIBGetInfo(System.Void*)">
      <summary>
            Retrieve a pointer to the BITMAPINFO structure of a DIB.
        </summary>
      <param name="pWinBmp">Pointer to DIB data.</param>
      <returns>
            Pointer to the BITMAPINFO structure, if successful; otherwise, NULL_PTR.
        </returns>
    </member>
    <member name="M:VOGUIClasses.Functions.DIBSaveAs(System.Void*,XSharp.__Psz)">
      <summary>
            Save the DIB to a file.
        </summary>
      <param name="pWinBmp">Pointer to DIB data.</param>
      <param name="pszFName">Name of the new DIB file.</param>
      <returns />
    </member>
    <member name="M:VOGUIClasses.Functions.DIBShow(System.Void*,System.Void*)">
      <summary>
            Display the DIB within the specified window.
        </summary>
      <param name="pWinBmp">Pointer to DIB data.</param>
      <param name="hWnd">Window handle.</param>
      <returns />
    </member>
    <member name="M:VOGUIClasses.Functions.DIBStretch(System.Void*,System.Void*,System.UInt32,System.UInt32,System.Double)">
      <summary>
            Display the DIB within the specified window.
        </summary>
      <param name="pWinBmp">Pointer to the DIB data.</param>
      <param name="hWnd">Window handle.</param>
      <param name="nCx">Width of the area for displaying the DIB.</param>
      <param name="nCy">Height of the area for displaying the DIB.</param>
      <param name="r8Factor">
            The zoom factor of the bitmap.
            A value of 1.0 would be its normal size.
        </param>
      <returns />
    </member>
    <member name="M:VOGUIClasses.Functions.DrawThemeEdge(System.Void*,System.Void*,System.Int32,System.Int32,System.Void*,System.UInt32,System.UInt32,System.Void*)"></member>
    <member name="M:VOGUIClasses.Functions.Enable3dControls">
      <summary>Determines whether controls on windows created with the GUI classes are displayed using a sculpted, three-dimensional look.</summary>
    </member>
    <member name="M:VOGUIClasses.Functions.GetAppObject">
      <summary>
            Return the global App object for this application.
        </summary>
      <returns />
    </member>
    <member name="M:VOGUIClasses.Functions.GetFocusedObject">
      <summary>
            Return the object corresponding to the control or window that currently has input focus.
        </summary>
      <returns>
            The window or control object that currently has input focus.
        </returns>
    </member>
    <member name="M:VOGUIClasses.Functions.GetObjectByHandle(System.Void*)">
      <summary>
            Return the object associated with a given window handle.
        </summary>
      <param name="hwnd">The window handle.</param>
      <returns>
            The Window or Control object associated with the given window handle.
        </returns>
    </member>
    <member name="M:VOGUIClasses.Functions.GUIExit(System.Object,System.EventArgs)"></member>
    <member name="M:VOGUIClasses.Functions.IsAltPressed">
      <summary>Get the current state of the Alt key.</summary>
    </member>
    <member name="M:VOGUIClasses.Functions.IsControlPressed">
      <summary>Get the current state of the Ctrl key.</summary>
    </member>
    <member name="M:VOGUIClasses.Functions.IsShiftPressed">
      <summary>Get the current state of the Shift key.</summary>
    </member>
    <member name="F:VOGUIClasses.Functions.oApp"></member>
    <member name="M:VOGUIClasses.Functions.SetClassStyle(System.Void*,System.UInt32,System.Boolean)"></member>
    <member name="M:VOGUIClasses.Functions.THTMLHelp(System.Void*,XSharp.__Psz,System.UInt32,System.UInt32)"></member>
    <member name="M:VOGUIClasses.Functions.UseColonInAutoLayoutCaptions(System.Boolean)"></member>
    <member name="T:XSharp.ChildWinForm">
      <summary>Special Subclass of ChildAppWindow to host a windows forms window in a VO GUI hierarchy</summary>
    </member>
    <member name="M:XSharp.ChildWinForm.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.ChildWinForm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.ChildWinForm.Activate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is activated.
        </summary>
      <param name="oEvent">The event that describes which window was activated.</param>
    </member>
    <member name="M:XSharp.ChildWinForm.Close(XSharp.__Usual)">
      <summary>
            Invoked just as the window is about to close.
        </summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
    </member>
    <member name="M:XSharp.ChildWinForm.DeActivate(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when this window is deactivated.
        </summary>
      <param name="oEvent">An empty event required to maintain the protocol that all event handlers have exactly one event as their argument.</param>
    </member>
    <member name="M:XSharp.ChildWinForm.Resize(XSharp.__Usual)">
      <summary>
            Provide a method that is invoked when the window changes size.
        </summary>
      <param name="oResizeEvent">The ResizeEvent object that describes the new dimensions of the window canvas area.</param>
    </member>
    <member name="P:XSharp.ChildWinForm.WinForm">
      <summary>Get/Set the form that needs to be hosted in the VO GUI hierarchy</summary>
    </member>
    <member name="T:XSharp.VOWinFormApp">
      <summary>Special App class to is used when hosting Windows Forms Forms in a VO GUI hierarchy</summary>
    </member>
    <member name="M:XSharp.VOWinFormApp.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.VOWinFormApp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.VOWinFormApp.BeforeDispatch(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)"></member>
    <member name="M:XSharp.VOWinFormApp.RegisterWinForm(System.Windows.Forms.Form)">
      <summary>Register a windows forms form. This method is automatically called from the ChildWinForm:WinForm property</summary>
    </member>
    <member name="M:XSharp.VOWinFormApp.UnRegisterWinForm(System.Windows.Forms.Form)">
      <summary>UnRegister a windows forms form. This method is automatically called from the ChildWinForm:Close() method.</summary>
    </member>
    <member name="T:XSharp.WinFormVOWindow">
      <summary>This class is used to host a VO GUI Window in a Windows Forms UI Hierarchy</summary>
    </member>
    <member name="M:XSharp.WinFormVOWindow.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.WinFormVOWindow</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.WinFormVOWindow.CloseHostForm(VO.Window)">
      <summary>Close a VO window and the form that it hosts</summary>
    </member>
    <member name="M:XSharp.WinFormVOWindow.Initialize"></member>
    <member name="P:XSharp.WinFormVOWindow.VOWindowHost">
      <summary>Form that host the VO window</summary>
    </member>
    <member name="T:XSharp.WinFormVOWindowHost">
      <summary>This class is used to host a VO GUI Window in a Windows Forms UI Hierarchy</summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Component" /> class. </summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.#ctor(System.ComponentModel.IContainer)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.WinFormVOWindowHost</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.#ctor(VO.Window,System.Windows.Forms.Control)">
      <summary>Create w WinFormVOHostwindow </summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.AdjustVOWindow">
      <summary>Resize VO window</summary>
    </member>
    <member name="P:XSharp.WinFormVOWindowHost.ClassesNeedingTranslateTabToArrow">
      <summary>Specify the class names that require special handling for TAB keys.</summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.Close">
      <summary>Close the window</summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.Focus">
      <summary>Set focus to the form and the window that it hosts.</summary>
    </member>
    <member name="P:XSharp.WinFormVOWindowHost.HostingControl">
      <summary>The control that is used to host the VO Window</summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.IsHostingDataWindow">
      <summary>Is the VO Window a DataWindow ?</summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.ProcessDialogKey(System.Windows.Forms.Keys)"></member>
    <member name="P:XSharp.WinFormVOWindowHost.VOWindow">
      <summary>Get/Set the object of VO window that needs to be hosted</summary>
    </member>
    <member name="P:XSharp.WinFormVOWindowHost.VOWindowClassName">
      <summary>Get/Set the class name of VO window that needs to be hosted</summary>
    </member>
  </members>
</doc>