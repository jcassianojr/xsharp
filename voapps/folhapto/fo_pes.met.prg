PARTIAL CLASS jfo_pes
METHOD append 
LOCAL oBUSCA AS XBUSCA
LOCAL oQUAL AS jqualfunc
oQUAL:=jqualfunc {}
oQUAL:SHOW()
IF ! oQUAL:lOK
  alert("dados basicos nao preenchidos")	
  RETURN  .f.
ENDIF	
oBUSCA:=XBUSCA{SELF,"Incluir Funcionário","Digite Nº Funcionário"}
oBUSCA:lMES:=.T.
oBUSCA:SHOW()
IF oBUSCA:lOK
   SELF:SERVER:SETORDER(1)
   SELF:SERVER:GOTOP()
   IF SELF:SERVER:SEEK(Val(oBUSCA:cBUSCA))
   	  alert("Funcionario Ja cadastrado")
   ELSE
   	  SUPER:append()
   	  SELF:server:FIELDPUT("NUMERO",Val(oBUSCA:cBUSCA))
   	  SELF:SERVER:FIELDPUT("CNUMERO",StrZero(SELF:SERVER:FIELDGET("NUMERO"),8))
 	  SELF:SERVER:FIELDPUT("CPF",formatcpf(oQUAL:cCPF))
      SELF:SERVER:FIELDPUT("PIS",oQUAL:cPIS)
      SELF:SERVER:FIELDPUT("NOME",oQUAL:cNOME)
      SELF:SERVER:FIELDPUT("NASC",CToD(oQUAL:dNASC))
   ENDIF	
ENDIF		










METHOD buscaNUM( ) 
SELF:KeyFind()

METHOD checkcPF( ) 
SELF:SERVER:FIELDPUT("CPF",formatcpf(SELF:SERVER:FIELDGET("CPF")))	
Valcpf(SELF:SERVER:FIELDGET("CPF"),TRUE)


METHOD BTNCheckRG( ) 
	SELF:SERVER:FIELDPUT("RG",FormataRG(SELF:SERVER:FIELDGET("RG")))	
	CheckRG(SELF:SERVER:FIELDGET("rg"),TRUE,SELF:SERVER:FIELDGET("rgtip"),SELF:SERVER:FIELDGET("nasc"),SELF:SERVER:FIELDGET("rguf"))
	
	
//	CheckRG(Valor, lMES,cTIPO,dDATANASC,cUF )

METHOD cmdbco( ) 
	SELF:server:FIELDPUT("MODIRETA",SIMNAO(SELF:SERVER:FIELDGET("MODIRETA"),{"S","N"," "}))	
	

METHOD cmdbco1( ) 
SELF:server:FIELDPUT("MODIRETA",SIMNAO(SELF:SERVER:FIELDGET("MODIRETA"),{"D","I","A","C"," "}))	

METHOD cmdbco2( ) 
	SELF:server:FIELDPUT("CIVIL",SIMNAO(SELF:SERVER:FIELDGET("CIVIL"),{"1","2","3","4","5","6"," "}))	

METHOD cmdcesta( ) 
	SELF:server:FIELDPUT("CESTA",SIMNAO(SELF:SERVER:FIELDGET("CESTA"),{"S","N","V"}))	

METHOD cmdcesta1( ) 
		SELF:server:FIELDPUT("VT",SIMNAO(SELF:SERVER:FIELDGET("VT")))	

METHOD cmdcesta3( ) 
		SELF:server:FIELDPUT("INSALUBRI",SIMNAO(SELF:SERVER:FIELDGET("INSALUBRI")))	

METHOD CMDCHECKUF( ) 
	ufCheck(SELF:SERVER:FIELDGET("ESTADO"))

METHOD cmddelfiltro() 
   SELF:xcmddelfiltro()	
  SELF:Browser:REFRESH()


METHOD CMDFILTRAR() 
	SELF:xCMDFILTRAR()
	SELF:Browser:REFRESH()

METHOD cmdhora( ) 
SELF:server:FIELDPUT("TIPO",SIMNAO(SELF:SERVER:FIELDGET("TIPO"),{"H","M"}))	

METHOD cmdhora1( ) 
	SELF:server:FIELDPUT("SEXO",SIMNAO(SELF:SERVER:FIELDGET("SEXO"),{"M","F"}))	

METHOD CMDimprimir( ) 
SELF:XWRPTFGRP("PES","")	


METHOD cmdINSAL( ) 
		SELF:server:FIELDPUT("INSALUBRI",SIMNAO(SELF:SERVER:FIELDGET("INSALUBRI"),{"S","N"," "}))	

METHOD cmdordenar( ) 
	SELF:KeyFind()

METHOD cmdPERIC( ) 
	SELF:server:FIELDPUT("PERICULO",SIMNAO(SELF:SERVER:FIELDGET("PERICULO"),{"S","N"," "}))	

METHOD delete 
IF ! MDG("Apagar Registro") .AND. SELF:SERVER:LockCurrentRecord()
	RETU SELF
ENDIF	
SELF:server:delete()
SELF:server:skip(-1)
IF SELF:sERVER:BOF
   SELF:SERVER:GOTOP()	
ENDIF		

METHOD EditFocusChange(oEditFocusChangeEvent) 
//	LOCAL oControl AS Control
//	LOCAL lGotFocus AS LOGIC
	IIf(oEditFocusChangeEvent == NULL_OBJECT, NULL_OBJECT, oEditFocusChangeEvent:Control)     //oControl := 
	IIf(oEditFocusChangeEvent == NULL_OBJECT, FALSE, oEditFocusChangeEvent:GotFocus)    //lGotFocus :=
	SUPER:EditFocusChange(oEditFocusChangeEvent)
	//Put your changes here
//	IF oCONTROL:NAMESYM==#DEPTO.OR.OCONTROL:NAMESYM==#SETOR.OR.OCONTROL:NAMESYM==#SECAO
//	   SELF:SERVER:FIELDPUT("DEPSETSEC",SELF:SERVER:FIELDGET("DEPTO") * 1000000 + SELF:SERVER:FIELDGET("SETOR") * 1000 + SELF:SERVER:FIELDGET("SECAO"))	
//	ENDIF	
	RETURN NIL


METHOD escCDEM( ) 
LOCAL oESC AS XESCFO_TAB
IF ! Empty(SELF:SERVER:FIELDGET("DEMITIDO"))
   oESC:=XESCFO_TAB{SELF,"RCAU",SELF:SERVER:FIELDGET("MOTIVO")}
   oESC:SHOW()	
   IF Oesc:lok
      SELF:SERVER:FIELDPUT("MOTIVO",oESC:cCODIGO)
   ENDIF							
ELSE
   alert("Funcionario ainda nao demitido")	
ENDIF	

METHOD escCIVI( ) 
LOCAL oESC AS XESCFO_TAB
oESC:=XESCFO_TAB{SELF,"ECIV",SELF:SERVER:FIELDGET("ESTCIVIL")}
oESC:SHOW()	
IF Oesc:lok
   SELF:SERVER:FIELDPUT("ESTCIVIL",oESC:cCODIGO)
ENDIF						

METHOD ESCCOD( ) 
LOCAL oESC AS XESCCOD	
oESC:=XESCCOD{SELF,"FOPTOHOR.DBF",SELF:SERVER:FIELDGET("HTT")}
oESC:SHOW()	
IF Oesc:lok
   SELF:SERVER:FIELDPUT("HTT",oESC:CODIGO)
   SELF:SERVER:FIELDPUT("HT",oESC:NOME)
ENDIF				

METHOD escEXP( ) 
LOCAL oESC AS XESCFO_TAB
oESC:=XESCFO_TAB{SELF,"FOCO",SELF:SERVER:FIELDGET("OCOFGTS")}
oESC:SHOW()	
IF Oesc:lok
   SELF:SERVER:FIELDPUT("OCOFGTS",oESC:cCODIGO)
ENDIF						

METHOD escfun( ) 
LOCAL oESC AS XESCCOD	
oESC:=XESCCOD{SELF,"funcao.DBF",SELF:SERVER:FIELDGET("FUNCAO")}
oESC:SHOW()	
IF Oesc:lok
   SELF:SERVER:FIELDPUT("FUNCAO",oESC:CODIGO)
ENDIF					

METHOD escSITU( ) 
LOCAL oESC AS XESCFO_TAB
oESC:=XESCFO_TAB{SELF,"SITU",SELF:SERVER:FIELDGET("SITUACAO")}
oESC:SHOW()	
IF Oesc:lok
   SELF:SERVER:FIELDPUT("SITUACAO",oESC:cCODIGO)
ENDIF	

METHOD escUF( ) 
LOCAL oESC AS XESCFO_TAB
oESC:=XESCFO_TAB{SELF,"UF  ",SELF:SERVER:FIELDGET("ESTADO")}
oESC:SHOW()	
IF Oesc:lok
   SELF:SERVER:FIELDPUT("ESTADO",oESC:cCODIGO)
ENDIF							

METHOD escunid( ) 
LOCAL oESC AS XESCCOD	
oESC:=XESCCOD{SELF,"UNID.DBF",SELF:SERVER:FIELDGET("UNIFUN")}
oESC:SHOW()	
IF Oesc:lok
   SELF:SERVER:FIELDPUT("UNIFUN",oESC:CODIGO)
ENDIF				

METHOD foto( ) 
LOCAL nFout AS PTR
LOCAL cDIRFOTO
LOCAL cCPF
LOCAL cARQ AS STRING 
cDIRFOTO:=CurDir()
cCPF:=SELF:SERVER:FIELDGET("CPF")
IF Valcpf(cCPF)
	cDIRFOTO :=PEGINIVAL(ZCURINI,"FOTOS","FUNJPGCPF")		
	cDIRFOTO+=StrZero(Val(TIRAOUT(cCPF)),11)+".jpg"
ENDIF
cARQ:=PEGINIVAL(ZCURINI,"PATH","IMGJPG")
nFout := ShellExecute(SELF:owner:handle(),String2Psz("open"),String2Psz("IMGJPG"),String2Psz(CCPF+"#"+cDIRFOTO+"${IMGMP04CPF}"),String2Psz(carq),SW_SHOWNORMAL)
ShellExecuteErro(nFout) 

METHOD foto1() 
LOCAL OFOTOVIEW AS FOTOVIEW
LOCAL cDIRFOTO,cTITULO AS STRING
cDIRFOTO:=PEGINIVAL(ZCURINI,"FOTOS","FUNJPGCPF")		
cDIRFOTO:=cDIRFOTO+StrZero(Val(TIRAOUT(SELF:SERVER:FIELDGET("CPF"))),11)+".JPG"	
cTITULO:=Str(SELF:SERVER:FIELDGET("NUMERO"))+" CPF:"+SELF:SERVER:FIELDGET("CPF")+"-"+SELF:SERVER:FIELDGET("NOME")	
OFOTOVIEW:=fotoview{SELF,cDIRFOTO,cTITULO}
OFOTOVIEW:SHOW()		

METHOD PostInit() 
   SELF:RegisterTimer(300,FALSE)
 FabCenterWindow( SELF )
 RETURN SELF

METHOD Timer() 
   SELF:SERVER:COMMIT()



END CLASS
