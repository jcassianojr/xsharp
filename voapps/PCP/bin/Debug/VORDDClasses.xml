<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>VORDDClasses</name>
  </assembly>
  <members>
    <member name="T:VO.AdsSQLServer">
      <summary>ADS Compatible DbServer class that received a Sql Select statement in its constructor</summary>
    </member>
    <member name="M:VO.AdsSQLServer.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Construct a server object.
    </summary>
      <param name="cFile">
      The name of the file to open<br /><span>
      This parameter identifies the DBF file that is to be opened.
      If a string is specified, it corresponds exactly to the file name parameter of the DBUseArea() function; it can contain a full path with drive and directories, or just a file name.
      If a FileSpec object is specified, its file name component is used as the file to open. It can also contain a full path with drive and directories, or just a file name.
      With either type of parameter, if only a file name is specified, the DBServer works the same way as the USE command or the DBUseArea() function with regard to default path—it is subject to SET PATH and SET DEFAULT, for example. The extension DBF is assumed by default.
      In either case, after the DBServer object has been successfully created, it contains a FileSpec object with the original file specification.
    </span></param>
      <param name="oFS">
      A FileSpec object with the name of the file to open<br /><span>
      This parameter identifies the DBF file that is to be opened.
      If a string is specified, it corresponds exactly to the file name parameter of the DBUseArea() function; it can contain a full path with drive and directories, or just a file name.
      If a FileSpec object is specified, its file name component is used as the file to open. It can also contain a full path with drive and directories, or just a file name.
      With either type of parameter, if only a file name is specified, the DBServer works the same way as the USE command or the DBUseArea() function with regard to default path—it is subject to SET PATH and SET DEFAULT, for example. The extension DBF is assumed by default.
      In either case, after the DBServer object has been successfully created, it contains a FileSpec object with the original file specification.
    </span></param>
      <param name="oFile">
      A String or a FileSpec object with the name of the file to open<br /><span>
      This parameter identifies the DBF file that is to be opened.
      If a string is specified, it corresponds exactly to the file name parameter of the DBUseArea() function; it can contain a full path with drive and directories, or just a file name.
      If a FileSpec object is specified, its file name component is used as the file to open. It can also contain a full path with drive and directories, or just a file name.
      With either type of parameter, if only a file name is specified, the DBServer works the same way as the USE command or the DBUseArea() function with regard to default path—it is subject to SET PATH and SET DEFAULT, for example. The extension DBF is assumed by default.
      In either case, after the DBServer object has been successfully created, it contains a FileSpec object with the original file specification.
    </span></param>
      <param name="lShareMode">Identifies whether the file should be opened in shared mode. Can be specified as a constant, DBSHARED (TRUE) or DBEXCLUSIVE (FALSE). If not specified, the default is determined by the SetExclusive() function, which in turn defaults to 'exclusive' or FALSE.</param>
      <param name="lReadOnlyMode">Identifies whether the file should be opened in read only mode. Can be specified as a constant, DBREADONLY (TRUE) DBREADWRITE (FALSE). If not specified, it defaults to read-write or FALSE.</param>
      <param name="xDriver">The driver can be specified. If not specified, it defaults to the driver specified by RDDSetDefault() which in turn defaults to DBFNTX.</param>
      <param name="aRDD">
      A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
    </param>
      <param name="aParams">Optional array of parameter values</param>
      <returns>
      As with all Init() methods, the instantiation returns the object. An object is created even if the file was not successfully opened, perhaps because the file does not exist, is corrupted or is locked by another user. Thus, before using the DBServer error, verify that it was successfully opened with the DBServer:Used or Status access methods.
    </returns>
    </member>
    <member name="M:VO.AdsSQLServer.Refresh(XSharp.__Usual)">
      <summary>
            Requery the SQL statement
            </summary>
      <param name="aParams">Values for the parameters in the original query</param>
      <returns>TRUE </returns>
    </member>
    <member name="T:VO.DbFileSpec">
      <summary>
      Hold the file name and path for a .DBF file and provide DBF-related functions, such as creating, copying, deleting, moving, and renaming files.
    </summary>
    </member>
    <member name="M:VO.DbFileSpec.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Instantiates a DBFileSpec object and fills its instance variables with DBF information.
    </summary>
      <param name="cFullPath">The drive, path and file name of the DBF file.</param>
      <param name="oFS">The drive, path and file name of the DBF file.</param>
      <param name="cDriver">The RDD used to instantiate the DBFileSpec.</param>
      <param name="_aRDDs">The 1-D array of 'hidden' RDDs required to open a DBF file, such as DBFMEMO.</param>
      <returns>
      A DBFileSpec object.
    </returns>
    </member>
    <member name="M:VO.DbFileSpec.Copy(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Copies all files associated with DBFileSpec objects to a different drive and/or directory.
    </summary>
      <param name="oDBFSTarget">The DBFileSpec object's target directory. Can be either optional or full path.</param>
      <param name="lIDX">Logical parameter. TRUE also moves any index files associated with SELF. The default is TRUE.</param>
      <param name="lName">Logical parameter. TRUE causes an auto-rename of the target file if a file conflict occurs during the copy. The default is FALSE. </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbFileSpec.CopyTo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Copies the DBFileSpec object's DBF file to another data format. This can be used for copying out to another RDD, to a delimited file, or to an SDF file.
    </summary>
      <param name="oFS">The drive and directory into which to copy SELF's files. Can also be an existing DBFileSpec object or FileSpec object.</param>
      <param name="cDriver">The target file's RDD.</param>
      <param name="lWantAnsi">Logical parameter. TRUE creates the target file in ANSI format. The default is the source DBFileSpec's ANSI setting.</param>
      <param name="oFS">The drive and directory into which to copy SELF's files. Can also be an existing DBFileSpec object or FileSpec object.</param>
      <param name="cDriver">The target file's RDD.</param>
      <param name="lWantAnsi">Logical parameter. TRUE creates the target file in ANSI format. The default is the source DBFileSpec's ANSI setting.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbFileSpec.Create(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Create a new DBF file with the given name, using a provided DBStruct array.
    </summary>
      <param name="cFullPath">The file name for the new DBF and optional path or FileSpec object.</param>
      <param name="aDbStruct">The layout of the DBF to be created with each field represented by a subarray containing the field name, the type, the length, the decimals, and the alias in the DBStruct() format if different from SELF's DBF file structure.</param>
      <param name="cDriver">The RDD used to create the new DBF file structure if different from SELF's.</param>
      <param name="lWantAnsi">TRUE if this new DBF is to be an ANSI DBF (default). </param>
      <param name="aRdds">The 1-D array of 'hidden' RDDs required to open a DBF file, such as DBFMEMO. Defaults to SELF's.</param>
      <param name="cFullPath">The file name for the new DBF and optional path or FileSpec object.</param>
      <param name="aDbStruct">The layout of the DBF to be created with each field represented by a subarray containing the field name, the type, the length, the decimals, and the alias in the DBStruct() format if different from SELF's DBF file structure.</param>
      <param name="cDriver">The RDD used to create the new DBF file structure if different from SELF's.</param>
      <param name="lWantAnsi">TRUE if this new DBF is to be an ANSI DBF (default). </param>
      <param name="aRdds">The 1-D array of 'hidden' RDDs required to open a DBF file, such as DBFMEMO. Defaults to SELF's.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbFileSpec.DBFAttr">
      <summary>
      The DBF file attributes returned as a string type.
    </summary>
      <value>The DBF file attributes returned as a string type.</value>
    </member>
    <member name="P:VO.DbFileSpec.DBFDateChanged">
      <summary>
      The DBF file date stamp returned as a date type.
    </summary>
      <value>The DBF file date stamp returned as a date type.</value>
    </member>
    <member name="P:VO.DbFileSpec.DBFName">
      <summary>
      The DBF file name and extension.
    </summary>
      <value>The DBF file name and extension.</value>
    </member>
    <member name="M:VO.DbFileSpec.DBFSGetInfo(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Fills in the DBFileSpec object's instance variables. This method is not required when using the Find() method, which will invoke this method internally if the file is found.
    </summary>
      <param name="xRDDs">The RDD used to open the target file defined in the DBFileSpec object.</param>
      <param name="xRdds">The RDD used to open the target file defined in the DBFileSpec object.</param>
      <param name="aHidden">The 1-D Array of 'hidden' RDDs required for target file defined in the DBFileSpec object.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbFileSpec.DBFSize">
      <summary>
      The DBF file size.
    </summary>
      <value>The DBF file size.</value>
    </member>
    <member name="P:VO.DbFileSpec.DBFTime">
      <summary>
      The DBF file time stamp returned as a string.
    </summary>
      <value>The DBF file time stamp returned as a string.</value>
    </member>
    <member name="P:VO.DbFileSpec.DbStruct">
      <summary>
      An array containing the structure of the DBF file.
    </summary>
      <value>An array containing the structure of the DBF file.</value>
    </member>
    <member name="M:VO.DbFileSpec.Delete">
      <summary>
      Physically deletes all files that are associated with the DBFileSpec object, including memo files and any index files associated with the DBF through OrderSpec objects.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbFileSpec.Delim">
      <summary>
      Access the delimiter used for the CopyTo() method.
    </summary>
      <value>Access the delimiter used for the CopyTo() method.</value>
    </member>
    <member name="P:VO.DbFileSpec.FCount">
      <summary>
      The number of fields in the DBF file.
    </summary>
      <value>The number of fields in the DBF file.</value>
    </member>
    <member name="P:VO.DbFileSpec.Fields">
      <summary>
      The 1-D array of DBF fields to copy out to when using the CopyTo() method.
    </summary>
      <value>The 1-D array of DBF fields to copy out to when using the CopyTo() method.</value>
    </member>
    <member name="P:VO.DbFileSpec.FileName">
      <summary>
      Assign a file name to the DBFileSpec object.
    </summary>
      <value>Assign a file name to the DBFileSpec object.</value>
    </member>
    <member name="M:VO.DbFileSpec.Find">
      <summary>
      Locates the file defined in the DBFileSpec object using the current directory, SetDefault(), or SetPath(). Fills in the instance variables of the DBFileSpec if successful.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbFileSpec.ForBlock">
      <summary>
      The FOR condition code block used for the CopyTo() method.
    </summary>
      <value>The FOR condition code block used for the CopyTo() method.</value>
    </member>
    <member name="P:VO.DbFileSpec.FullPath">
      <summary>
      Assign a full path—including drive, directory, file name, and extension—to the DBFileSpec object.
    </summary>
      <value>Assign a full path—including drive, directory, file name, and extension—to the DBFileSpec object.</value>
    </member>
    <member name="P:VO.DbFileSpec.HeaderSize">
      <summary>
      The size of the DBF file header.
    </summary>
      <value>The size of the DBF file header.</value>
    </member>
    <member name="P:VO.DbFileSpec.HidRDDs">
      <summary>
      The 1-D array of "hidden" RDDs (i.e., DBFMEMO) used for the CopyTo() method.
    </summary>
      <value>The 1-D array of "hidden" RDDs (i.e., DBFMEMO) used for the CopyTo() method.</value>
    </member>
    <member name="P:VO.DbFileSpec.IndexNames">
      <summary>
      The 1-D array of index files with drive, path, file name, and extension information.
    </summary>
      <value>The 1-D array of index files with drive, path, file name, and extension information.</value>
    </member>
    <member name="P:VO.DbFileSpec.IsAnsi">
      <summary>
      The ANSI/OEM setting used in the DBF file header.
    </summary>
      <value>The ANSI/OEM setting used in the DBF file header.</value>
    </member>
    <member name="P:VO.DbFileSpec.LastUpDate">
      <summary>
      The date of the last update made to the DBF file as reported in the DBF header.
    </summary>
      <value>The date of the last update made to the DBF file as reported in the DBF header.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemAttr">
      <summary>
      The memo file attributes.
    </summary>
      <value>The memo file attributes.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemBlockSize">
      <summary>
      The memo block size used in the memo file.
    </summary>
      <value>The memo block size used in the memo file.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemDateChanged">
      <summary>
      The memo file date stamp returned as a date type.
    </summary>
      <value>The memo file date stamp returned as a date type.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemFileExt">
      <summary>
      The memo file name extension excluding the file name.
    </summary>
      <value>The memo file name extension excluding the file name.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemFileName">
      <summary>
      The base memo file name excluding the file name extension.
    </summary>
      <value>The base memo file name excluding the file name extension.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemFullPath">
      <summary>
      The full path of the memo file, including drive, directory, file name, and extension.
    </summary>
      <value>The full path of the memo file, including drive, directory, file name, and extension.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemName">
      <summary>
      The memo file name and extension.
    </summary>
      <value>The memo file name and extension.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemSize">
      <summary>
      The memo file size.
    </summary>
      <value>The memo file size.</value>
    </member>
    <member name="P:VO.DbFileSpec.MemTime">
      <summary>
      The memo file time stamp returned as a string.
    </summary>
      <value>The memo file time stamp returned as a string.</value>
    </member>
    <member name="M:VO.DbFileSpec.Move(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Moves and/or renames all files associated with DBFileSpec objects to a different drive and/or directory. Updates DBFileSpec and/or OrderSpec instance variables. Will also rename auto-open index files. Only DBF, MEMO and auto-open index files will get renamed.
    </summary>
      <param name="oDBFSTarget">The drive and directory to move SELF's files into. Can also be an existing DBFileSpec object.</param>
      <param name="lIDX">Logical parameter. TRUE also moves any index files associated with SELF. The default is TRUE.</param>
      <param name="lName">Logical parameter. TRUE causes an auto-rename of the target file if a file conflict occurs during the move. The default is FALSE. </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbFileSpec.Orders">
      <summary>
      The 1-D array of OrderSpec objects that are associated with this DBFileSpec object.
    </summary>
      <value>The 1-D array of OrderSpec objects that are associated with this DBFileSpec object.</value>
    </member>
    <member name="P:VO.DbFileSpec.RDD_Name">
      <summary>
      The name of the RDD used for instantiation.
    </summary>
      <value>The name of the RDD used for instantiation.</value>
    </member>
    <member name="P:VO.DbFileSpec.RDD_Version">
      <summary>
      The version number of the RDD.
    </summary>
      <value>The version number of the RDD.</value>
    </member>
    <member name="P:VO.DbFileSpec.RDDs">
      <summary>
      An array of "hidden" RDDs (such as DBFMEMO) used for instantiation.
    </summary>
      <value>An array of "hidden" RDDs (such as DBFMEMO) used for instantiation.</value>
    </member>
    <member name="P:VO.DbFileSpec.RecCount">
      <summary>
      The number of records in the DBF. (Note that "LastRec" is not available in this class, only in the dbServer class)
    </summary>
      <value>The number of records in the DBF. (Note that "LastRec" is not available in this class, only in the dbServer class)</value>
    </member>
    <member name="P:VO.DbFileSpec.Recno">
      <summary>
      The record number for the CopyTo() method when a single record is required.
    </summary>
      <value>The record number for the CopyTo() method when a single record is required.</value>
    </member>
    <member name="P:VO.DbFileSpec.Records">
      <summary>
      The number of records for the CopyTo() method.
    </summary>
      <value>The number of records for the CopyTo() method.</value>
    </member>
    <member name="P:VO.DbFileSpec.RecSize">
      <summary>
      The record size of the DBF.
    </summary>
      <value>The record size of the DBF.</value>
    </member>
    <member name="M:VO.DbFileSpec.Rename(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Renames files associated with DBFileSpec object. Only DBF/MEMO and auto-open index files will get renamed.
      Rename() will not rename a file if it is already open or there is a file name conflict.
      To rename files to another directory, use the Move() method and supply a different target file name.
    </summary>
      <param name="oDBFSNewName">The new name for the DBF file.</param>
      <param name="lName">Logical parameter. TRUE causes an auto-rename of the target file if a file conflict occurs during the move. The default is FALSE. </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbFileSpec.Rest">
      <summary>
      A logical determining if the CopyTo() method is to copy all records or the current record to EOF.
    </summary>
      <value>A logical determining if the CopyTo() method is to copy all records or the current record to EOF.</value>
    </member>
    <member name="P:VO.DbFileSpec.RLockCount">
      <summary>
      The number of locked records in the DBF.
    </summary>
      <value>The number of locked records in the DBF.</value>
    </member>
    <member name="P:VO.DbFileSpec.SDF">
      <summary>
      A logical determining if the CopyTo() method is to copy out to an SDF file.
    </summary>
      <value>A logical determining if the CopyTo() method is to copy out to an SDF file.</value>
    </member>
    <member name="P:VO.DbFileSpec.WhileBlock">
      <summary>
      A WHILE condition code block used with the CopyTo() method.
    </summary>
      <value>A WHILE condition code block used with the CopyTo() method.</value>
    </member>
    <member name="T:VO.DbServer">
      <summary>
      Create a data server that can operate with existing .DBF database files and their associated index files.
    </summary>
    </member>
    <member name="M:VO.DbServer.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Construct a server object.
    </summary>
      <param name="cFile">
      The name of the file to open<br /><span>
      This parameter identifies the DBF file that is to be opened.
      If a string is specified, it corresponds exactly to the file name parameter of the DBUseArea() function; it can contain a full path with drive and directories, or just a file name.
      If a FileSpec object is specified, its file name component is used as the file to open. It can also contain a full path with drive and directories, or just a file name.
      With either type of parameter, if only a file name is specified, the DBServer works the same way as the USE command or the DBUseArea() function with regard to default path—it is subject to SET PATH and SET DEFAULT, for example. The extension DBF is assumed by default.
      In either case, after the DBServer object has been successfully created, it contains a FileSpec object with the original file specification.
    </span></param>
      <param name="oFS">
      A FileSpec object with the name of the file to open<br /><span>
      This parameter identifies the DBF file that is to be opened.
      If a string is specified, it corresponds exactly to the file name parameter of the DBUseArea() function; it can contain a full path with drive and directories, or just a file name.
      If a FileSpec object is specified, its file name component is used as the file to open. It can also contain a full path with drive and directories, or just a file name.
      With either type of parameter, if only a file name is specified, the DBServer works the same way as the USE command or the DBUseArea() function with regard to default path—it is subject to SET PATH and SET DEFAULT, for example. The extension DBF is assumed by default.
      In either case, after the DBServer object has been successfully created, it contains a FileSpec object with the original file specification.
    </span></param>
      <param name="oFile">
      A String or a FileSpec object with the name of the file to open<br /><span>
      This parameter identifies the DBF file that is to be opened.
      If a string is specified, it corresponds exactly to the file name parameter of the DBUseArea() function; it can contain a full path with drive and directories, or just a file name.
      If a FileSpec object is specified, its file name component is used as the file to open. It can also contain a full path with drive and directories, or just a file name.
      With either type of parameter, if only a file name is specified, the DBServer works the same way as the USE command or the DBUseArea() function with regard to default path—it is subject to SET PATH and SET DEFAULT, for example. The extension DBF is assumed by default.
      In either case, after the DBServer object has been successfully created, it contains a FileSpec object with the original file specification.
    </span></param>
      <param name="lShareMode">Identifies whether the file should be opened in shared mode. Can be specified as a constant, DBSHARED (TRUE) or DBEXCLUSIVE (FALSE). If not specified, the default is determined by the SetExclusive() function, which in turn defaults to 'exclusive' or FALSE.</param>
      <param name="lReadOnlyMode">Identifies whether the file should be opened in read only mode. Can be specified as a constant, DBREADONLY (TRUE) DBREADWRITE (FALSE). If not specified, it defaults to read-write or FALSE.</param>
      <param name="xDriver">The driver can be specified. If not specified, it defaults to the driver specified by RDDSetDefault() which in turn defaults to DBFNTX.</param>
      <param name="aRDD">
      A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
    </param>
      <param name="aParams">Optional array of parameter values</param>
      <returns>
      As with all Init() methods, the instantiation returns the object. An object is created even if the file was not successfully opened, perhaps because the file does not exist, is corrupted or is locked by another user. Thus, before using the DBServer error, verify that it was successfully opened with the DBServer:Used or Status access methods.
    </returns>
    </member>
    <member name="P:VO.DbServer.Alias">
      <summary>
      A string representing the alias of the work area.
    </summary>
      <value>A string representing the alias of the work area.</value>
    </member>
    <member name="P:VO.DbServer.AliasSym">
      <summary>
      A symbol representing the alias of a DBServer object.
    </summary>
      <value>A symbol representing the alias of a DBServer object.</value>
    </member>
    <member name="M:VO.DbServer.Append(XSharp.__Usual)">
      <summary>
      Append a blank record to the table; this blank record becomes the current position and is ready for assignment of data values. The record is automatically locked if the Append() method returns TRUE.
    </summary>
      <param name="lReleaseLocks">Indicates if existing record locks should be released.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.AppendDB(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Append new records to the table from another DBF file.
    </summary>
      <param name="oFSSource">
      A string or filespec object that specifies the source file, which is opened in shared, read-only mode, and can be open elsewhere in this or some other application.
      This function attempts to open <paramref name="oFSSource" /> in shared mode. If the file does not exist, a runtime error is raised. If the file is successfully opened, the operation proceeds. Refer to the 'Concurrency Control' chapter in the Programmer's Guide for more information on resolving concurrency conflicts.
    </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.AppendDelimited(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Append new records to the table from a delimited file, such as the "comma-separated-value" (CSV) file format.
    </summary>
      <param name="oFSSource">
      A string or filespec object that specifies the source file containing the records to be appended.
      The source file is opened in shared, read-only mode, and can be open elsewhere in this or some other application.
    </param>
      <param name="cDelimiter">The delimiter for fields within a delimited database file. If omitted, the default is NULL_STRING.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.AppendSDF(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Append new records to the table from an SDF-formatted file.
    </summary>
      <param name="oFSSource">
      A string or filespec object that specifies the source file containing the records to be appended.
      The source file is opened in shared, read-only mode, and can be open elsewhere in this or some other application.
    </param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.Average(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Calculate the average of a series of numeric expressions, based on the number of actual records involved.
    </summary>
      <param name="acbExpression">The single expression to be averaged or the array of expressions to be averaged.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      An array that contains the averages for each field or expression specified. If a single expression was specified, an array length of 1 is returned.
    </returns>
    </member>
    <member name="M:VO.DbServer.BLOBDirectExport(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Export the contents of a binary large object (BLOB) pointer to a file.
    </summary>
      <param name="nPointer">
      A pointer to the BLOB data. This pointer can be obtained using DBServer:BLOBDirectPut(), DBServer:BLOBDirectExport(), or DBServer:FieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).
    </param>
      <param name="oFSTarget">
      A string or filespec object that specifies the name of the target file where the BLOB data will be written, including an optional drive, directory, and extension. See SetDefault() and SetPath() for file searching and creation rules. No default extension is assumed.
      If <paramref name="oFSTarget" />  does not exist, it is created. If it exists, this method attempts to open the file in exclusive mode and, if successful, the file is written to without warning or error. If access is denied because, for example, another process is using the file, NetErr() is set to TRUE and the data server's Status property is set.
    </param>
      <param name="cTarget">
      The name of the target file where the BLOB data will be written, including an optional drive, directory, and extension. See SetDefault() and SetPath() for file searching and creation rules. No default extension is assumed.
      If <paramref name="cTarget" /> does not exist, it is created. If it exists, this method attempts to open the file in exclusive mode and, if successful, the file is written to without warning or error. If access is denied because, for example, another process is using the file, NetErr() is set to TRUE and the data server's Status property is set.
    </param>
      <param name="kMode">
      A constant defining the copy mode, as shown in the table below:
      <list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>
            BLOB_EXPORT_APPEND
          </term><description>Appends to the file</description></item><item><term>
            BLOB_EXPORT_OVERWRITE
          </term><description>Overwrites the file—this is the default</description></item></list></param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.BLOBDirectGet(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Retrieve data stored in a BLOB file without referencing a specific field.
    </summary>
      <param name="nPointer">
      A pointer to the BLOB data. This pointer can be obtained using DBServer:BLOBDirectPut(), DBServer:BLOBDirectImport(), or DBServer:FieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />).
    </param>
      <param name="nStart">
      The starting position in <paramref name="nPointer" />. If <paramref name="nStart" /> is positive, the starting position is relative to the leftmost character in <paramref name="nPointer" />. If <paramref name="nStart" /> is negative, it is relative to the rightmost character in <paramref name="nPointer" />. If <paramref name="nStart" /> is omitted, it is assumed to be 1.
    </param>
      <param name="nCount">
      The number of bytes of data to retrieve, beginning at <paramref name="nStart" />. If <paramref name="nCount" /> is larger than the amount of data stored, excess data is ignored. If omitted, DBServer:BLOBDirectGet() retrieves to the end of the data.
    </param>
      <returns>
      The data retrieved from the BLOB file. The data type of the return value depends on the actual data stored. Use ValType() or UsualType() to determine the data type.
    </returns>
    </member>
    <member name="M:VO.DbServer.BLOBDirectImport(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Import a file into a BLOB file and return a pointer to the data.
    </summary>
      <param name="nPointer">
      A pointer to the BLOB data which will be released after the import. This pointer can be obtained using DBServer:BLOBDirectPut(), DBServer:BLOBDirectImport(), or DBServer:FieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />). Passing 0 disables the release of data.
      <br />Important! If specified, DBServer:BLOBDirectImport() releases the space associated with <paramref name="nOldPointer" /> for reuse by other data. Therefore, it is illegal to use <paramref name="nOldPointer" /> with any of the BLOB methods after passing it as an argument to this method. Use the method's return value to refer to the newly stored data.
    </param>
      <param name="cSource">
      The name of the file from which to read the BLOB data, including an optional drive, directory, and extension.
      See SetDefault() and SetPath() for file searching and creation rules. No default extension is assumed.
    </param>
      <param name="oFSSource">
      A string or filespec object that specifies the name of the file from which to read the BLOB data, including an optional drive, directory, and extension.
      See SetDefault() and SetPath() for file searching and creation rules. No default extension is assumed.
    </param>
      <returns>
      A numeric pointer to the BLOB image stored in the source file.
    </returns>
    </member>
    <member name="M:VO.DbServer.BLOBDirectPut(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Put data in a BLOB file without referencing a specific field.
    </summary>
      <param name="nPointer">
      A reference to previously stored BLOB data. This reference can be obtained using DBServer:BLOBDirectPut(), DBServer:BLOBDirectImport(), or DBServer:FieldInfo(DBS_BLOB_POINTER, <paramref name="nFieldPos" />). If other than 0, the data referenced by <paramref name="nOldPointer" /> is replaced by <paramref name="uBLOB" />; otherwise, <paramref name="uBLOB" /> is added to the current contents of the BLOB file.
      <br />Important! If specified, DBServer:BLOBDirectPut() releases the space associated with <paramref name="nOldPointer" /> for reuse by other data. Therefore, it is illegal to use <paramref name="nOldPointer" /> with any of the BLOB methods after passing it as an argument to this method. Use the method's return value to refer to the newly stored data.
    </param>
      <param name="uBlob">
      The data you want to put into the BLOB file. <paramref name="uBLOB" /> can be any X# usual data type, except code block and object.
    </param>
      <returns>
      A numeric pointer to the <paramref name="uBLOB" /> data.
    </returns>
    </member>
    <member name="M:VO.DbServer.BLOBExport(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Copy the contents of a BLOB, identified by its memo field number, to a file.
    </summary>
      <param name="uField">The name, number, or symbol representing the position of the field in the database file structure.</param>
      <param name="cTarget">The file to which the records is copied.</param>
      <param name="oFSTarget">
      A string or filespec object that specifies the name of the target file where the BLOB data will be written, including an optional drive, directory, and extension.
      See SetDefault() and SetPath() for file searching and creation rules. No default extension is assumed.
      If <paramref name="oFSTarget" /> does not exist, it is created. If it exists, this method attempts to
      open the file in exclusive mode and, if successful, the file is written to without warning or error. If access is denied because,
      for example, another process is using the file, NetErr() is set to TRUE and the data server's Status property is set.
    </param>
      <param name="kMode">
      A constant defining the copy mode, as shown in the table below:
      <list type="table"><listheader><term>Constant</term><description>Description</description></listheader><item><term>
            BLOB_EXPORT_APPEND
          </term><description>Appends to the file</description></item><item><term>
            BLOB_EXPORT_OVERWRITE
          </term><description>Overwrites the file—this is the default</description></item></list></param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.BLOBGet(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Get the contents of a BLOB, identified by its memo field number.
    </summary>
      <param name="uField">The name, number, or symbol representing the position of the field in the database file structure.</param>
      <param name="nStart">
      The starting position in the memo field of the BLOB data. If <paramref name="nStart" /> is positive, the starting position is relative to the leftmost character in <paramref name="uFieldPos" />. If <paramref name="nStart" /> is negative, it is relative to the rightmost character in <paramref name="uFieldPos" />. If <paramref name="nStart" /> is omitted, it is assumed to be 1.
    </param>
      <param name="nCount">
      The number of bytes of data to retrieve, beginning at <paramref name="nStart" />. If <paramref name="nCount" /> is larger than the amount of data stored, excess data is ignored. If omitted, DBServer:BLOBGet() retrieves to the end of the data.
    </param>
      <returns>
      The BLOB data retrieved from the memo field. The data type of the return value depends on the actual data stored. Use ValType() or UsualType() to determine the data type. If the indicated field is not a memo field, DBServer:BLOBGet() returns NIL.
    </returns>
    </member>
    <member name="M:VO.DbServer.BLOBImport(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Read the contents of a file as a BLOB, identified by a memo field number.
    </summary>
      <param name="uField">The name, number, or symbol representing the position of the field in the database file structure.</param>
      <param name="oFSSource">
      A string or filespec object that specifies the name of the file from which to read the BLOB data, including an optional drive, directory, and extension. See SetDefault() and SetPath() for file searching and creation rules. No default extension is assumed.
    </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.BLOBRootGet">
      <summary>
      Retrieve the data from the root area of a BLOB file.
    </summary>
      <returns>
      The data retrieved from the root of the BLOB file. The data type of the return value depends on the actual data stored. Use ValType() or UsualType() to determine the data type. Note that DBServer:BLOBRootGet() returns NIL if the root reference has never been written to with DBServer:BLOBRootPut().
    </returns>
    </member>
    <member name="M:VO.DbServer.BLOBRootLock">
      <summary>
      Obtain a lock on the root area of a BLOB file.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.BLOBRootPut(XSharp.__Usual)">
      <summary>
      Store data in the root area of a BLOB file.
    </summary>
      <param name="uBlob">
      The data you want to put into the BLOB file's root area. <paramref name="uBLOB" /> can be any X# usual data type, except code block and object.
    </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.BLOBRootUnlock">
      <summary>
      Release the lock on a BLOB file's root area.
    </summary>
    </member>
    <member name="P:VO.DbServer.BoF">
      <summary>
      A logical value indicating whether the server is positioned at the beginning of the file, on the first record.
    </summary>
      <value>A logical value indicating whether the server is positioned at the beginning of the file, on the first record.</value>
    </member>
    <member name="M:VO.DbServer.ClearFilter">
      <summary>
      Clear a filter condition specified with the DBServer:SetFilter() method.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.ClearIndex(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Clear all indexes currently associated with the server.
    </summary>
      <param name="uOrder">The name of an order, or the ordinal position of the order within the order list. A value of 0 specifies the controlling index, without regard to its actual position in the list.</param>
      <param name="cOrdBag">The name of the orderbag in which the order resides. </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.ClearLocate">
      <summary>
      Clear the LOCATE condition of the server, if any.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.ClearOrderScope">
      <summary>
      Set or clear the boundaries for scoping key values in the controlling order.
    </summary>
    </member>
    <member name="M:VO.DbServer.ClearRelation">
      <summary>
      Clear all active relations held by this server to other servers.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.ClearScope">
      <summary>
      Clear the settings that define the default scope for multi-record operations.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Close">
      <summary>
      Close the database file and its associated index files.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Commit">
      <summary>
      Commit all changes to disk from the buffer, ensuring that all buffers are flushed.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.ConcurrencyControl">
      <summary>
      A constant, identifying the mode of automatic concurrency control for this data server, determining when and how records are locked and released:
    </summary>
      <value>A constant, identifying the mode of automatic concurrency control for this data server, determining when and how records are locked and released:</value>
    </member>
    <member name="M:VO.DbServer.ConstructUniqueAlias(XSharp.__Usual)">
      <summary>Create a unique alias based on the filename and an optional numeric suffix</summary>
      <param name="cFileName">The filename to base the alias on.</param>
    </member>
    <member name="M:VO.DbServer.Continue">
      <summary>
      Resume a pending DBServer:Locate() operation, searching for the next record that matches (like the DBContinue() function).
    </summary>
      <returns>
      TRUE if successful; otherwise, FALSE. After the operation, the DBServer:Found access can be used to determine if a record was found.
    </returns>
    </member>
    <member name="M:VO.DbServer.CopyDB(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Copy records to another DBF file.
    </summary>
      <param name="oFSTarget">A string or filespec object that specifies the file to which the records is copied. This file is opened exclusively during the operation, so it should not be open elsewhere with write capability.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.CopyDelimited(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Copy records to a delimited file.
    </summary>
      <param name="oFSTarget">A string or filespec object that specifies the file to which the records is copied.</param>
      <param name="cDelimiter">The delimiter for fields within a delimited database file. If omitted, the default is NULL_STRING.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.CopySDF(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Copy records to an SDF file.
    </summary>
      <param name="oFSTarget">A string or filespec object that specifies the file to which the records is copied.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.CopyStructure(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Create a DBF file with the same record layout as the server object to which the message is sent.
    </summary>
      <param name="cFileName">The file to which the record is copied.</param>
      <param name="oFSTarget">A filespec object that specifies the file to which the record is copied.</param>
      <param name="aFieldList">An array of fields that are to be included in the records to be copied.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Count(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return the number of records that match a specified scope.
    </summary>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      The number of records that match the scope.
    </returns>
    </member>
    <member name="M:VO.DbServer.CreateIndex(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Create an index file with an order in it.
    </summary>
      <param name="oFSIndex">A string or filespec object that specifies the name of the index file to be created.</param>
      <param name="cExpr">The indexing expression.</param>
      <param name="cbExpr">The indexing expression. If a code block is provided, it should match the string expression; if a code block is not provided, one is created from the string expression.</param>
      <param name="lUnique">Whether the index is unique. If not specified, the default is determined by SetUnique().</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.CreateOrder(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Create an order within an existing index file. The behavior depends on which driver is used.
    </summary>
      <param name="cOrderName">The order name to be used.</param>
      <param name="cIndexFileName">The name of the index file.</param>
      <param name="cExpr">The indexing expression.</param>
      <param name="cbExpr">The indexing expression. If a code block is provided, it should match the string expression; if a code block is not provided, one is created from the string expression.</param>
      <param name="lUnique">Whether the index is unique. If not specified, the default is determined by SetUnique().</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.DataField(XSharp.__Usual)">
      <summary>
      Retrieve the data field object at the specified field position.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
    </member>
    <member name="P:VO.DbServer.DBStruct">
      <summary>
      An array containing the structure of this data server, whose length (that is, number of elements) is equal to the number of fields in the server.
    </summary>
      <value>An array containing the structure of this data server, whose length (that is, number of elements) is equal to the number of fields in the server.</value>
    </member>
    <member name="P:VO.DbServer.DbStructure">
      <summary>Return the original dbstructure array from the DbServer object.</summary>
      <value>The original dbstructure array from the DbServer object.</value>
    </member>
    <member name="M:VO.DbServer.Delete(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Delete the current record or the records specified with the scoping parameters.
    </summary>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.DeleteAll">
      <summary>
      Delete all records of the table.
    </summary>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.Deleted">
      <summary>
      A logical value indicating whether the current record is marked as deleted.
    </summary>
      <value>A logical value indicating whether the current record is marked as deleted.</value>
    </member>
    <member name="M:VO.DbServer.DeleteOrder(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Delete an order from an index file.
    </summary>
      <param name="uOrder">The name or number of the order to be deleted.</param>
      <param name="cIndexFileName">The index file does not have to be specified if the order name specified is unique among all the opened orders, or if an order number is used. But if a non-unique order name is specified, the index file should also be specified.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.Driver">
      <summary>
      A string representing the name of the database driver in use with this server.
    </summary>
      <value>A string representing the name of the database driver in use with this server.</value>
    </member>
    <member name="P:VO.DbServer.EoF">
      <summary>
      A logical value indicating whether the server is positioned at the end of the file, on the last record
    </summary>
      <value>A logical value indicating whether the server is positioned at the end of the file, on the last record</value>
    </member>
    <member name="P:VO.DbServer.ErrInfo">
      <summary>
      An Error object identifying the error condition after the last operation.
    </summary>
      <value>An Error object identifying the error condition after the last operation.</value>
    </member>
    <member name="M:VO.DbServer.Error(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Provide a method for handling error conditions raised during database processing.
    </summary>
      <param name="oError">An Error object describing the error condition.</param>
      <param name="symMethod">The symbolic name of the method that originated the error.</param>
    </member>
    <member name="P:VO.DbServer.ErrorInfo">
      <summary>Returns the internal ErrorInfo object, regardless of the last operation produced an error or not.</summary>
      <value>The internal ErrorInfo object, regardless of the last operation produced an error or not.</value>
    </member>
    <member name="M:VO.DbServer.Eval(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Evaluate a code block for each record matching a scope and condition. If neither conditions nor scope is passed to the method, it is subject to the general server scope.
    </summary>
      <param name="cbBlock">The code block to execute for each record processed.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.FCount">
      <summary>
      The number of fields in the server.
    </summary>
      <value>The number of fields in the server.</value>
    </member>
    <member name="P:VO.DbServer.FieldDesc">
      <summary>This returns an empty array. For servers that were painted in the DbServer editor this returns the array of DataFields.</summary>
      <value>An empty array. For servers that were painted in the DbServer editor this returns the array of DataFields.</value>
    </member>
    <member name="M:VO.DbServer.FIELDGET(XSharp.__Usual)">
      <summary>
      Get the contents of a field that is identified by its position.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
      <returns>
      The value of the specified field. If <paramref name="nFieldPos" /> does not correspond to the position of any field in the current data server, DBServer:FieldGet() returns NIL.
    </returns>
    </member>
    <member name="M:VO.DbServer.FieldGetBytes(XSharp.__Usual)">
      <summary>
      Read an array of bytes direct from the workarea buffer.
    </summary>
      <param name="uField">
      The position of the field in the database file structure for the current work area.
    </param>
      <returns>
      The value of the field.   IF nFieldPos does not correspond to the position of any field in the database file, FieldGetBytes() will generate an error.
    </returns>
    </member>
    <member name="M:VO.DbServer.FieldGetFormatted(XSharp.__Usual)">
      <summary>
      Return the contents of a specified field according to the formatting specifications of its FieldSpec object.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
    </member>
    <member name="M:VO.DbServer.FieldHyperLabel(XSharp.__Usual)">
      <summary>
      Return the hyperlabel of a specified field.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
      <returns>
      The field hyperlabel or NIL.
    </returns>
    </member>
    <member name="M:VO.DbServer.FieldInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return and optionally change information about a field.
    </summary>
      <param name="kFieldInfoType">
      Specifies the type of information. The constants are described in the Constants section below. Note, however, that not all constants are supported for all RDDs.
      <br />Important! DBS_USER is a constant that returns the minimum value that third-party RDD developers can use for defining new <paramref name="kInfoType" /> parameters.
      Values less than DBS_USER are reserved for development.
    </param>
      <param name="uField">
      The name, number, or symbol representing the position of the field in the database file structure or a numeric pointer to a BLOB.
      Only certain <paramref name="kFieldInfoType" /> constants designed to work with BLOB fields—all noted in the Constants section below—allow specifying the
      field using a pointer; all others require specifying the field by its position.
    </param>
      <param name="uFieldVal">
      If specified, this parameter is used to change the value of a setting. The data type (and whether <paramref name="uNewSetting" /> can be specified), depends on the <paramref name="kInfoType" /> constant and is documented in the Constants section below.
    </param>
      <returns>
      If <paramref name="uNewSetting" /> is not specified, DBServer:FieldInfo() returns the current setting. If <paramref name="uNewSetting" /> is specified, the previous setting is returned.
    </returns>
    </member>
    <member name="M:VO.DbServer.FieldName(XSharp.__Usual)">
      <summary>
      Return the name of a specified field as a string.
    </summary>
      <param name="nFieldPosition">The number of the field referenced.</param>
    </member>
    <member name="M:VO.DbServer.FieldPos(XSharp.__Usual)">
      <summary>
      Return the position of a specified field within the data server, as a number starting with 1.
    </summary>
      <param name="cFieldName">The name or symbol of the desired field.</param>
      <returns>
      The field position in the dbServer structure, or zero if not found.

      FieldPos() Function
    </returns>
    </member>
    <member name="M:VO.DbServer.FIELDPUT(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Set the value of a field identified by its position.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
      <param name="uValue">The value to assign to the field. The data type of this expression must match the data type of the field.</param>
      <returns>
      The value assigned to the field. If <paramref name="nFieldPos" /> does not correspond to the position of any field in the data server, DBServer:FieldPut() returns NIL.
    </returns>
    </member>
    <member name="M:VO.DbServer.FieldPutBytes(XSharp.__Usual,System.Byte[])">
      <summary>Write an array of bytes direct to the workarea buffer.</summary>
      <param name="uField">The position of the field in the database file structure.</param>
      <param name="bValue">The value to write to the field</param>
    </member>
    <member name="M:VO.DbServer.FieldSpec(XSharp.__Usual)">
      <summary>
      Return the FieldSpec object in the specified field.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
    </member>
    <member name="M:VO.DbServer.FieldStatus(XSharp.__Usual)">
      <summary>
      Return the status of a field after the last operation.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
      <returns>
      A HyperLabel object if any error condition had occurred or if a validation has failed, NIL if everything is OK, if the validation passed, or if there has been no validation attempt.
    </returns>
    </member>
    <member name="M:VO.DbServer.FieldSym(XSharp.__Usual)">
      <summary>
      Return the name of a specified field.
    </summary>
      <param name="uField">The number of the desired field.</param>
    </member>
    <member name="M:VO.DbServer.FieldValidate(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Perform all the validations defined to the FieldSpec object of a field (for example, required, maximum and minimum digits, maximum and minimum value, validation rule) and return the result of the test.
    </summary>
      <param name="uField">The name, number, or symbol representing the desired field.</param>
      <param name="uValue">
      The value that is to be validated. Its data type should be compatible with the data type of the specified field. If the type cannot be converted to the appropriate data type, it is considered to have failed validation.
      See the Programmer's Guide for the rules on data type conversion; in general, any kind of conversion that is reasonable is done, including converting strings like 'TRUE' and 'T' to the logical value TRUE.
    </param>
      <returns>
      FALSE if any of the validations fail; otherwise, TRUE.
    </returns>
    </member>
    <member name="P:VO.DbServer.FileSpec">
      <summary>
      The FileSpec object that defines the path and file name of the DBF file.
    </summary>
      <value>The FileSpec object that defines the path and file name of the DBF file.</value>
    </member>
    <member name="P:VO.DbServer.Filter">
      <summary>
      A string representing the current active filter.
    </summary>
      <value>A string representing the current active filter.</value>
    </member>
    <member name="M:VO.DbServer.FLOCK">
      <summary>
      Lock the table used by this server for exclusive access.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.ForBlock">
      <summary>
      The "FOR block" component of the "general server scope," which affects several bulk processing methods if they are called with no explicit scope.
    </summary>
      <value>The "FOR block" component of the "general server scope," which affects several bulk processing methods if they are called with no explicit scope.</value>
    </member>
    <member name="P:VO.DbServer.Found">
      <summary>
      A logical value indicating whether the previous search operation succeeded.
    </summary>
      <value>A logical value indicating whether the previous search operation succeeded.</value>
    </member>
    <member name="M:VO.DbServer.GetArray(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Retrieve an array of values from a field in the server, subject to the currently active selection, if any.
    </summary>
      <param name="nMaxRows">The maximum number of rows that should be retrieved. If omitted, a maximum of 100 rows are retrieved.</param>
      <param name="uField1">The name, number, or symbol representing the field to be retrieved. If omitted, the first field is retrieved.</param>
      <param name="uSearchValue">The value to be searched for, under the currently controlling order. The system performs a Seek() operation, and then proceeds to load up the array from there.</param>
      <returns>
      An array of values found for the specified field, moving sequentially until the specified maximum number of rows or until end of file. If a selection is active, the method includes only records from that selection. The values are retrieved under the current controlling order, if any.
      Note that the method does not reposition to the beginning before starting to fill the array. Either provide a start value, or explicitly position the server before using the method. (This allows incremental reading, building up an array in pieces.)
    </returns>
    </member>
    <member name="M:VO.DbServer.GetLocate">
      <summary>
      Retrieve the code block of the current LOCATE condition, or NIL if no code block is set.
    </summary>
    </member>
    <member name="M:VO.DbServer.GetLookupTable(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Retrieve a two-column array of values from two fields in the server, subject to the currently active selection, if any.
    </summary>
      <param name="nMaxRows">The maximum number of rows that should be retrieved. If omitted, 100 rows at most are retrieved.</param>
      <param name="uField1">The name, number, or symbol of the first field to be retrieved. If omitted, the first field is retrieved.</param>
      <param name="uField2">The name, number, or symbol of the second field to be retrieved. If omitted, the second field is retrieved.</param>
      <param name="uSearchValue">The value to be searched for, under the currently controlling order. The system performs a Seek() operation, and then proceeds to load up the array from there.</param>
      <returns>
      The method returns a two-column array of values found for the specified fields, moving sequentially until the specified maximum number of rows or until end of file. If a selection is active, the method includes only records from that selection. The values are retrieved under the current controlling order, if any.
      Note that the method does not reposition to the beginning before starting to fill the array. Either provide a start value, or explicitly position the server before using the method. (This allows incremental reading, building up an array in pieces.)
    </returns>
    </member>
    <member name="M:VO.DbServer.GoBottom">
      <summary>
      Position the data server at the last record.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.GoTo(XSharp.__Usual)">
      <summary>
      Position the data server at a specified record number.
    </summary>
      <param name="nRecordNumber">The record number at which the server should be positioned.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.GoTop">
      <summary>
      Position the data server at the first record.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.Header">
      <summary>
      A numeric value representing the length of the database file header.
    </summary>
      <value>A numeric value representing the length of the database file header.</value>
    </member>
    <member name="P:VO.DbServer.IndexExt">
      <summary>
      A string representing the default index extension based on the database driver currently linked (for example, ".NTX" for the DBFNTX driver).
    </summary>
      <value>A string representing the default index extension based on the database driver currently linked (for example, ".NTX" for the DBFNTX driver).</value>
    </member>
    <member name="M:VO.DbServer.INDEXKEY(XSharp.__Usual)">
      <summary>
      Return the key expression of a specified single-order index.
    </summary>
      <param name="uOrder">The name of an order, or the ordinal position of the order within the order list. A value of 0 specifies the controlling index, without regard to its actual position in the list.</param>
      <returns>
      The key expression of the specified index as a string; if there is no corresponding order or the order name is not unique, the method returns a NULL_STRING.
    </returns>
    </member>
    <member name="P:VO.DbServer.IndexList">
      <summary>This returns an empty array. For servers that were painted in the DbServer editor this returns the array of Indexes.</summary>
      <value>An empty array. For servers that were painted in the DbServer editor this returns the array of Indexes.</value>
    </member>
    <member name="M:VO.DbServer.INDEXORD">
      <summary>
      Return the ordinal position of the controlling order in the order list. (Similar to the IndexOrd() function.)
    </summary>
      <returns>
      An integer numeric value. The value returned is equal to the position of the controlling index in the list of open indexes for the current work area. A value of 0 indicates that there is no controlling index and records are being accessed in natural order.
    </returns>
    </member>
    <member name="M:VO.DbServer.Info(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return and optionally change information about a data server.
    </summary>
      <param name="kInfoType">
      Specifies the type of information.
      <span>
            The constants are described in the Constants section below. <br />
            The initial default of a setting depends on the RDD.<br />
            The constants are described in the Constants section below.  Note, however, that not all constants are supported for all RDDs.<br />
            Important!  _SET_USER is a constant that returns the minimum value that third-party RDD developers 
            can use for defining new parameters.
            Values less than _SET_USER are reserved for X# development.
        </span></param>
      <param name="uInfo">
      If specified, this parameter is used to change the value of a setting. The data type (and whether <paramref name="uInfo" /> can be specified), depends on the <paramref name="kInfoType" /> constant and is documented in the Constants section below.
    </param>
      <returns>
      If <paramref name="uInfo" /> is not specified, DBServer:RDDInfo() returns the current setting. If <paramref name="uInfo" /> is specified, the previous setting is returned.
    </returns>
    </member>
    <member name="M:VO.DbServer.Join(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Join this DBServer object with another DBServer object and place the results in the file specified.
    </summary>
      <param name="oDBSource">The 'other' DBServer object to which this DBServer object is joined. It can be specified as a DBServer object, or as the alias of a table opened in a work area.</param>
      <param name="oFSTarget">A string or filespec object that specifies the file into which results of the join operation is placed.</param>
      <param name="aFieldList">An array of fields to be included in the join operation.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.LastRec">
      <summary>
      The number of records in the current database file.
    </summary>
      <value>The number of records in the current database file.</value>
    </member>
    <member name="M:VO.DbServer.Locate(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Search sequentially for a record matching a condition. If neither conditions nor scope is passed to the method, it is subject to the general server scope.
    </summary>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if a record was found that matches the conditions, FALSE if no match was found or if the operation failed for some other reason. Afterwards, the Found and Status access methods can be used to determine exactly what happened.
    </returns>
    </member>
    <member name="M:VO.DbServer.LockCurrentRecord">
      <summary>
      Lock the current record. This method is identical to invoking RLock() with the current record number as a parameter.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.LockSelection">
      <summary>
      Lock all the records in the currently active selection.
    </summary>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.Lupdate">
      <summary>
      The last modification date of the DBF file used in the server.
    </summary>
      <value>The last modification date of the DBF file used in the server.</value>
    </member>
    <member name="P:VO.DbServer.MemoExt">
      <summary>This returns the memo extension of the file (if any). For example DBT or FPT.</summary>
      <value>The memo extension of the file (if any).</value>
    </member>
    <member name="P:VO.DbServer.Name">
      <summary>This returns the name of the DbServer.</summary>
      <value>The name of the DbServer</value>
    </member>
    <member name="M:VO.DbServer.NoIVarGet(XSharp.__Usual)">
      <summary>
      Provide a general error interception that is automatically called (in any class) whenever an access reference is made to a non-existent exported instance variable. In the DBServer class, it is used to implement the virtual field variable.
      <br />Important! NoIVarGet() should not be called directly; it is called by the system for handling invalid references.
    </summary>
      <param name="symFieldName">The symbolic name of the variable that was referenced. In the standard usage of the method with the DBServer class, this is a field name.</param>
    </member>
    <member name="M:VO.DbServer.NoIVarPut(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Provide a general error interception that is automatically called (in any class) whenever an assignment reference is made to a non-existent exported instance variable. In the DBServer class, it is used to implement the virtual field variable.
      <br />Important! NoIVarPut() should not be called directly; it is called by the system for handling invalid references.
    </summary>
      <param name="symFieldName">The symbolic name of the variable that was referenced. In the standard usage of the method with the DBServer class, this is a field name.</param>
      <param name="uValue">The value to be assigned to the field. The data type of this value must match the data type of the field.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Notify(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      An event handler that responds to events that have occurred in methods of this server, or in other servers that are linked to this server in some way. The standard implementation notifies all the server's clients of the event.
      <br />Important! This method is automatically called by the various action methods of the data server, and should normally not be called by application code.
    </summary>
      <param name="kNotification">Identifies the event, specified as one of the constants in the table below.</param>
      <param name="uDescription">Used only with some notification types. See descriptions in the table below</param>
      <returns>
      SELF, except if NOTIFYINTENTTOMOVE is specified for <paramref name="kNotifyName" />.
      In this case, the return value is TRUE if successful; otherwise, FALSE.
    </returns>
    </member>
    <member name="P:VO.DbServer.OleExt">
      <summary>This returns the OLE extension of the file (if any). For example DFL.</summary>
      <value>The OLE extension of the file (if any).</value>
    </member>
    <member name="P:VO.DbServer.OrderBottomScope">
      <summary>
      A key value representing the record of the bottom boundary in the range of key values that will be included in the controlling order's current scope.
    </summary>
      <value>A key value representing the record of the bottom boundary in the range of key values that will be included in the controlling order's current scope.</value>
    </member>
    <member name="M:VO.DbServer.OrderDescend(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return and optionally change the descending flag of an order.
    </summary>
      <param name="uOrder">
      The name of the order or a number representing its position in the order list. Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files. If omitted or NIL, the controlling order is assumed.
      Specifying an invalid value will raise a runtime error.
    </param>
      <param name="cIndex">
      The name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="cIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="oFSIndex">
      A string or filespec object that specifies the name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="oFSIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="lNew">TRUE dynamically turns on the descending flag for the order, resulting in descending order. FALSE dynamically turns the flag off, resulting in ascending order.</param>
      <returns>
      If <paramref name="lNew" /> is not specified, DBServer:OrderDescend() returns the current setting. If <paramref name="lNewDescend" /> is specified, the previous setting is returned.
    </returns>
    </member>
    <member name="M:VO.DbServer.OrderInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return and optionally change information about orders and index files.
    </summary>
      <param name="kOrderInfoType">
      Specifies the type of information. The constants are listed below. Note, however, that not all constants are supported for all RDDs.
      <br />Important! DBOI_USER is a constant that returns the minimum value that third-party RDD developers can use for defining new <paramref name="kInfoType" /> parameters. Values less than DBOI_USER are reserved for VO development.
    </param>
      <param name="oFSIndex">
      A string or filespec object that specifies the name of an index file, including an optional drive and directory (no extension should be specified). Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="oFSIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="uOrder">
      The name of the order about which you want to obtain information or a number representing its position in the order list. (For single-order index files, the order name is the eight-letter index file name.) Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files. Invalid values are ignored.
      If no index file or order is specified, the controlling order is assumed.
    </param>
      <param name="uOrdVal">
      If specified, this parameter is used to change the value of a setting. The data type (and whether <paramref name="uOrdVal" /> can be specified), depends on the <paramref name="kInfoType" /> constant and is documented in the Constants section below.
    </param>
      <returns>
      If <paramref name="uNewSetting" /> is not specified, DBServer:OrderInfo() returns the current setting. If <paramref name="uNewSetting" /> is specified, the previous setting is returned.
    </returns>
    </member>
    <member name="M:VO.DbServer.OrderIsUnique(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return the status of the unique flag for a given order.
    </summary>
      <param name="uOrder">
      The name of the order or a number representing its position in the order list. Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files. If omitted or NIL, the controlling order is assumed.
      Specifying an invalid value will raise a runtime error.
    </param>
      <param name="cIndex">
      The name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="cIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="oFSIndex">
      A string or filespec object that specifies the name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="oFSIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="cTarget">
      The name of an index file, including an optional drive and directory (no extension should be specified). Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="cTarget" /> is not open by the current process, a runtime error is raised.
    </param>
      <returns>
      The status of the indicated order's unique flag as a logical value.
    </returns>
    </member>
    <member name="M:VO.DbServer.OrderKeyAdd(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Add a key to a custom built order.
    </summary>
      <param name="uOrder">
      The name of the order or a number representing its position in the order list. Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files. If omitted or NIL, the controlling order is assumed.
      Specifying an invalid value will raise a runtime error.
    </param>
      <param name="cIndex">
      The name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="cIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="oFSIndex">
      A string or filespec object that specifies the name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="oFSIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="uKeyValue">
      A specific key value that you want to add for the current record.
      The data type must match that of the order. If not specified, the order's key expression is evaluated for
      the current record and added to the order.
    </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.OrderKeyCount(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return the number of keys in an order.
    </summary>
      <param name="uOrder">
      The name of the order or a number representing its position in the order list. Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files. If omitted or NIL, the controlling order is assumed.
      Specifying an invalid value will raise a runtime error.
    </param>
      <param name="cIndex">
      The name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="cIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="oFSIndex">
      A string or filespec object that specifies the name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="oFSIndex" /> is not open by the current process, a runtime error is raised.
    </param>
    </member>
    <member name="M:VO.DbServer.OrderKeyDel(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Delete a key from a custom built order.
    </summary>
      <param name="uOrder">
      The name of the order or a number representing its position in the order list. Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files. If omitted or NIL, the controlling order is assumed.
      Specifying an invalid value will raise a runtime error.
    </param>
      <param name="cIndex">
      The name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="cIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="oFSIndex">
      A string or filespec object that specifies the name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="oFSIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.OrderKeyGoTo(XSharp.__Usual)">
      <summary>
      Move to a record specified by its logical record number in the controlling order.
    </summary>
      <param name="nKeyNo">The logical record number. If the value specified does not satisfy the scope or for condition for the order, the record pointer is positioned at the end-of-file.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.OrderKeyNo(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Get the logical record number of the current record.
    </summary>
      <param name="uOrder">
      The name of the order or a number representing its position in the order list. Using the order name is the preferred method since the position may be difficult to determine using multiple-order index files. If omitted or NIL, the controlling order is assumed.
      Specifying an invalid value will raise a runtime error.
    </param>
      <param name="cIndex">
      The name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="uOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="cIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <param name="oFSIndex">
      A string or filespec object that specifies the name of an index file, including an optional drive and directory (no extension should be specified).
      Use this argument with <paramref name="cOrder" /> to remove ambiguity when there are two or more orders with the same name in different index files.
      If <paramref name="oFSIndex" /> is not open by the current process, a runtime error is raised.
    </param>
      <returns>
      The relative position of the current record in the specified order, as a numeric value. DBServer:OrderKeyNo() respects the scope and for condition of the order by returning zero if the record pointer is positioned on an invalid record or if DBServer:EOF is TRUE.
    </returns>
      <value>
      A numeric value representing the logical record number of the current record.
      The DBServer:OrderKeyNo assign sends a NotifyRecordChange message upon successful completion.
    </value>
    </member>
    <member name="P:VO.DbServer.OrderKeyVal">
      <summary>
      The key value of the current record from the controlling order.
    </summary>
      <value>The key value of the current record from the controlling order.</value>
    </member>
    <member name="M:VO.DbServer.OrderScope(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Set the boundaries for scoping key values in the controlling order.
    </summary>
      <param name="nScope">A number specifying the top (TOPSCOPE) or bottom (BOTTOMSCOPE) boundary.</param>
      <param name="uValue">
      The top or bottom range of key values that will be included in the controlling order's current scope. <paramref name="uValue" /> can be an expression that matches the data type of the key expression in the controlling order or a code block that returns the correct data type.
      Omitting <paramref name="uValue" /> or specifying it as NIL has the special effect of resetting the specified scope to its original default. The default top range is the first logical record in the controlling order, and the default bottom range is the last logical record.
    </param>
      <returns>
      If <paramref name="uNewValue" /> is not specified, DBServer:OrderScope() returns the current setting. If <paramref name="uNewValue" /> is specified, the previous setting is returned.
    </returns>
    </member>
    <member name="M:VO.DbServer.OrderSkipUnique(XSharp.__Usual)">
      <summary>
      Move the record pointer to the next or previous unique key in the controlling order.
    </summary>
      <param name="nDirection">Specifies whether the method will skip to the next or previous key. Omitting this value or specifying it as 1 skips to the next unique key. Specifying a negative value skips to the previous key.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.OrderTopScope">
      <summary>
      A key value representing the record of the top boundary in the range of key values that will be included in the controlling order's current scope.
    </summary>
      <value>A key value representing the record of the top boundary in the range of key values that will be included in the controlling order's current scope.</value>
    </member>
    <member name="M:VO.DbServer.Pack">
      <summary>
      Remove deleted records from a database file.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.PaintedStructure">
      <summary>This returns a DBSTRUCT array based on the DataFields and Fieldspecs that were painter in the server editor.</summary>
      <value>A DBSTRUCT array based on the DataFields and Fieldspecs that were painter in the server editor.</value>
    </member>
    <member name="M:VO.DbServer.RDDINFO(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Return and optionally change settings controlled directly by the RDD.
    </summary>
      <param name="kRDDInfoType">
      Specifies the setting.
      <span>
            The constants are described in the Constants section below. <br />
            The initial default of a setting depends on the RDD.<br />
            The constants are described in the Constants section below.  Note, however, that not all constants are supported for all RDDs.<br />
            Important!  _SET_USER is a constant that returns the minimum value that third-party RDD developers 
            can use for defining new parameters.
            Values less than _SET_USER are reserved for X# development.
        </span></param>
      <param name="uRDDVal">
      If specified, this parameter is used to change the value of a setting.
      The data type (and whether <paramref name="uNewSetting" /> can be specified), depends on the <paramref name="kRDDInfoType" />
      constant and is documented in the Constants section below.
    </param>
      <returns>
      If <paramref name="uNewSetting" /> is not specified, DBServer:RDDInfo() returns the current setting.
      If <paramref name="uNewSetting" /> is specified, the previous setting is returned.
    </returns>
    </member>
    <member name="P:VO.DbServer.RddName">
      <summary>
      A string representing the name of the database driver in use with this server.
    </summary>
      <value>A string representing the name of the database driver in use with this server.</value>
    </member>
    <member name="P:VO.DbServer.Rdds">
      <summary>This returns the list of RDDs that were passed to the DbServer constructor.</summary>
      <value>The list of RDDs that were passed to the DbServer constructor.</value>
    </member>
    <member name="P:VO.DbServer.ReadOnly">
      <summary>
      A logical value indicating whether the file was opened as a read-only file. This is determined by an instantiation parameter of the server.
    </summary>
      <value>A logical value indicating whether the file was opened as a read-only file. This is determined by an instantiation parameter of the server.</value>
    </member>
    <member name="M:VO.DbServer.Recall(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Recall those deleted records indicated by a specified scope.
    </summary>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.RecallAll">
      <summary>
      Recall all deleted records in the table.
    </summary>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.RecCount">
      <summary>
      The number of records in the current database file.
    </summary>
      <value>The number of records in the current database file.</value>
    </member>
    <member name="P:VO.DbServer.RecNo">
      <summary>
      A numeric value representing the current record number, identifying the position of the record pointer.
    </summary>
      <value>A numeric value representing the current record number, identifying the position of the record pointer.</value>
    </member>
    <member name="M:VO.DbServer.RecordInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Retrieve information about the indicated record.
    </summary>
      <param name="kRecInfoType">
      The information retrieved depends on the constant specified
      <list type="table"><listheader><term>Constant</term><description>Returned Value</description></listheader><item><term>
            DBRI_BUFFPTR
          </term><description>Pointer to current record buffer</description></item><item><term>
            DBRI_DELETED
          </term><description>Is record deleted?</description></item><item><term>DBRI_DELETED</term><description>Is record deleted?</description></item><item><term>
            DBRI_RECSIZE
          </term><description>
            Record length.
          </description></item><item><term>DBRI_LOCKED</term><description>
            Is record locked?
          </description></item><item><term>DBRI_RECNO</term><description>Record position (like the RecNo access).</description></item></list><br />Important! DBRI_USER is a constant that returns the minimum value that third-party RDD developers can use for defining new <paramref name="kInfoType" /> parameters. Values less than DBRI_USER are reserved for X# development.
    </param>
      <param name="nRecordNumber">Indicates the record for which information is to be retrieved; if 0 or omitted, refers to the current record.</param>
      <param name="uRecVal">This parameter is reserved for RDDs that allow you to change the information rather than just retrieve it. None of the supplied RDDs (as outlined in the 'RDD Specifics' appendix in the Programmer's Guide) support this argument. Either omit the argument or specify it as NIL.</param>
      <returns>
      The data type of the return value depends on the value requested.
    </returns>
    </member>
    <member name="P:VO.DbServer.RecSize">
      <summary>
      A numeric value representing the record length of the server in bytes.
    </summary>
      <value>A numeric value representing the record length of the server in bytes.</value>
    </member>
    <member name="M:VO.DbServer.Refresh">
      <summary>
      Reread the current record from the database, discarding any changes that have been made.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Reindex">
      <summary>
      Recreate all active indexes for this server.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Relation(XSharp.__Usual)">
      <summary>
      Return the linking expression of a specified relation.
    </summary>
      <param name="nRelation">The position of the desired relation in the list of current relations. The relations are numbered according to the order in which they were defined with DBServer:SetRelation().</param>
      <returns>
      A string containing the linking expression of the relation specified by <paramref name="nRelation" />. If there is no relation set for <paramref name="nRelation" />, DBServer:Relation() returns a NULL_STRING.
    </returns>
    </member>
    <member name="P:VO.DbServer.RelationChildren">
      <summary>The returns the array of children that were registered with SetRelation()</summary>
      <value>The array of children that were registered with SetRelation()</value>
    </member>
    <member name="M:VO.DbServer.Replace(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Replace one or several fields with a new expression, for all records that match a specified scope.
    </summary>
      <param name="acbExpression">The single expression to be evaluated to yield the replacement value or the array of expressions to be evaluated to yield the replacement values.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.ResetNotification">
      <summary>
      Resume the broadcasting of Notify messages to the server's attached clients (after DBServer:SuspendNotification() has been called).
    </summary>
    </member>
    <member name="P:VO.DbServer.Retries">
      <summary>The setting that determines how often the DbServer object should retry operations that fail.</summary>
      <value>The setting that determines how often the DbServer object should retry operations that fail.</value>
    </member>
    <member name="M:VO.DbServer.RLOCK(XSharp.__Usual)">
      <summary>
      Lock a record for exclusive write access; other users can still make read-only reference to the record.
    </summary>
      <param name="nRecordNumber">
      The number of the record number to be locked.
      The indicated record is locked, and previous record locks are maintained.
      Note that this can be the current record: explicitly specifying the current record indicates that previous locks should be maintained.
      If omitted, or NIL or -1, the current record is locked and all previous record locks are released.
    </param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.RLockList">
      <summary>
      An array of record numbers that are currently locked.
    </summary>
      <value>An array of record numbers that are currently locked.</value>
    </member>
    <member name="M:VO.DbServer.RLockVerify">
      <summary>
      Determine if the current record in this data server has any pending updates and lock it for exclusive write access if there are none.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.Scope">
      <summary>
      The "scope" component of the "general server scope," which affects several bulk processing methods if they are called with no explicit scope. The initial value of the scope is NIL.
    </summary>
      <value>The "scope" component of the "general server scope," which affects several bulk processing methods if they are called with no explicit scope. The initial value of the scope is NIL.</value>
    </member>
    <member name="M:VO.DbServer.Seek(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Move to the record having the specified key value in the controlling order.
    </summary>
      <param name="uSearchExpr">Specifies the key value associated with the desired record.</param>
      <param name="lSoftSeek">
      Determines how the data server is positioned if the specified key value is not found: TRUE performs a soft seek; FALSE does not. If <paramref name="lSoftSeek" /> is omitted, the current SetSoftSeek() setting is used.
    </param>
      <param name="lLast">
      TRUE seeks the last occurrence of the specified key value. FALSE, the default, seeks the first occurrence. <paramref name="lLast" /> only applies to CDX indexes.
    </param>
      <returns>
      TRUE if the specified key value was found; otherwise, FALSE.
    </returns>
    </member>
    <member name="M:VO.DbServer.SELECT">
      <summary>Select the workarea that the DbServer uses.</summary>
      <returns>The previous workarea that was selected.</returns>
    </member>
    <member name="P:VO.DbServer.SelectionWorkArea">
      <summary>The workarea number of the parent area when the dbserver is a child in a relation.</summary>
      <value>The workarea number of the parent area when the dbserver is a child in a relation.</value>
    </member>
    <member name="M:VO.DbServer.SetDataField(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Assign a DataField object to a specified field.
    </summary>
      <param name="nFieldPosition">The number of the desired field.</param>
      <param name="oDataField">The data field to assign.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.SetFilter(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Set a filter condition.
    </summary>
      <param name="cbFilterBlock">The code block that expresses the filter condition in executable form. If the code block is omitted, the string version of the filter expression is macro-compiled into a code block.</param>
      <param name="cFilterText">The filter condition. If omitted, the DBServer:Filter access method returns a NULL_STRING.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.SetIndex(XSharp.__Usual)">
      <summary>
      Open an index file and select its order as the controlling order, if this is the first index being opened.
    </summary>
      <param name="oFSIndex">
      A string or filespec object that specifies the index file. File type defaults to the native type for the driver (RDD).
    </param>
      <param name="cIndexFileName">
      The index file. File type defaults to the native type for the driver (RDD).
    </param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.SetOrder(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Select an order from one of the open index files as the controlling order.
    </summary>
      <param name="uOrder">The order can be identified by an order number, the position of the order in the order list, or a name.</param>
      <param name="oFSIndex">If the order is specified by an order name that is not unique within the order list, the index file name can be specified, either as a FileSpec object or as a file name in string format, with or without file type. File type defaults to the native type for the driver (RDD). Note, however, that SetOrder() does not open the index file, it refers only to orders within already opened files.</param>
      <param name="cIndexFileName">If the order is specified by an order name that is not unique within the order list, the index file name can be specified, either as a FileSpec object or as a file name in string format, with or without file type. File type defaults to the native type for the driver (RDD). Note, however, that SetOrder() does not open the index file, it refers only to orders within already opened files.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.SetOrderCondition(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Set conditions that is applied to index and order creation. If SetOrderCondition() has not been called, order creation is subject to the general server scope. If neither has been set, orders are not conditional.
    </summary>
      <param name="cFor">A string that specifies the FOR condition for the order. If you do not need this information, you can specify a NULL_STRING.</param>
      <param name="cbForBlock">
      A code block that defines a FOR condition that each record within the scope must meet in order to be processed. Only those records that meet the condition are included in the resulting order. Duplicate key values are not added to the index file.
      The FOR condition is stored as part of the index file and used when updating or recreating the index using the DBServer:Reindex() method. The FOR clause provides the only scoping that is maintained for all database changes. All other scope conditions create orders that do not reflect database updates.
      If a string is provided, it is compiled into a code block dynamically. It can be no longer than 250 characters under the DBFNTX driver.
    </param>
      <param name="lAll">Specifies all orders in the current or specified work area. ALL is the default scope of INDEX ON.</param>
      <param name="cbWhileBlock">
      A code block that specifies another condition that must be met by each record as it is processed. As soon as a record is encountered that causes the condition to fail, the order creation terminates. If a WHILE clause is specified, the data is processed in the controlling order.
      The WHILE condition is transient (that is, it is not stored in the file and not used for index updates and reindexing purposes). The WHILE condition creates temporary orders, but these orders are not updated.
      Using the WHILE condition is more efficient and faster than using the FOR condition. The WHILE condition processes only data for which <paramref name="cbWhileCondition" /> is TRUE from the current position. The FOR condition, in contrast, processes all data in the data source.
    </param>
      <param name="cbEvalBlock">The code block that is evaluated for every record that is processed, or as specified below. This code block allows the application to intercede during the order creation, which might be quite lengthy; it might be used to update the screen, for example, showing progress on a thermometer-type display or in the status bar.</param>
      <param name="nStep">
      The numeric expression that modifies the number of times <paramref name="cbEvalBlock" /> is evaluated. This argument offers a performance enhancement by evaluating the condition for every nth record instead of for every record ordered. To step through every record, specify a value of 0 or omit the parameter.
    </param>
      <param name="nStart">The record number to start the evaluation from. To start at the top, specify a value of 0 or omit the parameter.</param>
      <param name="nNext">
      The number of records to process, starting at <paramref name="nStart" />. Specify 0 to ignore this argument.
    </param>
      <param name="nRecno">A single record number to process. Specify 0 to ignore this argument.</param>
      <param name="lRest">Specifies whether the scope of processing is all records, or, starting with the current record, all records to the end of file. This argument corresponds to the REST and ALL clauses of record processing commands. If TRUE , the scope is REST; otherwise, the scope is ALL records.</param>
      <param name="lDescending">Specifies whether the keyed pairs be sorted in decreasing or increasing order of value. If TRUE the order is in descending order otherwise the order is in ascending order.</param>
      <param name="lAdditive">Specifies whether open orders should remain open while the new order is being created. TRUE specifies that they should remain open. FALSE specifies that all open order should be closed. The default is FALSE.</param>
      <param name="lCurrent">Specifies whether only records in the controlling order—and within the current range as specified by DBServer:OrderScope()—will be included in this order. TRUE specifies that the controlling order and range should be used to limit the scope of the newly created order. FALSE specifies that all records in the database file are included in the order. The default is FALSE.</param>
      <param name="lCustom">Specifies whether the new order will be a custom built order (for RDDs that this feature). TRUE specifies that a custom built order will be created. A custom built order is initially empty, giving you complete control over order maintenance. The system does not automatically add and delete keys from a custom built order. Instead, you explicitly add and delete keys using DBServer:OrderKeyAdd() and DBServer:OrderKeyDel(). FALSE specifies a standard, system-maintained order. The default is FALSE.</param>
      <param name="lNoOptimize">Specifies whether the FOR condition will be optimized (for RDDs that support this feature). TRUE optimizes the FOR condition, and FALSE does not. The default is FALSE.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.SetRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Set a relation from this server to the child server.
    </summary>
      <param name="oDBChild">
      The server attached to the child server must be specified as a DBServer object (not as an alias). If <paramref name="oDBChild" /> is omitted, all relations for this server are removed (the recommended way of doing this is the ClearRelations() method).
    </param>
      <param name="uRelation">The relation code block for the server or the name or symbol representing the field from this server; a code block is constructed and macro-compiled</param>
      <param name="cRelation">When the relation is specified as a code block, a string version of the code block can be provided as well; it is returned by the Relation() method.</param>
      <param name="lSelective">Should this be a selective relation ?</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.SetSelectiveRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Set a selective relation from this server to the child server; standard database operations are restricted to those records that match the relation.
    </summary>
      <param name="oDBChild">
      The server attached to the child server must be specified as a DBServer object (not as an alias). If <paramref name="oDBChild" /> is omitted, all relations for this server are removed (the recommended way of doing this is the ClearRelations() method).
    </param>
      <param name="uRelation">The relation code block for the server or the name or symbol representing the field from this server; a code block is constructed and macro-compiled</param>
      <param name="cRelation">When the relation is specified as a code block, a string version of the code block can be provided as well; it is returned by the Relation() method.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.DbServer.Shared">
      <summary>
      A logical value indicating whether the server is sharable or exclusive.
    </summary>
      <value>A logical value indicating whether the server is sharable or exclusive.</value>
    </member>
    <member name="M:VO.DbServer.Skip(XSharp.__Usual)">
      <summary>
      Move the record pointer forward or backward a specified number of records.
    </summary>
      <param name="nRecordCount">The number of records to move, relative to the current record. A positive value means to move forward, and a negative value means to move backward. If omitted, +1 is assumed.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Sort(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Copy records to another database file in sorted order. If neither conditions nor scope is passed to the method, it is subject to the general server scope.
    </summary>
      <param name="cTarget">The file to which the records is copied.</param>
      <param name="oFSTarget">A string or filespec object that specifies the file to which the records is copied.</param>
      <param name="cTarget">The file to which the records is copied.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.Status">
      <summary>
      A HyperLabel object identifying the status after the last operation. If
    </summary>
      <value>A HyperLabel object identifying the status after the last operation. If</value>
    </member>
    <member name="M:VO.DbServer.Sum(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Calculate the sum of a series of numeric expressions.
    </summary>
      <param name="acbExpression">The single expression that Sum() operates on or the array of expressions that Sum() operates on.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      An array that contains the sums for each expression or field specified.
    </returns>
    </member>
    <member name="M:VO.DbServer.SuspendNotification">
      <summary>
      Suspend the broadcasting of Notify messages to the server's attached clients.
    </summary>
    </member>
    <member name="P:VO.DbServer.TableExt">
      <summary>Return the Extension for the opened DBF. This is normally .DBF but may be different if a file with a different extension was opened.</summary>
      <value>The Extension for the opened DBF</value>
    </member>
    <member name="M:VO.DbServer.Total(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Aggregate records by key value, producing grouped summarizations, and write the aggregate records to another database.
    </summary>
      <param name="oFSTarget">A string or filespec object that specifies the file to which the summary data is written.</param>
      <param name="cbKeyField">The key field in this server that is the basis for the summarization. Note that for the summarization to produce correct results, the table should be indexed or sorted on this key field.</param>
      <param name="aFieldList">An array of fields from the source file that are to be included. The default is all fields.</param>
      <param name="cbForBlock">The condition evaluated for each record in the scope; if TRUE, the record is included in the processing. It provides the same functionality as the FOR clause of record processing commands.</param>
      <param name="cbForCondition">A code block that defines a condition that each record within the scope must meet in order to be processed.</param>
      <param name="cbWhileBlock">The condition evaluated for each record from the first record until the condition returns FALSE. It provides the same functionality as the WHILE clause of record processing commands.</param>
      <param name="cbWhileCondition">
                A code block that defines another condition that each record must meet in order
                to be processed.
                As soon as a record is encountered that causes the condition to fail, the operation
                terminates.<br />

                If no scope is specified, <paramref name="cbWhileCondition" /> changes the default scope to <paramref name="lRest" />.<br />

                You define the scope using one of these three, mutually exclusive arguments.<br />
                The default is all records.
            </param>
      <param name="uScope">
                The range of records to process, providing the same functionality as the ALL, REST and NEXT clauses of record processing commands.
                <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>DBSCOPEALL</term><description>The scope is all the records in the table. This is the default, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.</description></item><item><term>DBSCOPEREST</term><description>The scope is the remaining records in the table from the current position.</description></item><item><term>&lt;nRecords&gt;</term><description>
                            The scope is the next <paramref name="nRecords" /> records.
                        </description></item></list></param>
      <param name="cDriver">The name of the RDD that will service the data server. If not specified, the default RDD as determined by RDDSetDefault() is used.</param>
      <param name="aRDD">
                A one-dimensional array with the names of RDDs from which the main RDD inherits special functionality. This allows you to use RDDs with special capabilities, like encryption or decryption, for different data servers with different database drivers. These RDDs overlay special functions of the main RDD (specified with the <paramref name="cDriver" /> argument). If multiple RDDs (specified with this argument) implement the same function, the function associated with the last RDD in the list takes precedence. If <paramref name="aRdds" /> is omitted, no additional RDDs are assumed.
            </param>
      <param name="nNext">
                The number of records to process, starting at <paramref name="nRecord" />.  Specify 0 to ignore this argument.
            </param>
      <param name="nRecord">A single record number to process.  Specify 0 to ignore this argument.</param>
      <param name="lRest">
                TRUE processes only records from <paramref name="nStart" /> to the end of the file.  FALSE processes all records.
            </param>
      <param name="lNoOpt">Disable (Rushmore) optimizations (not supported yet).</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="M:VO.DbServer.UnLock(XSharp.__Usual)">
      <summary>
      Release a specified lock or all locks.
    </summary>
      <param name="nRecordNumber">The number of the desired record. If 0 or omitted, all locks for this server are released, record locks as well as file locks.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.DbServer.Update(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Update this server with data from another server or table.
    </summary>
      <param name="oDbServer">The database that provides the new data.</param>
      <param name="cbKey">The key field that defines how records are matched between the servers.</param>
      <param name="lRandomFlag">Indicates if the records in the other database are allowed to be in random order. If FALSE or not specified, the other database must be ordered on the specified key.</param>
      <param name="cbReplace">Code block that performs the update operations.</param>
      <returns>
      TRUE if successful; otherwise, FALSE (although some records still might have been processed).
    </returns>
    </member>
    <member name="P:VO.DbServer.Used">
      <summary>
      A logical value indicating whether the server is currently open
    </summary>
      <value>A logical value indicating whether the server is currently open</value>
    </member>
    <member name="P:VO.DbServer.WhileBlock">
      <summary>
      The "WHILE block" component of the "general server scope," which affects several bulk processing methods if they are called with no explicit scope
    </summary>
      <value>The "WHILE block" component of the "general server scope," which affects several bulk processing methods if they are called with no explicit scope</value>
    </member>
    <member name="P:VO.DbServer.WorkArea">
      <summary>
      A number representing the workarea of the server
    </summary>
      <value>A number representing the workarea of the server</value>
    </member>
    <member name="M:VO.DbServer.Zap">
      <summary>
      Permanently remove all records from the server and release the disk space.
    </summary>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="T:VO.OrderSpec">
      <summary>
      OrderSpec class was designed to model index information at the order level - not file level - and complement the DBFileSpec class.
    </summary>
    </member>
    <member name="M:VO.OrderSpec.#ctor(XSharp.__Usual)">
      <summary>
      Instantiates an OrderSpec object using an existing DBFileSpec object.
    </summary>
      <param name="oDBFS">An existing DBFileSpec object.</param>
      <returns>
      An OrderSpec object.
    </returns>
    </member>
    <member name="P:VO.OrderSpec.Add">
      <summary>
      A logical value specifying whether open orders should remain open while the new order is being created.
    </summary>
      <value>A logical value specifying whether open orders should remain open while the new order is being created.</value>
    </member>
    <member name="P:VO.OrderSpec.All">
      <summary>
      A logical value determining whether the record scope is for all records in the DBF (TRUE)
    </summary>
      <value>A logical value determining whether the record scope is for all records in the DBF (TRUE)</value>
    </member>
    <member name="P:VO.OrderSpec.AutoOpen">
      <summary>
      Determines if this index file will open when the DBF file is opened.
    </summary>
      <value>Determines if this index file will open when the DBF file is opened.</value>
    </member>
    <member name="P:VO.OrderSpec.AutoOrder">
      <summary>
      Determines if this index file will set the first order when it is opened.
    </summary>
      <value>Determines if this index file will set the first order when it is opened.</value>
    </member>
    <member name="P:VO.OrderSpec.AutoShare">
      <summary>
      Determines if this index file will be opened in the same share mode as the DBF file.
    </summary>
      <value>Determines if this index file will be opened in the same share mode as the DBF file.</value>
    </member>
    <member name="P:VO.OrderSpec.Current">
      <summary>
      A logical value determining whether only those records in the controlling order and in the scope are included in this order. Defaults to FALSE so that all records in DBF are included.
    </summary>
      <value>A logical value determining whether only those records in the controlling order and in the scope are included in this order. Defaults to FALSE so that all records in DBF are included.</value>
    </member>
    <member name="P:VO.OrderSpec.Custom">
      <summary>
      A logical value determining if this is to be a custom order. Valid for RDDs that support custom orders. Defaults to FALSE for a non-custom order.
    </summary>
      <value>A logical value determining if this is to be a custom order. Valid for RDDs that support custom orders. Defaults to FALSE for a non-custom order.</value>
    </member>
    <member name="P:VO.OrderSpec.DBF">
      <summary>
      The DBFileSpec object with which this OrderSpec object is associated.
    </summary>
      <value>The DBFileSpec object with which this OrderSpec object is associated.</value>
    </member>
    <member name="P:VO.OrderSpec.Descend">
      <summary>
      A logical value determining if this is to be a descending order. Defaults to FALSE for ascending order.
    </summary>
      <value>A logical value determining if this is to be a descending order. Defaults to FALSE for ascending order.</value>
    </member>
    <member name="P:VO.OrderSpec.EvalBlock">
      <summary>
      The code block to be evaluated based upon OrderSpec:Interval. The code block should return a TRUE value.
    </summary>
      <value>The code block to be evaluated based upon OrderSpec:Interval. The code block should return a TRUE value.</value>
    </member>
    <member name="P:VO.OrderSpec.FileName">
      <summary>
      The drive, path and file name of the order. The drive and path default to either the current window's drive and path or to the drive and path used in SetDefault(), if omitted.
    </summary>
      <value>The drive, path and file name of the order. The drive and path default to either the current window's drive and path or to the drive and path used in SetDefault(), if omitted.</value>
    </member>
    <member name="P:VO.OrderSpec.ForBlock">
      <summary>
      The FOR condition code block to build this order.
    </summary>
      <value>The FOR condition code block to build this order.</value>
    </member>
    <member name="P:VO.OrderSpec.ForCond">
      <summary>
      The FOR condition string used to build this order.
    </summary>
      <value>The FOR condition string used to build this order.</value>
    </member>
    <member name="P:VO.OrderSpec.HPLock">
      <summary>
      A logical value determining whether the DBFNTX RDD will use the HPLocking scheme for building this order. The default is FALSE, i.e., no HPLocking.
    </summary>
      <value>A logical value determining whether the DBFNTX RDD will use the HPLocking scheme for building this order. The default is FALSE, i.e., no HPLocking.</value>
    </member>
    <member name="P:VO.OrderSpec.Interval">
      <summary>
      An integer determining the interval for the execution of OrderSpec:EvalBlock during order building.
    </summary>
      <value>An integer determining the interval for the execution of OrderSpec:EvalBlock during order building.</value>
    </member>
    <member name="P:VO.OrderSpec.IsCond">
      <summary>
      A logical value indicating whether this is a conditional order. This is assigned TRUE internally when any of the conditional ASSIGNs are assigned values and is not required to be assigned manually to create a conditional order.
    </summary>
      <value>A logical value indicating whether this is a conditional order. This is assigned TRUE internally when any of the conditional ASSIGNs are assigned values and is not required to be assigned manually to create a conditional order.</value>
    </member>
    <member name="P:VO.OrderSpec.KeyInfo">
      <summary>
      The 1-D, 4-element array containing the structure of the OrderSpec object.
    </summary>
      <value>The 1-D, 4-element array containing the structure of the OrderSpec object.</value>
    </member>
    <member name="P:VO.OrderSpec.LockOffSet">
      <summary>
      The current NTX locking offset as a numeric value.
    </summary>
      <value>The current NTX locking offset as a numeric value.</value>
    </member>
    <member name="P:VO.OrderSpec.NoOptimize">
      <summary>
      A logical value determining whether the FOR condition used to build this order should be optimized. Valid for RDDs that support query optimizations. Defaults to FALSE for no optimization.
    </summary>
      <value>A logical value determining whether the FOR condition used to build this order should be optimized. Valid for RDDs that support query optimizations. Defaults to FALSE for no optimization.</value>
    </member>
    <member name="M:VO.OrderSpec.OrderAdd(XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Adds order information from an existing index file to the OrderSpec object and associates this OrderSpec object with the DBFileSpec object used for instantiation.
    </summary>
      <param name="oFS">A string or filespec object that specifies the full path to the index file or a FileSpec object of the index file.</param>
      <param name="uOrder">The order name or numeric position if using multi-order files.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.OrderSpec.OrderBlock">
      <summary>
      The code block of the index key expression used to create this order.
    </summary>
      <value>The code block of the index key expression used to create this order.</value>
    </member>
    <member name="M:VO.OrderSpec.OrderCreate(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
      Create new orders, and if empty, fills in OrderSpec information and associates the created order with the DBFileSpec object.
    </summary>
      <param name="oFS">A string or filespec object that specifies the full path to the target file.</param>
      <param name="cOrder">The order name. Used for multi-order index files.</param>
      <param name="cKeyValue">A string of the index key expression.</param>
      <param name="cbKeyValue">A code block of the index key expression.</param>
      <param name="lUnique">A logical to determine if this is to be a unique order.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="M:VO.OrderSpec.OrderDelete(XSharp.__Usual)">
      <summary>
      Deletes orders from a multi-order file or a physical index file of a single-order file. NULLs out OrderSpec object information in the OrderSpec object and the DBFileSpec object specific to this order.
    </summary>
      <param name="uOrder">The numeric position or order name of the order to be deleted. Use order names unless the actual order position is known. The default is the first order of the index file.</param>
      <returns>
            TRUE if successful; otherwise, FALSE.
        </returns>
    </member>
    <member name="P:VO.OrderSpec.OrderExpr">
      <summary>
      The string of the index key expression used to create this order.
    </summary>
      <value>The string of the index key expression used to create this order.</value>
    </member>
    <member name="P:VO.OrderSpec.OrderName">
      <summary>
      The order (tag) name for this order. Used for creating multi-order order files (bags).
    </summary>
      <value>The order (tag) name for this order. Used for creating multi-order order files (bags).</value>
    </member>
    <member name="P:VO.OrderSpec.Recno">
      <summary>
      The individual record number to be processed. Defaults to zero (0) for all records.
    </summary>
      <value>The individual record number to be processed. Defaults to zero (0) for all records.</value>
    </member>
    <member name="P:VO.OrderSpec.Records">
      <summary>
      The number of records to be processed starting from OrderSpec:Start.
    </summary>
      <value>The number of records to be processed starting from OrderSpec:Start.</value>
    </member>
    <member name="P:VO.OrderSpec.Rest">
      <summary>
      A logical value indicating that records are to be processed starting from OrderSpec:Start (TRUE). Defaults to FALSE to process all records from the beginning of file.
    </summary>
      <value>A logical value indicating that records are to be processed starting from OrderSpec:Start (TRUE). Defaults to FALSE to process all records from the beginning of file.</value>
    </member>
    <member name="P:VO.OrderSpec.Start">
      <summary>
      Determines the starting record number from which to start building this order.
    </summary>
      <value>Determines the starting record number from which to start building this order.</value>
    </member>
    <member name="P:VO.OrderSpec.StrictRead">
      <summary>
      A logical value determining whether the records will be read directly from disk during order creation.
    </summary>
      <value>A logical value determining whether the records will be read directly from disk during order creation.</value>
    </member>
    <member name="P:VO.OrderSpec.Unique">
      <summary>
      A logical value determining whether this order is to be a unique order (no duplicate keys).
    </summary>
      <value>A logical value determining whether this order is to be a unique order (no duplicate keys).</value>
    </member>
    <member name="P:VO.OrderSpec.WhileBlock">
      <summary>
      A WHILE condition code block used during the building of this order.
    </summary>
      <value>A WHILE condition code block used during the building of this order.</value>
    </member>
    <member name="T:VORDDClasses.Functions">
      <summary>This compiler generated class contains all the functions, globals and defines that are defined in the VORDDClasses.dll assembly. </summary>
    </member>
    <member name="M:VORDDClasses.Functions.DbGetDefaultLockMode">
      <summary>Get the default locking mode for the DbServer class</summary>
      <returns>The current locking mode</returns>
    </member>
    <member name="M:VORDDClasses.Functions.DbSetDefaultLockMode(System.UInt32)">
      <summary>Get/Set the default locking mode for the DbServer class</summary>
      <param name="dwLockMode">The new locking mode. The default = ccOptimistic</param>
      <returns>The previous locking mode</returns>
    </member>
    <member name="M:VORDDClasses.Functions.DbSetRestoreWorkarea(XSharp.__Usual)">
      <summary>Get/Set the flag that determines if DbServer operations restore the current workarea </summary>
    </member>
  </members>
</doc>